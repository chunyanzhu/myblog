[{"_id":"54c222aec8dd347c05000008","url":"http://xwenliang.cn/p/54c222aec8dd347c05000008","auther":"邢文亮","cata":"2","time":1422212580000,"title":"rem—前端狗的福音","content":"<p name=\"9-aaa9\">近期看到淘宝的移动端改版了，使用了rem这个神奇的单位。</p><p name=\"10-6018\">这货看上去跟em长的颇为相似，但它是font size of the root element，em只是font size of the element，显然rem是em的升级版啊。</p><p name=\"11-be54\">我们在用em的时候，它是相对于父元素字体大小的单位，这点让我们很不爽，很容易出现1.2em*1.2em的情况，但是rem却是相对于根元素(html)的字体大小的单位，这样就可以避免上面的问题了。</p><p name=\"12-77b2\">那么问题来了，这货用来做移动端适配是不是很合适？</p><p name=\"13-8646\"><br></p><p name=\"14-8ffa\">然后我们扒一扒移动端适配的几种方式：</p><p name=\"0-4e2d\"><br></p><p name=\"15-a8ca\">1.流式布局：宽度使用百分比，高度定死，这样很容易出现图片变形的情况，你懂得。尝试background-size:cover？也是各种坑，并且效果只能说是差强人意。</p><p name=\"1-628e\"><br></p><p name=\"16-a6c8\">2.固定宽度：用pc时代的思想来做，你不是尺寸多嘛，我搞个wrap，宽度设置320，然后margin: 0 auto; 这种方法在5.5寸大屏上的效果，只能用呵呵来描述了。</p><p name=\"2-7ce4\"><br></p><p name=\"17-9fbc\">3.响应式：老外们喜欢用，但是我一直觉得这是个伪命题。很多人用它是为了pc、移动端共用一个页面。简而言之，就是懒。(目前本博客就是采用了这个懒法子)</p><p name=\"3-6aba\"><br></p><p name=\"18-90b0\">4.设置viewport：</p><pre name=\"20-656f\"><ul><li cur=\"true\">&lt;meta name=\"viewport\" content=\"width=320,maximum-scale=2,user-scalable=no\"&gt;</li></ul></pre><p name=\"21-7a07\">这样，在320px css逻辑像素的设备下，就不对页面缩放，否则的话进行device-width/320倍的缩放，这样也可以勉强适配，但是是整个页面都被放大了，很容易出现图片变虚的情况。</p><p name=\"4-4fc6\"><br></p><p name=\"22-b232\">5.我们的rem登场了</p><p name=\"23-52b1\">它跟第4种方式类似，都是先假设设备的尺寸就是320(当然也可以是其他值)，然后在这个尺寸下切图，设定各个元素针对该尺寸下的相对宽高。当屏幕变宽变窄的时候，各个元素也跟着放大缩小相应的倍数，这样理论上就可以完美适配所有尺寸了。</p><p name=\"24-6478\"><br></p><p name=\"25-a62c\">等等，第5种跟第4种有什么区别吗？</p><p name=\"26-62c3\">区别还是有的，第4种是粗暴的将整个页面放大/缩小,但是第5种是可选的...</p><p name=\"32-99eb\">只要将不需要跟随设备屏幕缩放的元素，使用px即可...</p><p name=\"33-af7b\"><br></p><p name=\"34-5e6c\">使用的时候，为了避免chrome对小于12px字体自动调整，建议给html设置12px以上的字号...</p><p name=\"27-9d03\" cur=\"true\"><a href=\"/demo/rem/index.html\">我是呆猫</a></p>","brief":"近期看到淘宝的移动端改版了，使用了rem这个神奇的单位。这货看上去跟em长的颇为相似，但它是font size of the root element，em只是font size of the ele","fav":[],"comment":0,"read":0},{"_id":"542251406ef62a8001000002","url":"http://xwenliang.cn/p/542251406ef62a8001000002","auther":"邢文亮","cata":"2","time":1411884600000,"title":"图片放大抖动的内在原因及解决方法","content":"<p name=\"7437\">最近百度视频首页改版，小伙伴们给作品海报添加了一个hover效果，就是鼠标划入的时候，海报会放大一些，划出的时候，海报再缩小回原来的大小。具体实现也挺容易的：</p><pre name=\"5d19\"><ul><li>a img{</li><li>     -webkit-transition: all .05s ease-in;</li><li>}</li><li>a:hover img{</li><li>     -webkit-transform: scale(1.05);</li><li>} </li></ul></pre><p name=\"b79a\">其他前缀的就不写了，本来效果也挺好的，但是pm同学发现，每次图片放大之后，该图片都会抖一下。</p><p name=\"7007\"><br></p><p name=\"b251\">后来仔细对比发现，\"抖\"的这一下，实际上是让图片变清晰了，但是不仔细看的话，整体感觉就是：图片放大之后还要抖一下。感觉着实让人不爽。</p><p name=\"9c5e\"><br></p><p name=\"6863\">后来发现，有一条属性可以在图片放大后，不再让图片变清晰，这样也就解决了图片的抖动问题了，该属性是：</p><pre name=\"5b7e\"><ul><li>-webkit-backface-visibility: hidden; <span style=\"line-height: 1.5;\"> </span></li></ul></pre><p name=\"60c4\"><br></p><p name=\"60c4\">这条属性的本意是：<b>隐藏被旋转的元素的背面 </b>但它为何能阻止浏览器补间像素使放大的图片变清晰，就不得而知了...</p>","brief":"最近百度视频首页改版，小伙伴们给作品海报添加了一个hover效果，就是鼠标划入的时候，海报会放大一些，划出的时候，海报再缩小回原来的大小。具体实现也挺容易的：a img{     -webkit-tr","fav":[],"comment":0,"read":0},{"_id":"548aae4aea5f23ed64000001","url":"http://xwenliang.cn/p/548aae4aea5f23ed64000001","auther":"邢文亮","cata":"4","time":1418640840000,"title":"解决mongodb多次open报错","content":"<p name=\"0-64f5\">用过mongodb的同学们可能都遇到过，mongodb在open之后没来的及close，再进行一次open操作将会导致报错，整个nodejs进程都死掉了。如下图：</p><p name=\"1-a1b7\"><img src=\"/uploads/artical/1418639343953-%E9%82%A2%E6%96%87%E4%BA%AEaaa.jpg\"></p><p name=\"2-5ea3\"><br></p><p name=\"3-7ede\">解决方法大致有以下几种，</p><p name=\"4-9612\">1.使用 <a href=\"http://mongoosejs.com/\" target=\"_blank\">Mongoose</a></p><p name=\"7-90f6\">2.open之后，就不再close</p><p name=\"9-ad75\"><br></p><p name=\"10-99c4\">以上两种解决方案，对于我这个强迫症患者来说，都有问题。前者太霸道，后者有不确定因素。</p><p name=\"11-5f8d\" cur=\"true\">一次偶然的机会，发现了mongodb.openCalled，顾名思义，如果mongodb已经open了，它的值为true</p><p name=\"12-6046\"><br></p><pre name=\"15-5348\"><ul><li>var mongodb = require('mongodb'),</li><li>    Db = mongodb.Db,</li><li>    Connection = mongodb.Connection,</li><li>    Server = mongodb.Server,</li><li>    mongo = new Db(某db, new Server(host, Connection.DEFAULT_PORT, {safe: true}), {w: 1}),</li><li name=\"24-6932\"><span class=\"tab\">    db = {};</span></li><li name=\"25-63cb\">db.open = <em>function(callback){</em></li><li name=\"26-9ec8\"><em>    if(mongo.openCalled){</em></li><li name=\"28-6324\"><em>   &nbsp;    callback(null, mongo);</em></li><li name=\"29-b488\"><em>    }</em></li><li name=\"30-9e87\"><em>    else{</em></li><li name=\"31-7c5e\"><em>   &nbsp;    mongo.open(callback);</em></li><li name=\"32-bfd2\"><em>    }</em></li><li name=\"27-56d6\"><em>};</em></li><li name=\"33-9e14\">db.get = <em>function(table, conditions, callback){</em></li><li name=\"34-a1f9\"><span class=\"tab\">    </span>this.open(function(err, db){</li><li name=\"36-5ace\">        if(err){</li><li name=\"39-7594\">            mongo.close(); </li><li name=\"38-743a\">            return console.log(err);</li><li name=\"40-b730\">        }</li><li name=\"41-556b\"><span class=\"tab\">    <span class=\"tab\">    db.collection(table, function(err, collection){</span></span></li><li name=\"42-5d5f\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">   &nbsp;<span class=\"tab\">    if(err){</span></span></span></span></span></li><li name=\"44-511e\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    mongo.close();</span></span></span></span><br></span></span></span></span></span></li><li name=\"46-733b\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    return console.log(err);</span></span></span></span><br></span></span></span></span></span></span></span></span></span></li><li name=\"46-733b\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    }</span></span></span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"48-911c\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    var sort = conditions['sort'] || null,</span></span></span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"49-510f\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    limit = conditions['limit'] || null;</span></span></span></span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"50-6d68\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    delete conditions['sort'];</span></span></span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"51-9304\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    delete conditions['limit'];</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"47-94d6\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    collection.find(conditions).sort(sort).limit(limit).toArray(function(err, result){</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"53-916c\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">   &nbsp;<span class=\"tab\">    mongo.close();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"55-77a0\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    callback(err, result);</span></span></span></span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"54-5426\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    <span class=\"tab\">    </span></span></span>});</span></span></span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li name=\"43-5a8b\"><span class=\"tab\"><span class=\"tab\"><span class=\"tab\">    <span class=\"tab\">    </span></span>});</span></span></li><li name=\"37-6019\">    });</li><li name=\"35-9882\" cur=\"true\">};</li><li name=\"23-b08a\"> </li></ul></pre><p name=\"19-5dce\"><br></p>","brief":"用过mongodb的同学们可能都遇到过，mongodb在open之后没来的及close，再进行一次open操作将会导致报错，整个nodejs进程都死掉了。如下图：解决方法大致有以下几种，1.使用 Mo","fav":[],"comment":0,"read":0},{"_id":"541f9e016ef62a8001000001","url":"http://xwenliang.cn/p/541f9e016ef62a8001000001","auther":"sundonghan","cata":"3","time":1411358160000,"title":"如何快速生成静态页","content":"<p name=\"76f7\">&nbsp; &nbsp; 在一些不需要实时数据处理的网页上，使用静态化定期更新数据，可以极大的减小服务器压力。不再赘述，直入正题。</p><p name=\"9f4e\">代码如下：</p><pre name=\"71ee\"><ul><li>&lt;?php</li><li>    ob_start();//开启缓冲区<br></li><li>    @readfile('http://www.zol.com.cn/index.php');//读取文件，并输出到缓冲区</li><li>    $string = ob_get_plush();//将缓冲区内容刷出到字符串中，并关闭输出缓冲区</li><li>    $myfile = fopen('http://www.zol.com.cn/index.html','w+');//打开index.html文件</li><li>    fwrite($mysfile,$string);//将生成的页面内容写入HTML静态文件</li><li>    ob_clean();//清空缓冲区</li><li>?&gt;<span style=\"line-height: 1.5;\"> </span></li></ul></pre><p name=\"6769\">&nbsp; &nbsp; 当然，在一些实际应用中，比如view与controller分离的模式中，我们需要对一些特殊字符串进行替换。</p><p name=\"53d1\">&nbsp; &nbsp; 原理很简单，实现起来也并不困难。</p><p name=\"5b7f\">&nbsp; &nbsp; 由此，我们可以延伸出一种可能性，那就是使用AJAX实现动态页面的动静分离。将需要实时的信息通过ajax请求回来，其它的都处理成静态页面。</p><p name=\"b6fa\"><br></p>","brief":"&nbsp; &nbsp; 在一些不需要实时数据处理的网页上，使用静态化定期更新数据，可以极大的减小服务器压力。不再赘述，直入正题。代码如下：&lt;?php    ob_start();//开启缓冲","fav":[],"comment":0,"read":0},{"_id":"528f48cede7808945b000002","url":"http://xwenliang.cn/p/528f48cede7808945b000002","auther":"邢文亮","cata":"4","time":1386057180000,"title":"使用Nodejs的socket制作聊天室遇到的问题总结","content":"<p name=\"577e\">1、首先遇到的问题是，刷新浏览器会触发disconnect和connect事件，这样会反复提示用户进入和离开。要解决这个问题，可以在disconnect的事件回调函数里面加一个延时。如果触发了disconnect后马上又触发了connect，则不执行disconnect的事件回调函数。</p><p name=\"8218\"><br></p><p name=\"5e12\">2、第二个问题是，用户在开多标签的情况下，每新打开/关闭一个标签，都会触发一次connect/disconnect事件。解决这个问题的关键，在于定义好'用户离开'的界定。我在这里定义的用户离开，是指的用户关闭当前浏览器的所有的聊天室窗口。那么我如何知道用户关闭了所有的聊天室窗口呢？</p><p name=\"73bc\">首先我植入了一个浏览器生存周期的cookie，带有这个cookie的用户首次进入聊天室，我会把tabs属性设为1，再次进入就+1，离开就-1，如果最后tabs的值为0，则表示用户关闭了当前浏览器的所有的聊天室窗口，这个时候就说明'用户离开'了。</p><p name=\"603f\"><br></p><p name=\"6f1f\">3、第三个问题是用户状态同步的问题。比如用户在登陆状态开了两个标签，在其中一个标签退出登陆，那么另外一个标签的状态也应该是退出登陆。如何实时检测呢？我的做法是，在新消息进入和新的连接建立时进行检测。也就是说，在服务器下一次主动推送消息的时候检测，这样做的好处在于，可以免于轮询。</p><p name=\"797c\">可能你会说，为何不在退出登陆的时候，就推送一条用户离开的消息呢？因为我只有在聊天室页面使用了socket。。</p><p name=\"5b8f\"><br></p><p name=\"89d3\"><a target=\"_blank\" href=\"/chatroom\">聊天室</a></p>","brief":"1、首先遇到的问题是，刷新浏览器会触发disconnect和connect事件，这样会反复提示用户进入和离开。要解决这个问题，可以在disconnect的事件回调函数里面加一个延时。如果触发了disc","fav":[],"comment":0,"read":0},{"_id":"55d2fa9dfdc585c43d000011","url":"http://xwenliang.cn/p/55d2fa9dfdc585c43d000011","auther":"邢文亮","cata":"2","time":1439898420000,"title":"css中小数点的精度问题","content":"\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<p name=\"10-710f\">今天同事遇到一个奇葩的问题，我以前好像也遇到过，但没有深究，</p><p name=\"11-b8c1\">这告诉我们，遇到问题一定要刨根问底，否则将来某一天你一定还会与它不期而遇😂</p><p name=\"12-9717\"><br></p><p name=\"13-83c5\">我们经常会遇到一些横向排列的布局，并且横向排列的总宽度要大于显示宽度，</p><p name=\"14-a619\">如轮播图，左右滑动菜单等。通常的做法就那么几种：</p><p name=\"15-9b18\">1. white-space:nowrap + display:inline-block</p><p name=\"16-7cd7\">2. display:box/flex + box-flex/flex:1(or other)</p><p name=\"17-b26b\">3. float + 父元素宽度动态计算</p><p name=\"18-84f7\"><br></p><p name=\"19-938a\">步入移动互联网时代后，大多使用第二种了，而我却比较喜欢第一种，虽然需要加点小hack去除间隙</p><p name=\"20-6932\">我同事正好使用了第三种，于是遇到了这个奇葩的bug</p><p name=\"21-bfaa\"><br></p><p name=\"22-65db\">问题是这样的，一个左右滑动菜单，共有四个栏目(有几个栏目是从后台获取的)，分别获取了这几个栏目的宽度，然后设置其父容器的宽度为这几个栏目宽度的总和。</p><p name=\"0-8426\">逻辑上没有任何问题，然而栏目却只出现了三个，设想可能是宽度不够，</p><p name=\"1-6d3c\">将父容器宽度+1，第四个栏目果然出来了。</p><p name=\"2-7f50\"><br></p><p name=\"3-aa82\">明明计算好的，为什么会这样呢？</p><p name=\"4-57c6\">用getComputedStyle分别获取了四个栏目的宽度，发现居然有个66.3px，然而用Zepto获取其宽度，赫然是66px。。。</p><p name=\"7-b12b\">那么问题就找到了，父容器的宽度小了0.3px，当然装不下这四个栏目</p><p name=\"8-4fc9\"><br></p><p name=\"10-5d90\">为什么会小0.3px呢？难道Zepto做了什么处理吗？翻阅其源码后发现：</p><p name=\"1-6374\"><img src=\"/upload/artical/2c3dfc1815df152ba4cfde81495b8ab6.png\"></p><p name=\"1-5ecb\">尼玛啊，Zepto你要不要如此坑爹。。。</p><p name=\"2-81ba\"><br></p><p name=\"3-60fe\">故事到这里就结束了吗？然而才刚刚开始。。。</p><p name=\"4-bfcf\">尝试将上面提到的父元素的宽度设置为修正后的宽度，发现然而并没有卵用。。。</p><p name=\"5-84ed\">看下图：</p><p name=\"7-a009\"><img src=\"/upload/artical/4d3b9d36fe2929a4a226ccc8327131e3.png\"></p><p name=\"8-b012\">简直毁三观啊。。。估计这时候浏览器会说：臣妾做不到啊。。。</p><p name=\"9-5364\">这也难怪Zepto会把小数点给四舍五入掉，它的存在根本没有太大的意义啊</p><p name=\"10-c2eb\"><br></p><p name=\"11-b32f\">再看一张毁三观的图：</p><p name=\"12-af39\"><img src=\"/upload/artical/0b89535bbea56fa5bde2012020565f76.jpg\"></p><p name=\"13-9e63\" cur=\"true\">分三种方法查看该元素的宽度，居然得到三种不同的答案，浏览器你的节操呢😂</p><p name=\"15-6ab0\"><br></p><p name=\"14-b898\">但是从这里可以看出来，以后再获取宽度的时候，使用offsetWidth将是比较保险的选择，当存在小数点的时候，它一般要比实际显示的宽度要略大一些。</p><p name=\"17-6eb6\">另外经过测试还发现，当小数点的值是.25/.5/.75的时候，通过getComputedStyle取得的值是精确的，并且审查元素的时候，看到的宽度也是相同的。(但也存在特殊情况，如inline-block元素里面的文本内容超过该元素的宽度的时候，将会发生更不可思议的情况，通过style设置的宽度，用getComputedStyle获取的宽度是这个值，但直接审查元素或通过offsetWidth获取的宽度却不是该值)</p><p name=\"20-c052\"><br></p><p name=\"21-b852\">通过本文我们可以看到，将Zepto的宽/高度向上取整，应该可以解决上文提到的同事遇到的bug。</p><p name=\"22-8965\">Tips: $0指代当前正在审查的元素。</p>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t","brief":"\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t今天同事遇到一个奇葩的问题，我以前好像也遇到过，但没有深究，这告诉我们，遇到问题一定要刨根问底，否则将来某一天你一定还会与它不期而遇😂我们经","fav":[],"comment":0,"read":0},{"_id":"55ca158a7fb6a81220000002","url":"http://xwenliang.cn/p/55ca158a7fb6a81220000002","auther":"邢文亮","cata":"1","time":1439307120000,"title":"解决滚动条引起的页面抖动","content":"\n\t\t\t\t<div class=\"z-line-group\" name=\"1-6a99\">之前博客的切页效果有些瑕疵，</div><div class=\"z-line-group\" name=\"2-8a69\">比如页面滚动条位置保存的不太好，并且还原滚动条位置的时候页面会动一下，</div><div class=\"z-line-group\" name=\"3-5fec\">再比如切换页面，如果当前页面已经往下拉了一段距离，再切到下个页面的时候，切页动画会扭曲的很厉害，并且切到下个页面也会抖一下。想想也是有原因的，视角已经和旋转的中心点不在一个水平面上了。</div><div class=\"z-line-group\" name=\"4-ba0c\"><br></div><div class=\"z-line-group\" name=\"5-87b1\">设想过几种解决方案，最终决定不使用公共的滚动条，转而一个view使用一个独立的属于该view的滚动条。</div><div class=\"z-line-group\" name=\"6-815d\">这样只要这个view被保存下来了，滚动条位置自然就保存下来了。</div><div class=\"z-line-group\" name=\"7-5dc1\">并且旋转的盒子可以是一个固定高度的容器了，内容的滚动放到各个面里。</div><div class=\"z-line-group\" name=\"8-a42b\"><br></div><div class=\"z-line-group\" name=\"9-a233\">于是开始搞，整的差不多之后发现，</div><div class=\"z-line-group\" name=\"10-807f\">使用这种方案，页面切换的时候会带着滚动条一起切换，奇丑无比，难以接受。</div><div class=\"z-line-group\" name=\"11-52c0\">于是又设想，可不可以切换页面的过程中隐藏掉滚动条，切换完了之后再显示出来。</div><div class=\"z-line-group\" name=\"12-9c79\">这种方案实施完之后发现，在显示隐藏滚动条的过程中，页面会发生抖动..这显然更难以接受</div><div class=\"z-line-group\" name=\"13-7351\"><br></div><div class=\"z-line-group\" name=\"14-5f43\">又折腾了良久，设想可不可以获取到滚动条的宽度，隐藏滚动条的时候来个margin-right这个宽度。</div><div class=\"z-line-group\" name=\"15-9741\">折腾完之后，终于算是差强人意了。</div><div class=\"z-line-group\" name=\"16-8f8e\"><br></div><div class=\"z-line-group\" name=\"17-52dd\">获取滚动条宽度时用了一个小技巧：</div><div class=\"z-line-group ace-line\" name=\"18-729d\" data-editorid=\"ace-18-729d\">//默认已经引入了jQuery之类的玩意\nvar $html = $('html');\n//获取带滚动条的html的宽度 \n$html.css('overflow', 'scroll');\nvar scrollWidth = $html.width();\n//获取不带滚动条的html的宽度 \n$html.css('overflow', 'hidden');\nvar hiddenWidth = $html.width();\n//两者之差就是滚动条的宽度 \nvar scrollBarWidth = hiddenWidth - scrollWidth;</div>\n\t\t\t<div class=\"z-line-group\" name=\"19-6893\" cur=\"true\"><br></div>","brief":"\n\t\t\t\t之前博客的切页效果有些瑕疵，比如页面滚动条位置保存的不太好，并且还原滚动条位置的时候页面会动一下，再比如切换页面，如果当前页面已经往下拉了一段距离，再切到下个页面的时候，切页动画会扭曲的很厉","fav":[],"comment":0,"read":0},{"_id":"52fc802d31dbf3a112000004","url":"http://xwenliang.cn/p/52fc802d31dbf3a112000004","auther":"朱大哈","cata":"1","time":1392347460000,"title":"json对象按照某一名称的值对排序","content":"<p name=\"6551\"><b>第一种方法：</b></p><pre name=\"8e6e\"><ul><li>function arraySort(array, propertyName){</li><li>     for(var i=0,len=array.length;i&lt;len;i++){</li><li>         for(var j=1;j&lt;len-i;j++){</li><li>             if(array[j][propertyName] &lt; array[j-1][propertyName]){</li><li>                 array[j] = [array[j-1], array[j-1]=array[j]][0];</li><li>             }</li><li>         }</li><li>     }</li><li>     return array;</li><li>};</li><li>//例子 </li><li>var list = [</li><li>    <span style=\"line-height: 1.5;\">{'name': 'xiaoming', 'score': 10},</span></li><li>    <span style=\"line-height: 1.5;\">{'name': 'xiaowang', 'score': 5},</span></li><li>    {'name': 'xiaozhang', 'score': 9},&nbsp;</li><li>    <span style=\"line-height: 1.5;\">{'name': 'xiaohuang', 'score': 5}</span></li><li>];</li><li>console.log(arraySort(list, 'score')); </li></ul></pre><p name=\"6551\"><br></p><p name=\"6551\"><b>第二种方法：</b></p><p name=\"ac08\">利用数组排序函数sort</p><pre name=\"9544\"><ul><li><span style=\"line-height: 1.5;\">function arraySort(array, propertyName){</span></li><li>     return array.sort(function(a, b){</li><li>         return a[propertyName] - b[propertyName];</li><li>     });</li><li>};</li><li>//例子</li><li>var list = [</li><li>     {'name': 'xiaoming', 'score': 10},</li><li>     {'name': 'xiaowang', 'score': 5},</li><li>     {'name': 'xiaozhang', 'score': 9},</li><li>     {'name': 'xiaohuang', 'score': 5}</li><li>];</li><li>console.log(arraySort(list, 'score')); </li></ul></pre>","brief":"第一种方法：function arraySort(array, propertyName){     for(var i=0,len=array.length;i&lt;len;i++){      ","fav":[],"comment":0,"read":0},{"_id":"5296ba24bb1eabe047000001","url":"http://xwenliang.cn/p/5296ba24bb1eabe047000001","auther":"邢文亮","cata":"4","time":1385609760000,"title":"浅析Session和Cookie","content":"<p name=\"b342\">这两天在折腾这个博客的时候，遇到一些关于session和cookie的问题，回顾总结为此文。</p><p name=\"6fc0\"><br></p><p name=\"6e22\">博客刚落成的时候，我用的connect-mongo来存储session，那时候还不知道session到底什么什么东西，只知道它可以保持会话状态。在做登陆的时候，就有点发晕了，我只验证了用户名和密码，通过的话，就将user重新写入req.session。后来我打开mongo，运行db.sessions.find()之后傻眼了，一大片的session，里面存储的user信息大多都是重复的。也就是说每登陆一次，都会产生一个session存入mongo。这还了得，肯定会影响mongo的性能啊。于是乎转用了session的MemoryStore来存储session。但是想了想，这样治标不治本啊，不管存到哪里，不是都要产生很多的垃圾吗？</p><p name=\"8d0e\"><br></p><p name=\"5d56\">后来又发现了一个问题，浏览器打开的情况下，再打开其他标签，登陆状态是有的，可是浏览器一旦全部关闭再打开，登陆状态就没了。这是怎么回事？难道是因为存的MemoryStore吗？我又重新将session存入mongodb，发现同样的问题仍然存在。这时候我发现一个问题，浏览器的cookie中有一个我设定的sid， Value是一串加密过的字符，过期时间是session。只要不关闭浏览器，这个名为sid的Value一直是个固定值。关闭浏览器再打开，这个sid就变了。sid变了，登陆状态就没了。</p><p name=\"522b\">我才发觉，这个过期时间为session的意思，就是生命周期仅为浏览器不关闭的这段时间。</p><p name=\"5800\">可是我在使用MemoryStore的时候，明明设置了session的过期时间为30天后啊：</p><p name=\"50df\">var sessionStore = new express.session.MemoryStore({reapInterval: 1000*60*60*24*30});</p><p name=\"ba70\">为啥在关闭浏览器再打开的时候，sid就变了呢？那这个'收割间隔'又是什么意思呢？不是session的生效时间吗？</p><p name=\"ac23\"><br></p><p name=\"91d8\">再后来我开始折腾这个reapInterval，把它设为5秒过时，当浏览器关闭1分钟后再打开，查询MemoryStore，发现这个session依然存在里面。这里我就不明白了，这个reapInterval到底是干啥用的呢？难道是session的生效保持时间？但是我登陆后，只要浏览器不关闭，放在那放一天，这个sid也是不变的啊...难道是我使用这个库的方法不对吗？</p><p name=\"9fee\"><br></p><p name=\"62e0\"><a href=\"http://stackoverflow.com/questions/7549770/express-session-store-and-reapinterval\" target=\"_blank\">相关问题</a></p><p name=\"ad7d\"><a href=\"https://github.com/senchalabs/connect/issues/328\" target=\"_blank\">Seperate Cookie and Session Expiration</a></p><p name=\"c1e2\"><br></p><p name=\"7cfb\">最后，我自己重新做了自动登陆功能，当用户登陆后，我会手动存一个名为ssid的cookie，要存为httpOnly，防止xss攻击获取用户的cookie，里面存储了登陆会话的sessionID，下次用户再进来的时候，我会拿这个sessionID去MemoryStore中查询，是否有记录登陆的session，有的话就将会话还原，恢复用户登陆状态。</p><p name=\"4ece\"><br></p><p name=\"b25e\">我觉得session是基于cookie的说法，原因在于http是无状态协议，所以尽管在后台存储了session，但依然需要客户端的一个唯一的标识来确定这个session的归属，所以只能将这个标识存入cookie（现在浏览器选择很多，可以存本地存储等，但是客户端可以读取，为了安全，还是存为httpOnly的cookie吧）。当用户再次进来的时候，就可以用这个标识来判断后台中是否已存储与之对应的session。那么这个session的过期时间可以通过设定客户端的cookie的过期时间来控制。</p>","brief":"这两天在折腾这个博客的时候，遇到一些关于session和cookie的问题，回顾总结为此文。博客刚落成的时候，我用的connect-mongo来存储session，那时候还不知道session到底什么","fav":[],"comment":0,"read":0},{"_id":"56542e264b140eed5000000b","url":"http://xwenliang.cn/p/56542e264b140eed5000000b","auther":"邢文亮","cata":"1","time":1449496680000,"title":"iOS平台React Native调用native functions","content":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<div class=\"z-line-group\" name=\"0-fd1e\">随着react-native开发的继续深入，我们终于来到了react-native和native相互调用这道坎，</div><div class=\"z-line-group\" name=\"8-897a\">本文将介绍react-native调用native functions，下一篇介绍native调用react-native functions(iOS)</div><div class=\"z-line-group\" name=\"9-590b\"><br></div><div class=\"z-line-group\" name=\"10-a08f\"><a href=\"https://facebook.github.io/react-native/docs/communication-ios.html#calling-native-functions-from-react-native-native-modules\" target=\"_blank\">官方文档</a>其实写的比较清楚了，感觉这里大部分只是手动把这一过程实践了而已</div><div class=\"z-line-group\" name=\"12-b28f\">先想好一个模块的名字，我们以CallNativeTest为例：</div><div class=\"z-line-group\" name=\"52-d11e\"><br></div><div class=\"z-line-group\" name=\"38-27fa\">分别创建CallNativeTest.h和CallNativeTest.m两个文件：</div><div class=\"z-line-group ace-line\" name=\"18-11c8\" data-editorid=\"ace-12-ff16\" data-language=\"objectivec\">//CallNativeTest.h\n\n#import \"RCTBridgeModule.h\"\n\n@interface CallNativeTest: NSObject &lt;RCTBridgeModule&gt;\n@end\n</div><div class=\"z-line-group\" name=\"11-12bc\"><br></div><div class=\"z-line-group ace-line\" name=\"58-eded\" data-editorid=\"ace-20-d792\" data-language=\"objectivec\">//CallNativeTest.m\n\n#import \"CallNativeTest.h\"\n\n@implementation CallNativeTest\n//将模块输出至react-native模块，js中可通过NativeModules.CallNativeTest访问到\nRCT_EXPORT_MODULE();\n//往该模块添加addEvent方法，js中可通过NativeModules.CallNativeTest.addEvent访问到\nRCT_EXPORT_METHOD(addEvent:(NSString *)name location:(NSString *)location){\n    NSLog(@\"I have got the message %@ at %@\", name, location);\n}\n//添加一个接收函数类型参数的函数\nRCT_EXPORT_METHOD(findEvents:(RCTResponseSenderBlock)callback){\n    NSString *events = @\"abcd\";\n    callback(@[[NSNull null], events]);\n}\n\n@end\n</div>\n\t\t\t\n\t\t\t<div class=\"z-line-group\" name=\"21-470d\"><br></div><div class=\"z-line-group\" name=\"39-4b06\">在js中调用：</div><div class=\"z-line-group ace-line\" name=\"64-b03e\" data-editorid=\"ace-44-4a12\" data-language=\"javascript\">import {\n    NativeModules\n} from 'react-native';\n\nNativeModules.CallNativeTest.addEvent('hello native', 'someposition');\n//将会在xcode的控制台看到输出：I have got the message hello native at someposition\nNativeModules.CallNativeTest.findEvents((error, result) =&gt; {\n    if(error){\n        console.log(error);\n    }\n    else{\n        console.log(result);\n    }\n});\n//将会在浏览器控制台看到输出：abcd\n</div><div class=\"z-line-group\" name=\"42-9ebc\"><br></div><div class=\"z-line-group\" name=\"50-ab0c\">这样就完成了iOS平台react-native调用native提供的方法了</div><div class=\"z-line-group\" name=\"65-cbdd\">其实后面定义的接收[函数类型参数]的函数已经可以实现在oc中调用js定义的方法了</div><div class=\"z-line-group\" name=\"67-51e0\" cur=\"true\">但还是js主动调用oc才能实现，我们还需要oc主动调用js，也就是下一篇要讲的内容</div>\n\t\t\t\n\t\t\t","brief":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t随着react-native开发的继续深入，我们终于来到了react-native和native相互调用这道坎，本文将介绍react-native调用nativ","fav":[],"comment":0,"read":0},{"_id":"52cbc87014e98b7623000011","url":"http://xwenliang.cn/p/52cbc87014e98b7623000011","auther":"邢文亮","cata":"1","time":1389932460000,"title":"chrome控制台的console.log输出，有时候很坑爹","content":"<p name=\"5317\">今天同事遇到一个问题，简单描述如下：</p><p name=\"7de0\">在用console.log打印某个对象(a)和这个对象的属性(a)的时候(同时打印)，查看对象a时发现确实有a这个属性，但当时打印的却是undefined，这是为啥呢？</p><p name=\"a209\"><br></p><p name=\"5130\">先看这段代码：</p><p name=\"6054\">var a = {b: 2, c: 3, d: 4, e: 5, f: 6, g: 7};</p><p name=\"640f\">console.log(a);</p><p name=\"be4e\">a.a = 1;</p><p name=\"a43a\"><br></p><p name=\"9c83\">大家猜猜，在控制台的输出中查看a这个对象，它会有x属性吗？</p><p name=\"b5d3\">答案是，有时候有，有时候没有...</p><p name=\"8ff6\"><br></p><p name=\"af64\">先来说说console.log的几种行为：</p><p name=\"7e44\">1.当打开带有上面代码的页面时，如果未提前开启控制台，代码运行完毕后又开启了控制台，那么只能看到输出一个object和它前面的小三角。这时候点开这个小三角，会发现a这个对象上确实有a这个属性。</p><p name=\"9dbc\"><br></p><p name=\"7669\"><img src=\"/./uploads/artical/52cbc87014e98b7623000011-1.png\"></p><p name=\"6fb2\"><br></p><p name=\"91e0\"><img src=\"/./uploads/artical/52cbc87014e98b7623000011-2.png\"></p><p name=\"7692\"><br></p><p name=\"8e1e\">2.当打开带有上面代码的页面时，开启了控制台，或者开启控制台再刷新几下页面，会看到一个输出一个object和它的5个属性还有它前面的小三角以及后面的省略号，这时候直观的看，并没有a这个属性，但是点开小三角会发现它也有a这个属性。</p><p name=\"832e\"><br></p><p name=\"58ee\"><img src=\"/./uploads/artical/52cbc87014e98b7623000011-3.png\"></p><p name=\"8bbe\"><br></p><p name=\"50f1\"><img src=\"/./uploads/artical/52cbc87014e98b7623000011-4.png\"></p><p name=\"5a77\"><br></p><p name=\"ae65\">3.在2的情况下，减少a的属性的个数，使其小于5个，以3个为例。这时候会输出一个object和它的全部3个属性，并且它前面不会有小三角，这时候我们发现，没有a这个属性了...</p><p name=\"6501\"><br></p><p name=\"6a98\"><img src=\"/./uploads/artical/52cbc87014e98b7623000011-5.png\"></p><p name=\"a86d\"><br></p><p name=\"a171\">通过上面的例子，我们发现当我们点对象前面的小三角的时候，浏览器会去这个console.log的上下文中重新查询这个object，把它所有的属性都给罗列出来..而并不是只打印了console.log当时的状态...</p><p name=\"b246\"><br></p><p name=\"697b\">所以我们在用console.log打印对象的时候，尤其是其属性比较多会产生小三角的时候，点击这个小三角所罗列出来的a，并不是当时打印的时候的状态。</p><p name=\"54fe\"><b>换句话说，点击小三角所看到的属性，并不能作为当时这个对象含有这个属性的凭证...应该打印a[属性]才能确定...</b></p><p name=\"724e\">其实人家大chrome也给出提示啦，看看点击这个小三角的时候，右方会出现一个小叹号，鼠标放上给出了这样的提示：</p><p name=\"931f\"><br></p><p name=\"8576\"><img src=\"/./uploads/artical/52cbc87014e98b7623000011-6.png\"></p><p name=\"8685\"><br></p><p name=\"afc9\">大致意思是：下面的这些属性，是在这个对象被扩展的时候获取到的。数组也有同样的问题。(不明白first是啥意思，我试过，扩展后再改变a的值，打印的a还是改变后的值，我也试过扩展后再删除a这个属性，打印结果也就没有a这个属性了)</p><p name=\"a84b\"><br></p><p name=\"7bc5\">上面提到的问题，还引发了另外一个问题。细心的同学会发现，在上面的2中，点击小三角查看a的属性的时候，发现a这个后添加的属性，排在了所有属性的前面，这是否说明，js中对象的属性是无序的呢？且看下一篇。</p><p name=\"8465\"><br></p>","brief":"今天同事遇到一个问题，简单描述如下：在用console.log打印某个对象(a)和这个对象的属性(a)的时候(同时打印)，查看对象a时发现确实有a这个属性，但当时打印的却是undefined，这是为啥","fav":[],"comment":0,"read":0},{"_id":"54b635ae916e14f84a000004","url":"http://xwenliang.cn/p/54b635ae916e14f84a000004","auther":"sundonghan","cata":"3","time":1421227380000,"title":"ubuntu搭建lamp超精简教程，一眼就懂","content":"<p name=\"23-7a09\">关于Ubuntu下的LAMP配置，已经成为了某一些人的心病，加上phpmyadmin的配置，更是使他们不知所以。现在我就把我在LINUX 下的关于配置LAMP 及phpmyadmin 的一些经验，分享一下。希望对你有些帮助。</p><p name=\"24-a0a6\">我们首先要安装LAMP 就是Apache,PHP5,Mysql5.</p><p name=\"25-bc57\">打开终端，输入命令行。</p><p name=\"26-62ea\" cur=\"true\">1.安装 Apache</p><p name=\"27-a0b7\">1.打开终端&nbsp;</p><p name=\"28-8678\">2. 输入以下命令</p><p name=\"29-5425\">sudo apt-get install apache2</p><p name=\"30-87bc\">3. 如果没有sudo 权限，需要输入密码。</p><p name=\"31-a25c\">2.测试 Apache</p><p name=\"32-acc1\">为了确定安装是否成功，我们来测试一下。</p><p name=\"33-6944\">1. 打开浏览器，输入以下网址</p><p name=\"34-53fd\">http://localhost/</p><p name=\"35-6165\">如果成功，你会看到以下内容 \"It works!\" , 祝贺你，第一步，你算是跨出去了。</p><p name=\"36-8396\">3.安装 PHP5</p><p name=\"37-814b\">Step 1. 打开终端 (ctrl+alt+T).</p><p name=\"38-aa59\">Step 2. 输入以下命令行:</p><p name=\"39-b270\">sudo apt-get install php5 libapache2-mod-php5</p><p name=\"40-56cc\">Step 3.为了使PHP和Apache能一起工作，我们需要配置一下PHP并且测试一下。</p><p name=\"41-58e7\">sudo /etc/init.d/apache2 restart</p><p name=\"42-9549\">4.测试 PHP</p><p name=\"43-6750\">Step 1.我们先建一个PHP 测试文件(我们叫它phptest.php)，输入以下内容 ：</p><p name=\"44-8ae4\">sudo gedit /var/www/testphp.php</p><p name=\"45-61bc\">Step 2.这时我们会打开一个文本编辑器，在里面输入以下内容.</p><p name=\"46-b0d2\">&lt;?php phpinfo(); ?&gt;</p><p name=\"47-9068\">Step 3.保存退出。</p><p name=\"48-ab03\">Step 4. 现在打开浏览器，查看一下我们刚刚建立的内容。输入以下网址。</p><p name=\"49-54c8\">http://localhost/testphp.php</p><p name=\"50-5c07\">&nbsp;&nbsp; 如果显示出PHP的信息内容页面，说明你又成功了一小步。</p><p name=\"51-c1bc\"><br></p><p name=\"52-6893\"><br></p><p name=\"53-64fd\">5.安装 MySQL下面我们来安装Mysql5 （这是最后一步，也是麻烦比较多的一步，安装的时候注意。）Step 1. 再一次地打开终端，输入以下内容。sudo apt-get install mysql-serverStep 2.在安装的时候，如果要求你输入Mysql 密码，则输入密码。如果没有要求，则执行下一步。在终端中输入下面命令。mysql -u root后来，你还要输入以下内容；mysql&gt; SET PASSWORD FOR 'root'@'localhost' = PASSWORD('yourpassword');以上的'root'是你的Mysql 用户名，'yourpassword'是你的新密码。Step 3.下面我们将去处理更为棘手的phpmyadmin这里经常出现的问题就是明明安装了phpmyadmin但却在输入http://localhost/phpmyadmin的时候，没有出现管理界面，反而出现没有找到的页面。不急，我们先安装再了phpmyadmin然后再去解决。 输入以下命令:sudo apt-get install libapache2-mod-auth-mysql php5-mysql phpmyadmin这里的phpmyadmin是与我们之前装的php5 是相配合的，如果你装的PHP 和phpmyadmin不相配，它们不会工作。Step 4.现在我们去解决phpmyadmin“不工作”的问题，当我们安装了phpmyadmin 后，不要以为一切就绪了。其实我们还有一项工作要去完成，就是去配置phpmyadmin和apache2。同样的终端，输入：cp /etc/phpmyadmin/apache.conf /etc/apache2/sites-available/phpmyadmin这样我们就把phpmyadmin中的apache.conf（apache配置文件）复制到apache2/sites-available下的phpmyadmin文件下。Step 5.接着输入，进入sites-enabled文件夹下：cd /etc/apache2/sites-enabled/ &nbsp;&nbsp;Step 6.进入之后，我们要建立一个通往配置文件的链接以便能利用它。输入：sudo ln -s ../sites-available/phpmyadmin &nbsp;&nbsp;Step 7.重启apache2sudo /etc/init.d/apache2 restart&nbsp;好了。打开http://localhost/phpmyadmin 去体验一下吧。到此为止，我们的LAMP 配置就完全结束了，希望对你有所帮助。</p>","brief":"关于Ubuntu下的LAMP配置，已经成为了某一些人的心病，加上phpmyadmin的配置，更是使他们不知所以。现在我就把我在LINUX 下的关于配置LAMP 及phpmyadmin 的一些经验，分享","fav":[],"comment":0,"read":0},{"_id":"5288c18be8ce32583f000002","url":"http://xwenliang.cn/p/5288c18be8ce32583f000002","auther":"邢文亮","cata":"1","time":1384694100000,"title":"Javascript两种创建字符串方式的区别","content":"<p name=\"9ae4\">我们在创建字符串的时候，最常用的是直接定义的方法，如 var a = 'aaa'</p><p name=\"56a8\">那么不常用的 var b = new String('aaa') 和前者有什么区别呢？&nbsp;</p><p name=\"5308\"><br></p><p name=\"8b2d\">前者是基础数据类型string，后者是一个字符串对象object类型。所以b.b = 'bb'是可以的，而a.b='bb'是不可以的。</p><p name=\"5484\">但是考虑到基础数据类型string也有一些自带的拓展方法或属性，如a.length,a.indexOf(),a.charAt(),a.split(),a.substring()等，那为什么却不能扩展方法或属性呢？&nbsp;</p><p name=\"5fa9\">原来js存在自动装箱行为，当使用上述方法时，js会自动把基础数据类型装箱为与之对应的引用类型，操作结束后再把引用类型还原为基础类型。</p><p name=\"8c80\"><br></p><p name=\"89f0\">如果想扩展a的属性或方法，可以先对其进行装箱：a = new String(a);然后可以实现a.b = 'bb'，当然也可以通过原型的方法：String.prototype.b = 'bb'，但这样所有的字符串都拥有了b属性，污染了原型，所以不建议使用。&nbsp;</p><p name=\"c0d4\"><br></p><p name=\"af07\">如果想获得一个字符串对象的基础数据类型string，可以用valueOf()，比如上面例子中的b，执行b = b.valueOf()之后它的数据类型便被转化为string类型了，可以把这一步看作是拆箱操作。</p>","brief":"我们在创建字符串的时候，最常用的是直接定义的方法，如 var a = 'aaa'那么不常用的 var b = new String('aaa') 和前者有什么区别呢？&nbsp;前者是基础数据类型st","fav":[],"comment":0,"read":0},{"_id":"5406909e058363192b00022d","url":"http://xwenliang.cn/p/5406909e058363192b00022d","auther":"邢文亮","cata":"8","time":1414141260000,"title":"transform:translate3d开启硬件加速？请慎用！","content":"<p name=\"a2dd\">网上关于使用 transform:translate3d 来开启硬件加速，使GPU提升性能的帖子已经泛滥了，</p><p name=\"6282\">但是我在实际项目中却被这个所谓的硬件加速坑出了翔。</p><p name=\"6d5f\"><br></p><p name=\"9cfb\">实际场景如下：</p><p name=\"65d9\">项目中的交互效果非常复杂，节点也异常的复杂，并且给大多数节点(不管有没有动画)加上了transform:translate3d。</p><p name=\"8736\">后来却发现，所有动画都变的卡顿不堪。去掉该属性之后，动画反而更顺畅，说好的开启硬件加速，提高性能呢？</p><p name=\"9728\"><br></p><p name=\"620a\"></p><p name=\"903c\">猜想原因可能如下：</p><p name=\"9fb1\">给过多的节点开启了硬件加速，会导致GPU负载严重，从而使性能急剧下降，导致动画卡顿，甚至页面短时间内失去响应。</p>","brief":"网上关于使用 transform:translate3d 来开启硬件加速，使GPU提升性能的帖子已经泛滥了，但是我在实际项目中却被这个所谓的硬件加速坑出了翔。实际场景如下：项目中的交互效果非常复杂，节","fav":[],"comment":0,"read":0},{"_id":"5332ae6a71bb3e741ceff2b8","url":"http://xwenliang.cn/p/5332ae6a71bb3e741ceff2b8","auther":"邢文亮","cata":"8","time":1397119860000,"title":"ios横屏字体变大","content":"<p name=\"854d\">解决ios横屏模式下字体变大：</p><p name=\"51d1\">很简单，给body或html添加如下属性：</p><p name=\"a4b9\">-webkit-text-size-adjust: none;<br></p>","brief":"解决ios横屏模式下字体变大：很简单，给body或html添加如下属性：-webkit-text-size-adjust: none;...","fav":[],"comment":0,"read":0},{"_id":"562a0c677bda81f63f000002","url":"http://xwenliang.cn/p/562a0c677bda81f63f000002","auther":"邢文亮","cata":"6","time":1445597460000,"title":"The bundle identifier contains disallowed characters","content":"\n\t\t\t\t\n\t\t\t\t<div class=\"z-line-group\" name=\"0-b929\">今天往Apple服务器发包又碰到了钉子：</div><div class=\"z-line-group\" name=\"0-b929\"><img src=\"/upload/artical/f70fb047c885e0682c667419ab6e01d1.png\"></div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">思前想后，自己只是改了两行逻辑代码，根本没有修改任何的配置，怎么会出现这个错误呢？</div><div class=\"z-line-group\" name=\"0-b929\">再说苹果你也是够了，告诉我包里有非法字符，却不告诉我在哪里，这是让我去猜吗？</div><div class=\"z-line-group\" name=\"0-b929\">没办法，只能猜了。</div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">搜索引擎转一圈，发现很多人都是今天才提的这个问题，说明苹果后台又更新策略了。</div><div class=\"z-line-group\" name=\"0-b929\">大致解决方法是：删掉一些第三方资源包中的.plist文件</div><div class=\"z-line-group\" name=\"0-b929\">为什么删除就好了呢，我们打开其中一个来看看：</div><div class=\"z-line-group\" name=\"0-b929\"><img src=\"/upload/artical/298a7256334226ad9b0ab6ac89accef4.jpg\"></div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">果然是乱码一堆啊，难怪告诉我有非法字符呢。</div><div class=\"z-line-group\" name=\"0-b929\">不过也可能是我的编辑器编码不支持，用xcode打开就是正常的。</div><div class=\"z-line-group\" name=\"0-b929\">但同样是.plist文件，用我的编辑器打开项目的.plist文件就是正常的类似于xml的一个文件。</div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">既然第三方资源包里的.plist文件说删就删掉，并且没有影响，</div><div class=\"z-line-group\" name=\"0-b929\">那为啥作者还要在包里加这个只会起负面作用的文件呢？<a href=\"https://zh.wikipedia.org/zh-cn/Plist\" target=\"_blank\">先看看.plist文件到底是啥</a></div><div class=\"z-line-group\" name=\"0-b929\">原来就是个存储数据的文件，大家通常会用来存储一些配置。既然是个存储配置的文件，删掉这个文件后，当这个第三方资源包里的代码要去读取配置的时候，找不到这个文件不会出什么乱子吗？</div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\" cur=\"true\">由于目前对iOS掌握的知识比较少，大概等以后自己开发资源包给别人用的时候，就会知道这个plist文件到底是个怎么样的角色了吧。</div>\n\t\t\t\n\t\t\t","brief":"\n\t\t\t\t\n\t\t\t\t今天往Apple服务器发包又碰到了钉子：思前想后，自己只是改了两行逻辑代码，根本没有修改任何的配置，怎么会出现这个错误呢？再说苹果你也是够了，告诉我包里有非法字符，却不告诉我在哪里","fav":[],"comment":0,"read":0},{"_id":"563b34af4b140eed50000003","url":"http://xwenliang.cn/p/563b34af4b140eed50000003","auther":"邢文亮","cata":"1","time":1447152180000,"title":"react-native-tab-navigator引发的血案","content":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<div class=\"z-line-group\" name=\"0-e829\">React Native for Android 自从9月15日发布至今已经近两个月了，</div><div class=\"z-line-group\" name=\"2-f767\">喜欢折腾的小伙伴们早已做出了不少的例子，当然我们也跃跃欲试了，但过程中踩到一些坑是免不了的。</div><div class=\"z-line-group\" name=\"3-8d97\"><br></div><div class=\"z-line-group\" name=\"4-6829\">其中最大的问题，应该是一些组件在iOS平台已经很完善，但Android平台却依然处于todo状态，</div><div class=\"z-line-group\" name=\"5-5494\">典型的当属TabBarIOS这个组件，也许这种底部固定tab的UI是iOS风格UI的缘故，名字都起成了iOS结尾...</div><div class=\"z-line-group\" name=\"6-3f76\">进入这个组件的目录，通常位于：项目/node_modules/react-native/Libraries/Components/TabBarIOS</div><div class=\"z-line-group\" name=\"9-cc54\">我们会发现四个文件：</div><div class=\"z-line-group\" name=\"7-dd98\">TabBarIOS.android.js,</div><div class=\"z-line-group\" name=\"10-95ec\">TabBarIOS.ios.js,</div><div class=\"z-line-group\" name=\"12-8e05\">TabBarItemIOS.android.js,</div><div class=\"z-line-group\" name=\"13-a56f\">TabBarItemIOS.ios.js</div><div class=\"z-line-group\" name=\"14-8e62\"><br></div><div class=\"z-line-group\" name=\"15-b79e\">以.android.js和.ios.js结尾的文件，分别对应了Android和iOS平台的代码，</div><div class=\"z-line-group\" name=\"16-c4b2\">打开安卓平台的代码，发现里面寥寥的几行，根本无法使用，也就是说，这个功能还处于todo状态...</div><div class=\"z-line-group\" name=\"20-daae\"><br></div><div class=\"z-line-group\" name=\"18-485c\">去官方issue找到这么一条问题：<a href=\"https://github.com/facebook/react-native/issues/3122\" target=\"_blank\">#issue3122</a></div><div class=\"z-line-group\" name=\"19-57ff\">官方开发者astreet的回答发人深醒，android平台和iOS平台本就是风格有很大不同的两个平台，</div><div class=\"z-line-group\" name=\"21-ac31\">没有必要为了统一UI而去做一些违反平台设计原则的东西，但同时他也相信，会有这种组件出现的:)</div><div class=\"z-line-group\" name=\"22-82d9\"><br></div><div class=\"z-line-group\" name=\"24-1f2d\">但我们的设计师确实是把android和iOS平台的风格设计成基本一样的了，</div><div class=\"z-line-group\" name=\"25-3b80\">还好官方开发者ide祭出了他为android平台写的一个第三方组件：<a href=\"https://github.com/exponentjs/react-native-tab-navigator\" target=\"_blank\">react-native-tab-navigator</a></div><div class=\"z-line-group\" name=\"26-2ccb\"><br></div><div class=\"z-line-group\" name=\"27-12c9\">起初并不知道如何安装这个第三方组件，先直接装到项目根目录下的node_modules目录下试试吧</div><div class=\"z-line-group\" name=\"28-2d13\">在项目目录执行npm install react-native-tab-navigator --save</div><div class=\"z-line-group\" name=\"29-33b9\">然后去官方github上找到示例代码，发现组件确实能被正确的引用到，但是报了很多的语法错误</div><div class=\"z-line-group\" name=\"31-ba69\">打开这个组件的代码，发现用了两个es7的特性，分别是<a href=\"https://github.com/jeffmo/es-class-static-properties-and-fields\" target=\"_blank\">classproperties</a>和<a href=\"https://github.com/wycats/javascript-decorators\" target=\"_blank\">decorators</a></div><div class=\"z-line-group\" name=\"33-6f60\">然后去官方issue转了一圈，发现确实有人遇到了类似问题，</div><div class=\"z-line-group\" name=\"37-bfd1\">解决方法是在项目根目录中新建一个.babelrc文件：</div><div class=\"z-line-group ace-line\" name=\"36-311d\" data-editorid=\"ace-36-311d\" data-language=\"javascript\">{\n\t\"retainLines\": true,\n\t\"compact\": true,\n\t\"comments\": false,\n\t\"whitelist\": [\n\t\t\"es6.modules\",\n\t\t\"es7.classProperties\",\n\t\t\"es7.decorators\",\n\t\t\"regenerator\",\n\t\t\"flow\",\n\t\t\"react\",\n\t\t\"react.displayName\"\n\t],\n\t\"sourceMaps\": false\n}</div><div class=\"z-line-group\" name=\"32-67b2\"><br></div><div class=\"z-line-group\" name=\"38-a75a\">这样react-native在编译打包的时候会对这些es7的语法做兼容处理。</div><div class=\"z-line-group\" name=\"39-80a3\">然而增加了这个文件后，依然没有解决报错，这时候就有种束手无策的感觉了。</div><div class=\"z-line-group\" name=\"40-3db2\">根据以往的经验，会不会是代码有更新呢。</div><div class=\"z-line-group\" name=\"41-1646\">赶紧查看下，当前react-native的版本是0.12.0，而官方的stable版本已经发布到了0.14.2，</div><div class=\"z-line-group\" name=\"43-c438\">果断更新，然后是漫长的等待，更新就绪后再运行，发现还有报错：</div><div class=\"z-line-group\" name=\"44-7b63\"><img src=\"/upload/artical/3df1d3c211289d70456c79ebd70250ad.png\"></div><div class=\"z-line-group\" name=\"45-b9ba\"><br></div><div class=\"z-line-group\" name=\"46-ed78\">这个报错总算让我看到了希望，因为这表示先前的语法错误都已经解决，这报的是执行阶段的错误啊！</div><div class=\"z-line-group\" name=\"47-6be3\">看了下代码，发现可能是由于StatusBarIOS这个组件没有引入导致的，先不管它，果断删掉，再运行，终于跑起来了</div><div class=\"z-line-group\" name=\"49-e318\"><img src=\"/upload/artical/4c707d18db43a3a5d7adb892b5f17edd.png\"></div><div class=\"z-line-group\" name=\"50-a8f0\"><br></div><div class=\"z-line-group\" name=\"51-a864\">示例代码：</div><div class=\"z-line-group ace-line\" name=\"57-8013\" data-editorid=\"ace-53-746c\" data-language=\"javascript\" cur=\"true\">'use strict';\n\nlet React = require('react-native');\nlet {\n    AppRegistry,\n    Image,\n    StatusBarIOS,\n    StyleSheet,\n    Text,\n    TouchableOpacity,\n    View,\n} = React;\nlet TabNavigator = require('react-native-tab-navigator');\n\nclass HiddenTabBarDemo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            selectedTab: 'home',\n            showTabBar: true,\n        };\n    }\n\n    render() {\n        let tabBarStyle = {};\n        let sceneStyle = {};\n        if (!this.state.showTabBar) {\n            tabBarStyle.height = 0;\n            tabBarStyle.overflow = 'hidden';\n            sceneStyle.paddingBottom = 0;\n        }\n\n        return (\n        &lt;TabNavigator tabBarStyle={tabBarStyle} sceneStyle={sceneStyle}&gt;\n            &lt;TabNavigator.Item\n                selected={this.state.selectedTab === 'home'}\n                title=\"Home\"\n                onPress={() =&gt; this.setState({ selectedTab: 'home' })}&gt;\n                &lt;View style={styles.scene}&gt;\n                    &lt;TouchableOpacity onPress={this._toggleTabBarVisibility.bind(this)}&gt;\n                        &lt;Text style={styles.button}&gt;\n                            {this.state.showTabBar ? 'Hide Tab Bar' : 'Show Tab Bar'}\n                        &lt;/Text&gt;\n                    &lt;/TouchableOpacity&gt;\n                &lt;/View&gt;\n            &lt;/TabNavigator.Item&gt;\n            &lt;TabNavigator.Item\n                selected={this.state.selectedTab === 'profile'}\n                title=\"Profile\"\n                onPress={() =&gt; this.setState({ selectedTab: 'profile' })}&gt;\n                &lt;View style={styles.scene}&gt;\n                    &lt;Text style={{ color: '#fff' }}&gt;Profile&lt;/Text&gt;\n                &lt;/View&gt;\n            &lt;/TabNavigator.Item&gt;\n        &lt;/TabNavigator&gt;\n        );\n    }\n\n    _toggleTabBarVisibility() {\n        this.setState(state =&gt; ({\n            showTabBar: !state.showTabBar,\n        }));\n    }\n}\n\nlet styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n    },\n    scene: {\n        backgroundColor: '#1e2127',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    button: {\n        color: '#007aff',\n        fontWeight: '600',\n    }\n});\n\nStatusBarIOS.setStyle('light-content');\n\nAppRegistry.registerComponent('main', () =&gt; HiddenTabBarDemo);</div>","brief":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tReact Native for Android 自从9月15日发布至今已经近两个月了，喜欢折腾的小伙伴们早已做出了不少的例子，当然我们也跃跃欲试了，但过程中踩到一些坑是","fav":[],"comment":0,"read":0},{"_id":"53c4fef992e6d4e93e000001","url":"http://xwenliang.cn/p/53c4fef992e6d4e93e000001","auther":"邢文亮","cata":"1","time":1422934920000,"title":"xss初级防范","content":"<div class=\"z-line-group\" name=\"1-8102\">最近发现，自己博客上所有用户可以输入的地方，都可以被xss...</div><div class=\"z-line-group\" name=\"2-d3ba\">真是不忍直视啊，多亏各位手下留情了(其实是没几个人看)</div><div class=\"z-line-group\" name=\"3-4ca0\"><br></div><div class=\"z-line-group\" name=\"4-c89a\">于是抽空把这个洞堵上了，堵之前先去看了看别人博客是怎么做的，发现大多差强人意，输入&lt;script&gt;后，要么直接啥都不显示，要么只显示script，那如果用户就是想输入&lt;script&gt;的话，就只能使用html编码了(&amp;lt;script&amp;gt;)...</div><div class=\"z-line-group\" name=\"5-afb0\"><br></div><div class=\"z-line-group\" name=\"6-ec6d\">这简直不能容忍啊，本来该你去做的事情，为什么要让用户承担...</div><div class=\"z-line-group\" name=\"7-f731\">并且要做到简单防范的话，只需要将&lt;&gt;在前后端都转译一下，不就万事大吉了么，没有了他们俩，几乎不会有其他什么东西能被解析为dom结构了吧，并且&amp;lt;&amp;gt;被html解析出来之后还是&lt;&gt;，丝毫不会影响用户的输入。</div><div class=\"z-line-group\" name=\"8-e1ba\"><a href=\"http://114.xixik.com/character/\" target=\"_blank\">相关文档</a></div><div class=\"z-line-group\" name=\"9-7792\"><br></div><div class=\"z-line-group ace-line\" name=\"11-ac85\" data-editorid=\"ace-11-ac85\" data-language=\"javascript\" cur=\"true\">function fuckXss(str, reg){\n    var re = reg || /\\&lt;|\\&gt;|\\\\|\\/|\\\"|\\'/ig;\n    return str.replace(re, function($1){\n        return '&amp;#' + $1.charCodeAt() + ';';\n    });\n};</div><div class=\"z-line-group\" name=\"12-c433\"><br></div>","brief":"最近发现，自己博客上所有用户可以输入的地方，都可以被xss...真是不忍直视啊，多亏各位手下留情了(其实是没几个人看)于是抽空把这个洞堵上了，堵之前先去看了看别人博客是怎么做的，发现大多差强人意，输入","fav":[],"comment":0,"read":0},{"_id":"55b856418bd2df980a000001","url":"http://xwenliang.cn/p/55b856418bd2df980a000001","auther":"邢文亮","cata":"4","time":1438144020000,"title":"使用WebStorm调试Nodejs","content":"<p name=\"23-700b\">以前写Node，基本上没有什么调试，只是简单的console。这样靠\"猜\"写出来的代码，\"基于巧合\"的编程，往往是很心虚的。</p><p name=\"24-6c4c\"><br></p><p name=\"25-bbe2\">用过node-inspector，打了断点再点下一步的时候，就会从断点界面跳到console界面，不知道为什么会有这么奇怪的行为，不知道最新的版本是不是好些了。所以打算试试传说中的web开发神器：webstorm。</p><p name=\"26-9627\"><br></p><p name=\"27-518e\">下载安装，光是这个安装界面就深深吸引了我：</p><p name=\"28-7c08\"><img src=\"/uploads/artical/1438143588426-%E9%82%A2%E6%96%87%E4%BA%AEwebstorm.png\"></p><p name=\"29-95a9\"><br></p><p name=\"30-886e\">安装后就有些摸不着头脑了，从没用IDE进行过开发，搜到的一些相关文章也都只是简单讲了如何调试单个文件，没有一些参数或者环境变量的设置。</p><p name=\"31-c058\">而我主要是想用来调试fis，</p><p name=\"32-ae35\">首先命令的执行不是在fis本身的目录，而是在实际项目目录</p><p name=\"33-629d\">其次fis的执行不是node xxx.js的形式，入口文件往往在/usr/local/bin/下</p><p name=\"34-5484\">再次fis执行的时候往往需要指定一大堆参数..</p><p name=\"35-b33a\"><br></p><p name=\"36-828b\">后来再研究了下，发现只要配置文件写好了，这一切也是可以做到的，</p><p name=\"37-ad4b\">以</p><p name=\"44-60f7\">node安装在/usr/local/bin/node</p><p name=\"38-8254\">fis-zoo安装在/usr/local/lib/node_modules/fis-zoo</p><p name=\"42-832e\">fis-zoo运行命令为zoo release -wd test</p><p name=\"40-781e\">实际项目目录在/Users/zooble/Documents/case/github/xwenliang</p><p name=\"43-68e4\">为例，如下配置即可调试该命令：</p><p name=\"39-aa07\" cur=\"true\"><img src=\"/uploads/artical/1438143552886-%E9%82%A2%E6%96%87%E4%BA%AEwebstorm.png\"></p>","brief":"以前写Node，基本上没有什么调试，只是简单的console。这样靠\"猜\"写出来的代码，\"基于巧合\"的编程，往往是很心虚的。用过node-inspector，打了断点再点下一步的时候，就会从断点界面跳","fav":[],"comment":0,"read":0},{"_id":"56dee155866ef7873c00002a","url":"http://xwenliang.cn/p/56dee155866ef7873c00002a","auther":"邢文亮","cata":"1","time":1457459580000,"title":"npm的几个坑","content":"\n\t\t\t\t<div class=\"z-line-group\" name=\"0-2713\">随着nodejs发布5.x.x稳定版，npm3也踏坑而来，带来了传说中的peerDependencies。</div><div class=\"z-line-group\" name=\"1-b6d3\">如果没有版本冲突的话，它会把所有的依赖压成一层。</div><div class=\"z-line-group\" name=\"9-2b55\"><br></div><div class=\"z-line-group\" name=\"2-8380\">没冲突的情况下，比如模块依赖关系是这样的：</div><div class=\"z-line-group\" name=\"3-2cf5\">---a@1.0.0---b@1.0.0</div><div class=\"z-line-group\" name=\"4-b89a\">&nbsp;|-b@1.0.0</div><div class=\"z-line-group\" name=\"5-dc1c\">安装后的项目结构是这样的：</div><div class=\"z-line-group\" name=\"6-bbe1\">node_modules---a@1.0.0</div><div class=\"z-line-group\" name=\"7-5335\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|-b@1.0.0</div><div class=\"z-line-group\" name=\"10-c1dd\"><br></div><div class=\"z-line-group\" name=\"11-cd51\">有冲突的情况下，比如：</div><div class=\"z-line-group\" name=\"12-6183\">---a@1.0.0---b@2.2.2</div><div class=\"z-line-group\" name=\"13-6150\">&nbsp;|-b@1.0.0</div><div class=\"z-line-group\" name=\"14-9fed\">安装后的项目结构是这样的：</div><div class=\"z-line-group\" name=\"15-cdf8\">node_modules---a@1.0.0---b@2.2.2</div><div class=\"z-line-group\" name=\"17-4107\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|-b@1.0.0</div><div class=\"z-line-group\" name=\"18-c47f\"><br></div><div class=\"z-line-group\" name=\"19-8986\">仔细想想，以后大家的node_modules目录可能就没那么干净了，什么乱七八糟的深层依赖都会跑到上面来，不过这样经过排重后需要下载的代码量也会大大缩减吧，并且npm官网上统计的各个流行模块的惊人下载量也会急剧下降吧。</div><div class=\"z-line-group\" name=\"17-50ca\"><br></div><div class=\"z-line-group\" name=\"18-efb9\">上面提到的模块版本冲突的问题，有些组件的依赖并不是直接写死了版本号，而是类似于^0.0.1,~0.0.1这种情况，如果是这种模糊版本号，并且两个组件的版本号在同一范围内，也会被认为是同一个依赖而被压平的。</div><div class=\"z-line-group\" name=\"19-6326\">~比较好理解，就是最后一位版本号模糊：</div><div class=\"z-line-group\" name=\"20-8e7d\">~1.2.3 : &nbsp;&gt;=1.2.3 &lt;1.3.0</div><div class=\"z-line-group\" name=\"21-b0b3\">~1.2 &nbsp; : &nbsp;&gt;=1.2.0 &lt;2.0.0</div><div class=\"z-line-group\" name=\"22-ffde\">^比较蛋疼，看下面三个例子或许你就理解了：<br></div><div class=\"z-line-group\" name=\"24-dab5\">^1.2.3 : &nbsp;&gt;=1.2.3 &lt;2.0.0</div><div class=\"z-line-group\" name=\"25-64a1\">^0.2.3 : &nbsp;&gt;=0.2.3 &lt;0.3.0</div><div class=\"z-line-group\" name=\"26-a3b2\">^0.0.3 : &nbsp;&gt;=0.0.3 &lt;0.0.4</div><div class=\"z-line-group\" name=\"20-c5fe\">总之，就是小于非0最高位的那位数+1(还是英文好解释\"Compatible with version\")</div><div class=\"z-line-group\" name=\"27-270b\" cur=\"true\">更多规则请移步<a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\">这里</a></div><div class=\"z-line-group\" name=\"21-1218\"><br></div><div class=\"z-line-group\" name=\"16-409f\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>\n\t\t\t","brief":"\n\t\t\t\t随着nodejs发布5.x.x稳定版，npm3也踏坑而来，带来了传说中的peerDependencies。如果没有版本冲突的话，它会把所有的依赖压成一层。没冲突的情况下，比如模块依赖关系是这","fav":[],"comment":0,"read":0},{"_id":"548faa0ad6a065da2a000003","url":"http://xwenliang.cn/p/548faa0ad6a065da2a000003","auther":"邢文亮","cata":"1","time":1418701320000,"title":"如何干掉浏览器历史记录","content":"<p name=\"0-84c5\">今天有个同事问我，从a-&gt;b-&gt;c-&gt;d依次跳转页面，如何做到，在d页面点浏览器的后退，直接退到a呢？</p><p name=\"1-6062\" cur=\"true\">其实我也不会...但是咱们不是有google baidu嘛，虽然大多时候都是坑爹答案，但是也木有更好的办法啊（我会说其实我是想做一个靠谱的前端问答网站吗..）</p><p name=\"2-5271\"><br></p><p name=\"3-9e06\">经过一番折腾，发现了window.location.replace这个方法，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location.replace\" target=\"_blank\">传送门</a></p><p name=\"4-58bc\"><img src=\"/uploads/artical/1418701205918-%E9%82%A2%E6%96%87%E4%BA%AE20141216113955.png\"></p><p name=\"8-9751\"><br></p><p name=\"10-4fdf\">知道了它，咱们就好办了，从a-&gt;b的时候，正常跳，然后b-&gt;c-&gt;d分别都用window.location.replace来跳转，最终在d页面点浏览器的回退的时候，自然就直接到了a。</p>","brief":"今天有个同事问我，从a-&gt;b-&gt;c-&gt;d依次跳转页面，如何做到，在d页面点浏览器的后退，直接退到a呢？其实我也不会...但是咱们不是有google baidu嘛，虽然大多时候都是坑爹","fav":[],"comment":0,"read":0},{"_id":"5347a0527598534e5080ce47","url":"http://xwenliang.cn/p/5347a0527598534e5080ce47","auther":"邢文亮","cata":"1","time":1397203380000,"title":"web端如何检测设备是否连接外网","content":"<p name=\"91a9\">很多童鞋可能会问，有木有开玩笑啊？不连外网的话，怎么访问你的web呢？</p><p name=\"5c26\"><br></p><p name=\"6460\">所以我要先描述一下应用场景：</p><p name=\"9df2\">最近在做的这个项目，就有检测是否连接外网的需求。首先描述一下这个项目：</p><p name=\"a7de\">它是一个 无线路由器+移动电源+U盘 的东西。由于它内置了无线路由器（移动电源供电），而且附带存储，所以，只要用手机或其他设备连接了它发出的wifi信号，就可以访问它内部存储的数据。</p><p name=\"b671\">那么通过什么方式来读取它内部存储的数据呢？它内置了一个微型的嵌入式webserver(GoAhead)，它可以像nginx或apache一样处理http请求。所以只需要在后台读取资源列表，然后做成接口，供前端调用就ok了。</p><p name=\"985d\"><br></p><p name=\"7080\">通过上面的描述，我们发现，不连接外部网络，也是可以访问web的哈。其实早就有很多类似的应用场景。比如一些公司的内网管理系统，还有路由器等设备。</p><p name=\"7d31\"><br></p><p name=\"a7a4\">但是这个项目中，还有这么一个需求：需要添加一个在线的游戏列表。那么当用户不能连接外网的时候，怎么说也得给出个提示吧，不能直接就显示一片空白吧...那么如何判断用户是否连接外网呢？</p><p name=\"97c1\"><br></p><p name=\"83cc\">我想了一个比较蛋疼的方法：</p><p name=\"84e0\">在页面中加一个img标签，然后将其src指向百度logo的链接。这样当此img标签触发了load事件的时候，就说明该设备可以访问外部网络了...是不是很机智？</p><p name=\"6df6\">但是实际应用中发现，这个img的load事件，触发的总是比较迟钝，即使连接了外网，也得等个几秒钟才会触发。这样会将体验大打折扣，会给出用户错误的提示。</p><p name=\"7ffa\">当时的猜想是：因为浏览器允许同时下载的资源个数有限，可能需要排队，这占据了大部分延迟的时间。后来想了个办法，用js创建一个img标签，并添加百度logo的链接。然后append到body。此时发现，几乎没有延迟了。</p><p name=\"6a87\"><br></p><p name=\"ab11\">当然这个做法还是比较山寨的，万一哪天百度换掉logo的链接地址了咋办 =。=</p><p name=\"95a2\">所以比较靠谱的办法是，让后台童鞋给做一个专门检测是否能连外网的接口。如果请求了这个接口有返回，就标志用户可以上网了。</p>","brief":"很多童鞋可能会问，有木有开玩笑啊？不连外网的话，怎么访问你的web呢？所以我要先描述一下应用场景：最近在做的这个项目，就有检测是否连接外网的需求。首先描述一下这个项目：它是一个 无线路由器+移动电源+","fav":[],"comment":0,"read":0},{"_id":"56d9e498866ef7873c000027","url":"http://xwenliang.cn/p/56d9e498866ef7873c000027","auther":"邢文亮","cata":"1","time":1457346360000,"title":"做个chrome插件吧","content":"\n\t\t\t\t<div class=\"z-line-group\" name=\"0-f2fa\">确实很久没有更新了，说来惭愧。</div><div class=\"z-line-group\" name=\"1-5a01\">团队上确实有很多事情要处理，尤其现在到了14、15人的规模，需要想的事情有很多，想要做的也很多，每天会议也很多。。。</div><div class=\"z-line-group\" name=\"2-31cf\">真像某位前辈说的，该适当控制下自己写代码的欲望了，但代码写少了会感觉很心慌。。。总觉得自己要被时代遗弃了。。。怎么破</div><div class=\"z-line-group\" name=\"3-5a10\"><br></div><div class=\"z-line-group\" name=\"4-b5b1\">最近终于抽空把这个需求做了：给有道词典开发一个能一键加入单词本的浏览器插件。</div><div class=\"z-line-group\" name=\"5-762b\">我尝试了好几个官方提供的插件，要么是有bug用不了，要么就必须开启划词翻译，但后点翻译上的打开详情，进入详情后在点击一个加入单词本的按钮才能操作成功。。。</div><div class=\"z-line-group\" name=\"6-7011\">我是极其不愿意开启划词翻译的，觉得这样像走马观花，后面碰到了还是记不住不认识，并且会对翻译工具产生依赖。</div><div class=\"z-line-group\" name=\"7-357e\">理想中的插件应该是这样的：在浏览器复制要添加的单词，打开该插件粘贴，保存即可同步到有道单词本。这样每天晚上睡前看几眼今天记录的单词，回想一下当时的语境，应该会对这些单词加深印象吧。然后添加的时候最好查重，有重复提交的给些提示啥的，方便再次加强记忆。</div><div class=\"z-line-group\" name=\"8-ff5f\"><br></div><div class=\"z-line-group\" name=\"9-f20f\">说干就干，查了一些资料和<a href=\"https://developer.chrome.com/extensions/devguide\" target=\"_blank\">官方文档</a>后发现也没啥难的，差不多分那么几大块：</div><div class=\"z-line-group\" name=\"10-dc67\">1. background，类似于后台的代码，只在浏览器启动的时候执行一次，可直接跨域请求</div><div class=\"z-line-group\" name=\"13-b9c7\">2. content，会直接插入到当前页面执行的代码，可以通过run_at设置是在页面加载前还是加载后执行，文档中都有说明</div><div class=\"z-line-group\" name=\"14-6bba\">3. popup，就是点击浏览器插件的时候弹出来的小窗口</div><div class=\"z-line-group\" name=\"15-ead4\"><br></div><div class=\"z-line-group\" name=\"16-9b9a\">知道了这些，后面就是模拟有道登录，然后调用有道添加单词本的接口就可以了，想当然的选择了在background中去模拟登录。</div><div class=\"z-line-group\" name=\"17-2130\">然后发现，即使是通过浏览器最新的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" target=\"_blank\">fetch</a>，虽然请求能正常收发，但仍然无法获取到返回头的Set-Cookie字段。取不到cookie自然就连模拟登录都做不了了。</div><div class=\"z-line-group\" name=\"18-8187\">仔细想想也是合理的，如果能通过fetch获取到Set-Cookie中的值，那么httpOnly也就形同虚设了。。。所以在浏览器中获取cookie只有一条路：document.cookie</div><div class=\"z-line-group\" name=\"19-e04e\"><br></div><div class=\"z-line-group\" name=\"20-f0a0\">然后发现在popup中通过设置fetch的credentials可以实现将返回的cookie设置到相对应的域下。这样就成功获得了有道的登录凭证。。。感觉利用这个特性还可以搞搞其他有意思的东西啊，比如一键登录所有账号啥的。。。</div><div class=\"z-line-group\" name=\"25-3fe3\"><br></div><div class=\"z-line-group\" name=\"21-1437\">目前已经实现的功能仅仅是登录有道和添加单词到有道单词本，其他像查重提示，添加自定义tag啥的都还没搞，目前是够我用了，感兴趣的同学可以看<a href=\"https://github.com/xwenliang/zoo-vocab\" target=\"_blank\">这里</a></div><div class=\"z-line-group\" name=\"26-2f01\"><br></div><div class=\"z-line-group\" name=\"22-d311\">我google发布浏览器插件要付个一次性的$5，等我的visa双币卡下来了再发布到应用商店吧。。。</div><div class=\"z-line-group\" name=\"27-a211\"><br></div><div class=\"z-line-group\" name=\"28-9165\" cur=\"true\"><img src=\"/upload/artical/10ba78cf0b5d3662ede8aec6932d77ac.jpg\"></div><div class=\"z-line-group\" name=\"29-2b9a\"><img src=\"/upload/artical/378f1e7f341fce6790cfd1b7f9f63024.jpg\"></div>\n\t\t\t","brief":"\n\t\t\t\t确实很久没有更新了，说来惭愧。团队上确实有很多事情要处理，尤其现在到了14、15人的规模，需要想的事情有很多，想要做的也很多，每天会议也很多。。。真像某位前辈说的，该适当控制下自己写代码的欲","fav":[],"comment":0,"read":0},{"_id":"54da0f5f861bdd1d5e000002","url":"http://xwenliang.cn/p/54da0f5f861bdd1d5e000002","auther":"邢文亮","cata":"8","time":1424946600000,"title":"喷一喷 box-flex","content":"<p name=\"0-9909\">今天让这个属性坑的满地打滚，w3c这样描述道：</p><p name=\"5-9f4b\"><img src=\"/uploads/artical/1423652154471-%E9%82%A2%E6%96%87%E4%BA%AEbox-flex.png\"></p><p name=\"1-74e2\"><br></p><p name=\"6-6b2e\">但事实真的是这样的吗？看下图：</p><p name=\"0-c2f9\"><img src=\"/uploads/artical/1424944503683-%E9%82%A2%E6%96%87%E4%BA%AECAF4F7C2-9CEB-42FA-BF1A-8F7D6EC34317.png\"></p><p name=\"2-8a47\"><br></p><p name=\"8-c2bd\">我们发现，除了左右比例根本不是说好的1:2之外，这个比例还会随着容器内容的多少而变化，我书读的比较少，顿时茫然了。</p><p name=\"3-7936\">后来发现，再<b>给他们各自设置width:0</b>，才会真正的按1:2分配宽度。</p><p name=\"4-b5ec\"><br></p><p name=\"5-5dbc\">既然这个属性有问题，我们为什么不用更好的display: flex呢？</p><p name=\"7-af73\">这才是真正的坑啊，大部分安卓机(尤其小米)，根本不认识display:flex是什么，甭管你加了什么样的前缀...</p><p name=\"10-9ab5\">好在他们还能认识加了前缀的display:box，再配上width:0，这个问题就完美解决了。</p><p name=\"11-8a0a\"><br></p><p name=\"12-7322\">砖头：</p><pre name=\"14-6f66\"><ul><li>//mixin </li><li name=\"39-9368\">.flex(){</li><li name=\"15-9c88\"><span class=\"tab\">    display: -webkit-box;</span></li><li name=\"17-5a9f\"><span class=\"tab\">    display: -moz-box;</span></li><li name=\"18-a4a5\"><span class=\"tab\">    display: -ms-box;</span></li><li name=\"19-964a\"><span class=\"tab\">    display: -o-box;</span></li><li name=\"20-60b7\"><span class=\"tab\">    display: box;</span></li><li name=\"21-aed3\"><span class=\"tab\">    display: -webkit-flex;</span></li><li name=\"22-7ed2\"><span class=\"tab\">    display: -moz-flex;</span></li><li name=\"23-6f94\"><span class=\"tab\">    display: -ms-flex;</span></li><li name=\"24-acf2\"><span class=\"tab\">    display: -o-flex;</span></li><li name=\"25-a667\"><span class=\"tab\">    display: flex;</span> </li><li name=\"16-846f\">}</li><li name=\"26-8b6f\">.flex-children(@value: 1){</li><li name=\"27-6699\"><span class=\"tab\">    -webkit-box-flex: @value;</span></li><li name=\"29-aef2\"><span class=\"tab\">    -moz-box-flex: @value;</span></li><li name=\"30-92d5\"><span class=\"tab\">    -ms-box-flex: @value;</span></li><li name=\"31-9b52\"><span class=\"tab\">    -o-box-flex: @value;</span></li><li name=\"32-707a\"><span class=\"tab\">    box-flex: @value;</span></li><li name=\"33-6c85\"><span class=\"tab\">    -webkit-flex: @value;</span></li><li name=\"34-94b4\"><span class=\"tab\">    -moz-flex: @value;</span></li><li name=\"35-c331\"><span class=\"tab\">    -ms-flex: @value;</span></li><li name=\"36-afc7\"><span class=\"tab\">    -o-flex: @value;</span></li><li name=\"37-6f5a\"><span class=\"tab\">    flex: @value;</span></li><li name=\"38-8cc5\"><span class=\"tab\">    width: 0;</span> </li><li name=\"28-664f\">}</li><li name=\"44-8bf4\"> </li><li name=\"40-9644\">//使用</li><li name=\"41-add6\">ul{</li><li name=\"42-5d03\"><span class=\"tab\">    .flex();</span></li><li name=\"45-b6ba\"><span class=\"tab\">    li{</span></li><li name=\"46-c0e5\" cur=\"true\"><span class=\"tab\">   &nbsp;<span class=\"tab\">    .flex-children(1);</span></span></li><li name=\"47-9bf9\"><span class=\"tab\"><span class=\"tab\">    </span>}</span></li><li name=\"48-ae0d\"><span class=\"tab\">    li.double{</span></li><li name=\"49-8073\"><span class=\"tab\">    <span class=\"tab\">    .flex-children(2);</span></span></li><li name=\"50-6452\"><span class=\"tab\">    }</span></li><li name=\"43-7be1\">} </li></ul></pre><p name=\"6-af8d\" cur=\"true\"><br></p>","brief":"今天让这个属性坑的满地打滚，w3c这样描述道：但事实真的是这样的吗？看下图：我们发现，除了左右比例根本不是说好的1:2之外，这个比例还会随着容器内容的多少而变化，我书读的比较少，顿时茫然了。后来发现，","fav":[],"comment":0,"read":0},{"_id":"54c640f0c8dd347c0500000a","url":"http://xwenliang.cn/p/54c640f0c8dd347c0500000a","auther":"邢文亮","cata":"1","time":1422279720000,"title":"使用vimdiff代替svn diff","content":"<p name=\"0-b655\">svn自带的diff实在是没法看，果断百度google一番，找到了vimdiff这东西，</p><p name=\"1-572d\">怕日后别人链接挂了，抄到这里吧。</p><p name=\"2-80bc\"><br></p><p name=\"3-834d\">1.创建一个shell脚本，就叫mydiff吧，放在/usr/bin下好了</p><pre name=\"5-9506\"><ul><li>#!/bin/sh</li><li name=\"7-4f54\"> </li><li name=\"8-6b97\">#指定vimdiff的路径</li><li name=\"9-6447\" cur=\"true\">DIFF=\"/usr/bin/vimdiff\"</li><li name=\"10-7202\"> </li><li name=\"11-97e2\">#svn提供的第六和第七个参数就是两个要对比的文件</li><li name=\"12-820f\">LEFT＝${6}</li><li name=\"13-84ce\">RIGHT=${7}</li><li name=\"14-c28c\"> </li><li name=\"15-a683\">#调用vimdiff做比较</li><li name=\"16-9814\">$DIFF $LEFT $RIGHT </li></ul></pre><p name=\"18-9779\">并赋予该文件可执行权限：chmod +x /usr/bin/mydiff</p><p name=\"19-727f\"><br></p><p name=\"20-7dc3\">2.配置个人目录下的svn配置文件：~/.subversion/config，找到[helplers]</p><p name=\"21-6e5f\">将 # diff-cmd = diff_program(diff, gdiff, etc.) 这一句，改为：</p><p name=\"22-7a7b\">diff-cmd = /usr/bin/mydiff</p><p name=\"23-6001\">保存退出，就可以了。</p><p name=\"0-a49f\"><br></p><p name=\"25-65fd\" cur=\"true\">效果：</p><p name=\"24-ad83\"><img src=\"/uploads/artical/1422278867408-%E9%82%A2%E6%96%87%E4%BA%AEmydiff.jpg\"></p>","brief":"svn自带的diff实在是没法看，果断百度google一番，找到了vimdiff这东西，怕日后别人链接挂了，抄到这里吧。1.创建一个shell脚本，就叫mydiff吧，放在/usr/bin下好了#!/","fav":[],"comment":0,"read":0},{"_id":"549bc1d96c1351e664000001","url":"http://xwenliang.cn/p/549bc1d96c1351e664000001","auther":"邢文亮","cata":"8","time":1419493860000,"title":"微信页面开发中遇到的坑","content":"<p name=\"40-b196\">最近做了几个微信的活动页，总结一下遇到的问题。</p><p name=\"0-b4ed\"><br></p><p name=\"41-835e\">1.首先遇到的是，各种小米的机型，window.innerHeight获取到的不是css pixel，居然是device pixel。</p><p name=\"1-6de1\"><br></p><p name=\"42-750c\">css pixel(css像素)，指的是css样式代码中使用的逻辑像素，比如定义body的宽度为320px。</p><p name=\"43-b0ec\">device pixel(设备像素)，指的是设备的像素，比如iPhone的分辨率为640×1136px。</p><p name=\"44-a9ec\"><br></p><p name=\"45-74d9\">那么这个css pixel和device pixel有什么关系呢？这就需要先了解<a href=\"http://www.devicepixelratio.com/\" target=\"_blank\">device pixel ratio(设备像素比)</a></p><p name=\"46-6d16\">了解了它以后，咱们知道了css中1px并不一定等于设备的1px，是要根据这个device pixel ratio来计算得出的。所以，咱们常用的设计稿宽度一般是640px，而我们在写页面的时候，一般把宽度定义为320px。这是因为大多数机型的像素比都是2:1。</p><p name=\"47-a79b\"><br></p><p name=\"48-ad6f\">我们要获取的是css像素，获取个设备像素有什么用啊？后来发现，<b>将window.innerHeight放到微信自带的WeixinJSBridgeReady事件的回调中，就能正常获取到css像素了</b>。</p><pre name=\"54-7b5d\"><ul><li>document.addEventListener('WeixinJSBridgeReady', <em>function(){</em></li><li name=\"55-730d\"><em><span class=\"tab\">    var height = window.innerHeight;</span><br></em></li><li name=\"57-8eb6\"><em><span class=\"tab\"><span class=\"tab\">    //</span><br></span></em></li><li name=\"56-9b13\" cur=\"true\"><em>}, false);</em> </li></ul></pre><p name=\"50-8af5\">这东西是不是让你想到了document的ready事件？在人屋檐下，不得不低头啊...</p><p name=\"51-be7a\"><br></p><p name=\"52-9455\">2.微信提供的分享给好友和分享到朋友圈接口的bug，试了几个魅族2，均发现menu:share:appmessage和menu:share:timeline这两个事件的回调函数不能执行，分享成功后需要手动点一下屏幕才会触发。后来<b>分别把他们的回调函数延迟200ms再执行</b>，就一切正常了...</p><p name=\"59-a217\" cur=\"true\">测试微信版本：6.0.1</p>","brief":"最近做了几个微信的活动页，总结一下遇到的问题。1.首先遇到的是，各种小米的机型，window.innerHeight获取到的不是css pixel，居然是device pixel。css pixel(","fav":[],"comment":0,"read":0},{"_id":"5601409378d452a156000015","url":"http://xwenliang.cn/p/5601409378d452a156000015","auther":"邢文亮","cata":"6","time":1442922600000,"title":"升级到Xcode7.0所踩到的坑","content":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<div class=\"z-line-group\" name=\"0-b929\">今天手抖，点了Xcode的更新提示，更新完后发现APP果然跑不起来了。</div><div class=\"z-line-group\" name=\"0-b929\">报错截图：</div><div class=\"z-line-group\" name=\"0-b929\"><img src=\"/upload/artical/8320efe8779a0b088670086d86718bb4.png\"></div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">由于目前采用的还是webview的方案，所以必不可少的要加载一些web资源，</div><div class=\"z-line-group\" name=\"0-b929\">直观的看上去，是这些资源由于某些原因导致加载失败，所以APP白屏了。</div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">赶紧搜索了一番，发现是iOS9新引入的App Transport Security的原因，它要求APP访问的网络必须是https协议，想来应该是为了应对这次的XcodeGoast事件吧。</div><div class=\"z-line-group\" name=\"0-b929\">但是开发阶段再去搞个https的域不太现实啊，并且如果APP引用了一些第三方的网络资源呢。想来肯定是可以设置白名单的吧。</div><div class=\"z-line-group\" name=\"0-b929\"><br></div><div class=\"z-line-group\" name=\"0-b929\">应对方案有两种：</div><div class=\"z-line-group\" name=\"0-b929\">1. 干脆把这个限制去掉，允许加载所有资源(这真是浪费了苹果的苦心)</div><div class=\"z-line-group\" name=\"0-b929\">给info.plist文件添加如下配置：</div>\n\t\t\t\n\t\t\t<div class=\"z-line-group ace-line\" name=\"5-22e7\" data-editorid=\"ace-6-bcff\" data-language=\"xml\">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;\n&lt;dict&gt;\n\t&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n\t&lt;true/&gt;\n&lt;/dict&gt;</div><div class=\"z-line-group\" name=\"5-fbf9\"><br></div><div class=\"z-line-group\" name=\"1-60ca\">2. 设置http白名单，这种方法虽然麻烦，但个人觉得比较靠谱，允许加载的资源更可控。</div><div class=\"z-line-group\" name=\"1-60ca\">给info.plist添加如下配置：</div><div class=\"z-line-group ace-line\" name=\"8-7356\" data-editorid=\"ace-8-7356\" data-language=\"xml\" cur=\"true\">&lt;!--以 放行baidu.com和qq.com两个域下的资源为例：--&gt;\n&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;NSExceptionDomains&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;baidu.com&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;\n            &lt;true/&gt;\n            &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt;\n            &lt;false/&gt;\n            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;\n            &lt;true/&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;qq.com&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;\n            &lt;true/&gt;\n            &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt;\n            &lt;false/&gt;\n            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;\n            &lt;true/&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n&lt;/dict&gt;</div><div class=\"z-line-group\" name=\"1-60ca\">还有另外一个坑，原来的分享功能，在iOS9下也无法正常跳转了。</div><div class=\"z-line-group\" name=\"1-60ca\">这是因为新增了跳转规则，在跳转到其他客户端时，要首先检测项目的info.plist文件有没有配置要跳转平台的白名单，如果没有配置，则将不能正常跳转。想来这也是为了防止APP被篡改代码后随便跳转到其他客户端，增加APP的安全性做的措施吧。</div><div class=\"z-line-group\" name=\"1-60ca\"><br></div><div class=\"z-line-group\" name=\"1-60ca\">以下是常用几大平台的白名单配置：</div><div class=\"z-line-group ace-line\" name=\"11-68b5\" data-editorid=\"ace-11-68b5\" data-language=\"xml\">&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;\n&lt;array&gt;\n\t&lt;string&gt;sinaweibo&lt;/string&gt;\n\t&lt;string&gt;sinaweibosso&lt;/string&gt;\n\t&lt;string&gt;TencentWeibo&lt;/string&gt;\n\t&lt;string&gt;tencentweiboSdkv2&lt;/string&gt;\n\t&lt;string&gt;wechat&lt;/string&gt;\n\t&lt;string&gt;weixin&lt;/string&gt;\n\t&lt;string&gt;mqzoneopensdk&lt;/string&gt;\n\t&lt;string&gt;mqzoneopensdkapi&lt;/string&gt;\n\t&lt;string&gt;mqzoneopensdkapi19&lt;/string&gt;\n\t&lt;string&gt;mqzoneopensdkapiV2&lt;/string&gt;\n\t&lt;string&gt;mqqOpensdkSSoLogin&lt;/string&gt;\n\t&lt;string&gt;mqqopensdkapiV2&lt;/string&gt;\n\t&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;\n\t&lt;string&gt;wtloginmqq2&lt;/string&gt;\n\t&lt;string&gt;mqqapi&lt;/string&gt;\n\t&lt;string&gt;mqqwpa&lt;/string&gt;\n\t&lt;string&gt;mqzone&lt;/string&gt;\n\t&lt;string&gt;mqq&lt;/string&gt;\n&lt;/array&gt;</div><div class=\"z-line-group\" name=\"10-ee72\"><br></div><div class=\"z-line-group\" name=\"4-5ed9\">至此，APP基本又恢复正常了。</div>\n\t\t\t\n\t\t\t\n\t\t\t","brief":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t今天手抖，点了Xcode的更新提示，更新完后发现APP果然跑不起来了。报错截图：由于目前采用的还是webview的方案，所以必不可少的要加载一些web","fav":[],"comment":0,"read":0},{"_id":"550179ce043d254915000001","url":"http://xwenliang.cn/p/550179ce043d254915000001","auther":"邢文亮","cata":"1","time":1426160040000,"title":"当FastClick遇上iScroll5","content":"<p name=\"0-9c9f\">之前做了个活动页，具极少部分用户反馈，页面的按钮点击不了，</p><p name=\"1-ba7b\">我几乎试遍了同事的所有手机，都没发现这个问题，后来有个同事买了个 索尼z1，这个问题终于复现了。</p><p name=\"2-8730\"><br></p><p name=\"3-9224\">当时有点懵，就是个a链接，没有绑定任何事件，怎么可能会不能跳转。</p><p name=\"5-8716\">但别人家网站的a链接都跳转正常啊。</p><p name=\"7-be35\"><br></p><p name=\"6-9cb9\">仔细想了想，这个a链接真的没有绑定任何事件吗？</p><p name=\"8-5a4f\">回头看了看引入的模块，fastclick，iscroll5，这些都是会影响到点击事件的存在啊！</p><p name=\"9-a383\"><br></p><p name=\"10-84d0\">赶紧写个demo试试：</p><p name=\"11-6257\">1.单独引入iscroll5，页面的a链接、点击事件全部不可用，看了看文档，iscroll5是默认阻止页面的点击事件的，将click属性设置为true，搞定。</p><p name=\"13-afec\">等等，既然默认阻止页面点击事件，为什么在活动页中绝大部分机型都可以点击呢？(活动页中并未设置click属性)</p><p name=\"14-54bd\">那么赶紧去活动页中，在实例化iscroll5的时候将click设置为true。</p><p name=\"15-80f4\">这次新的问题出现了，这个索尼z1可以点击了，但是iPhone5/6全部变成双击才能点击了...</p><p name=\"12-5e7f\">2.为了消除其他组件引发bug的可能性，在测试页面只引入iscroll5和fastclick，并且不设置iscroll5的click属性，结果发现其他手机都可以点击，唯有索尼z1不可点击。然后将click属性设置为true，索尼z1可点，iPhone5/6双击才可触发...</p><p name=\"18-7d93\"><br></p><p name=\"19-7fe7\">至此基本可以确定，部分机型按钮不可点击的问题是由于fastclick和iScroll5冲突引起的了。</p><p name=\"20-9631\" cur=\"true\">至于详细冲突点，以后有空再研究吧</p>","brief":"之前做了个活动页，具极少部分用户反馈，页面的按钮点击不了，我几乎试遍了同事的所有手机，都没发现这个问题，后来有个同事买了个 索尼z1，这个问题终于复现了。当时有点懵，就是个a链接，没有绑定任何事件，怎","fav":[],"comment":0,"read":0},{"_id":"52e0fe7e31dbf3a112000001","url":"http://xwenliang.cn/p/52e0fe7e31dbf3a112000001","auther":"朱大哈","cata":"2","time":1390877640000,"title":"IE6完美实现position:fixed","content":"<p name=\"a93e\">给html和body加如下样式（ie6下消除了fixed元素滚动时的抖动）：</p><p name=\"5b56\">html, html body{</p><p name=\"7fd6\">&nbsp; &nbsp;&nbsp;_background-image:&nbsp;url(about:blank);</p><p name=\"a1e5\">&nbsp; &nbsp;&nbsp;_background-attachment:&nbsp;fixed;</p><p name=\"bf7e\">}</p><p name=\"75dc\"><br></p><p name=\"8bf9\">给要设置fixed的元素加如下样式：</p><p name=\"9051\">.fixed{</p><p name=\"b1fd\">&nbsp; &nbsp; position: fixed;</p><p name=\"586a\">&nbsp; &nbsp; top: 200px;</p><p name=\"af2a\">&nbsp; &nbsp; left: 200px;</p><p name=\"7b43\">&nbsp; &nbsp; _position: absolute;</p><p name=\"80b5\">&nbsp; &nbsp;&nbsp;_top:&nbsp;expression(eval(document.documentElement.scrollTop + 200));</p><p name=\"9faf\">}</p><p name=\"5395\"><br></p><p name=\"b754\">另： css中最耗性能的属性就是 position: fixed 了，可能浏览器的内部实现也是类似于IE6的情况，需要不停的监听滚动事件来实时计算定位的位置。下面给出几个比较耗性能的css属性排行：</p><p name=\"ad65\">1、position: fixed</p><p name=\"4ff7\">2、background-position: fixed</p><p name=\"91f1\">3、border-radius</p><p name=\"88fa\">4、background-size</p><p name=\"8b31\">5、box-shadow</p><p name=\"5a11\">6、gradients</p>","brief":"给html和body加如下样式（ie6下消除了fixed元素滚动时的抖动）：html, html body{&nbsp; &nbsp;&nbsp;_background-image:&nbsp;url","fav":[],"comment":0,"read":0},{"_id":"556e9a58e38f7b2966000001","url":"http://xwenliang.cn/p/556e9a58e38f7b2966000001","auther":"邢文亮","cata":"1","time":1433314620000,"title":"fis对html文件的压缩","content":"<p name=\"3-6e81\">今天在上线一个简单的下载代理页的时候，发现了以前遗留的一个问题。</p><p name=\"4-bdd8\"><br></p><p name=\"5-5f58\">以前用<a href=\"https://github.com/fex-team/fis\" target=\"_blank\">fis</a>的时候发现，即使开启了<a href=\"https://www.npmjs.com/package/html-minifier\" target=\"_blank\">html-minifier</a>，页面中内嵌的css和js代码都不会被压缩，只有html标签那部分被压缩了。</p><p name=\"0-bc8c\">这样当页面上内嵌的css和js代码过多的时候，压缩效果就非常不明显了。典型的例子，就是一些一次性的活动页，这种项目往往不注重后期迭代，开发效率才是首要的。这种场景下，就需要将css和js全部压缩了。</p><p name=\"2-573b\"><br></p><p name=\"3-565e\">去看html-minifier的官方文档，会发现它其实是支持压缩页面中的css和js的，只不过默认是不开启状态。</p><p name=\"5-b4db\">再去看fis中依赖的fis-postpackager-html-minifier模块，确实没有开启minifyCSS和minifyJS这两项配置：</p><p name=\"8-63a8\"><img src=\"/uploads/artical/1433313766351-%E9%82%A2%E6%96%87%E4%BA%AEhtmlminify.png\"></p><p name=\"7-b5d6\"><br></p><p name=\"12-aa93\">那么到这里问题已经解决，直接在fis依赖的这个模块中添加开启这两项配置即可。</p><p name=\"11-addc\"><br></p><p name=\"9-a4dc\">其实还是有些不明白，fis在release的时候，只有添加了-o参数，才会压缩文件，</p><p name=\"10-baa5\" cur=\"true\">既然可以选择压缩或者不压缩文件，为何压缩html文件的时候，却默认对html文件中的css和js文件不做处理呢？</p><p name=\"15-969d\"><br></p><p name=\"16-ba67\">适合自己的工具才是最好的工具，所以我们有了——<a href=\"https://github.com/xwenliang/fis-zoo\" target=\"_blank\">fis-zoo</a></p>","brief":"今天在上线一个简单的下载代理页的时候，发现了以前遗留的一个问题。以前用fis的时候发现，即使开启了html-minifier，页面中内嵌的css和js代码都不会被压缩，只有html标签那部分被压缩了。","fav":[],"comment":0,"read":0},{"_id":"5536412a502b528233000002","url":"http://xwenliang.cn/p/5536412a502b528233000002","auther":"不长肉","cata":"8","time":1429618980000,"title":"移动端记得起个好头","content":"<p name=\"29-bd89\">第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码</p><pre name=\"31-6a3c\"><ul><li>&lt;meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;\"&nbsp;name=\"viewport\"&nbsp;/&gt;</li><li name=\"32-89ac\">&lt;meta content=\"yes\"&nbsp;name=\"apple-mobile-web-app-capable\"&nbsp;/&gt;</li><li name=\"33-ac40\">&lt;meta content=\"black\"&nbsp;name=\"apple-mobile-web-app-status-bar-style\"&nbsp;/&gt;</li><li cur=\"true\" name=\"34-5648\">&lt;meta content=\"telephone=no\"&nbsp;name=\"format-detection\"&nbsp;/&gt; </li></ul></pre>","brief":"第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；第二个meta标签是iphone设备中的safari私有meta标签，它表","fav":[],"comment":0,"read":0},{"_id":"5346cac282c53bab4adf8026","url":"http://xwenliang.cn/p/5346cac282c53bab4adf8026","auther":"邢文亮","cata":"1","time":1397148300000,"title":"url中的#","content":"<p name=\"67cd\">最初看见这东西，是在网页定位的时候。</p><p name=\"9edb\">比如我想让网页一打开就定位在某个位置，我会在url后面添加一个#aaa，然后网页打开的时候，会自动跳转到id为aaa的元素的位置，那时候我们叫它'锚点'。</p><p name=\"ab39\"><br></p><p name=\"6de9\">最近做的项目中，差不多是一个类似于百度网盘的项目吧，在打开一些带#的文件的时候，会提示无法找到该资源。在服务器端监听请求会发现，后端接收到的数据请求，只是#之前的内容。比如：</p><p name=\"5fee\">请求这个地址： http://xwenliang.cn/aaa#aa.txt</p><p name=\"6103\">服务器端接收到的请求只是： http://xwenliang.cn/aaa</p><p name=\"adc9\">那么这个#到底是用来干啥的呢？为什么浏览器的请求会忽略掉它后面的内容呢？</p><p name=\"9da7\"><br></p><p name=\"5213\">通过上面的内容，我们了解到，这个#，其实只是用于定位网页的显示位置的（指导浏览器行为），与服务器数据无关。所以浏览器在发出数据请求的时候，会忽略掉它和它后面的内容。</p><p name=\"bd2a\">那么如果我就是想要发送一个带#的请求，怎么破？</p><p name=\"8c07\">可以试试encodeURIComponent(encodeURI是不会对#进行转译的)，他会将#转译为%23。后端在接收到%23时，会将它还原为#，从而绕过浏览器恶心的默认行为。</p><p name=\"a093\">类似的还有?、&amp;等，当他们出现在url中的时候，都有自己特殊的含义。如果不想被浏览器解析为特殊含义的话，都需要自己手动转译一下。</p><p name=\"8ec2\"><br></p><p name=\"9d9f\">在webapp兴起的时代，#还有更有用的地方。由于它可以让浏览器产生历史记录，从而可以利用它来标记浏览器的某一时刻的状态。通过检测#后面的内容(onhashchange,低版本IE浏览器需要轮询)，发起相应的ajax请求，来还原某一时刻浏览器的状态。实现页面无刷新加载数据保持状态。</p><p name=\"8891\"><br></p><p name=\"aede\">ajax异步交互数据，虽然会带来相对较好的用户体验，但这会阻碍搜索引擎爬虫对内容的爬取。但是如果希望让google爬虫爬取到动态加载的数据，可以使用#!这个特殊符号组合。google爬虫会将其后的内容转成查询字符串_escaped_fragment_的值。</p><p name=\"842c\">比如，如果google爬虫爬取到一个地址： http://xwenliang.cn/#!/list</p><p name=\"7bfa\">它会自动将地址转为： http://xwenliang.cn/?_escaped_fragment_=/list</p><p name=\"b2ff\"><br></p><p name=\"69ba\">通过这种方式，可以让google爬虫爬取到单页面webapp的一些数据。</p>","brief":"最初看见这东西，是在网页定位的时候。比如我想让网页一打开就定位在某个位置，我会在url后面添加一个#aaa，然后网页打开的时候，会自动跳转到id为aaa的元素的位置，那时候我们叫它'锚点'。最近做的项","fav":[],"comment":0,"read":0},{"_id":"53159691822d0f3550695310","url":"http://xwenliang.cn/p/53159691822d0f3550695310","auther":"邢文亮","cata":"1","time":1433143920000,"title":"按钮连点&重复提交","content":"\n\t\t\t\t\t<p name=\"580c\">关于ajax重复提交，已经是老生常谈了，相信各位早已有N种不同的解决方法了。<a href=\"http://www.zhihu.com/question/19805411\" target=\"_blank\">传送门</a></p><p name=\"0-99f2\">既然已经解决了重复提交的问题，那按钮连点也不存在什么问题了吧，为什么还要单独拿出来说呢？</p><p name=\"1-7d6c\"><br></p><p name=\"2-5959\">最近在做客户端开发的时候，遇到一些连点的问题。比如，点击某个按钮会调起一个webview来装载一个页面，调起webview的操作是异步的，但是完全没有\"调起中\"和\"调起后\"的回调或状态，这样就没办法在\"调起中\"这种状态下阻止用户的下一次点击。</p><p name=\"0-686b\">表现出来的现象是，用户点击过快的情况下，会连开几个页面。</p><p name=\"1-564f\"><br></p><p name=\"2-5901\">既然无法在过程中控制，那就只能在源头控制了：控制点击事件的触发频率。</p><p name=\"3-7a10\">很自然的我们想到了stopImmediatePropagation，它可以阻止\"同一个节点(还有后续节点)上其它相同事件监听函数\"的触发。</p><p name=\"4-6e69\">但是也有一些它阻止不了的，比如在本次绑定监听函数之前绑定的监听函数，这么说有点绕，举个例子：<span style=\"color: rgb(187, 187, 187); font-family: Menlo, Consolas; line-height: 22px; background-color: rgb(39, 40, 34);\"></span></p><div class=\"z-line-group ace ace_editor ace-monokai ace_dark\" name=\"0-88e5\" data-editorid=\"ace-0-88e5\" style=\"height: 160px;\">var $a = document.querySelector('a'); \n$a.addEventListener('click', function(){\n    console.log(1);\n}); \n$a.addEventListener('click', function(e){\n    e.stopImmediatePropagation();\n});\n$a.addEventListener('click', function(){\n    console.log(2);\n});</div><p name=\"20-bdd9\">这种情况下，第一次绑定的console.log(1)是阻止不了的。</p><p name=\"21-bb4a\">这种情况也好办，在公共文件的头部，加上这个事件阻止就万事大吉了。<br></p><p name=\"23-74a3\"><br></p><p name=\"24-6b74\">但还有另外一种情况：利用事件冒泡绑定的函数。这种情况就比较蛋疼了。因为你要确切的知道这个冒泡事件绑定的父节点，在这个父节点绑定一个相同类型的事件监听，才能阻止其他相同节点上事件监听函数的触发。</p><p name=\"25-793a\">在项目开始阶段注意这个问题就好办了，统一一下这个父节点的class，然后统一绑定一个限制频率的监听函数。</p><p name=\"26-9048\">到了项目优化阶段才意识到这个问题，改动成本就有些大了。</p><p name=\"28-9d3d\"><br></p><p name=\"27-9c4a\">最后贴一下限制频率的监听函数(以class为\"js-a\"的节点为目标节点，class为\"js-parent\"的节点为事件委托的父节点)：</p><div class=\"z-line-group ace ace_editor ace-monokai ace_dark\" name=\"1-5c03\" data-editorid=\"ace-1-5c03\" style=\"height: 224px;\">function frequent(el, e, interval){\n    if(el.clickTime &amp;&amp; new Date().getTime() - el.clickTime &lt; interval){\n        e.stopImmediatePropagation();\n    }\n    else{\n        el.clickTime = new Date().getTime();\n    }\n};\n$('.js-a').click(function(e){\n    frequent(this, e, 1000);\n});\n$('.js-parent').on('click', '.js-a', function(e){\n    frequent(this, e, 1000);\n});</div>\n\t\t\t\t<div class=\"z-line-group\" name=\"2-8a58\" cur=\"true\"><br></div>","brief":"\n\t\t\t\t\t关于ajax重复提交，已经是老生常谈了，相信各位早已有N种不同的解决方法了。传送门既然已经解决了重复提交的问题，那按钮连点也不存在什么问题了吧，为什么还要单独拿出来说呢？最近在做客户端开发","fav":[],"comment":0,"read":0},{"_id":"552a0f91a09127430f000001","url":"http://xwenliang.cn/p/552a0f91a09127430f000001","auther":"邢文亮","cata":"2","time":1431598500000,"title":"background-size:cover引发的思考","content":"\n\t\t\t\t\n\t\t\t\t\t<p name=\"1-8d87\">翻了翻以前的代码，发现有很多类似下面这样的地方：</p><div class=\"z-line-group ace-line\" name=\"0-be90\" data-editorid=\"ace-0-be90\" cur=\"true\">var src='xxx.jpg';\nvar $img = $('img');\n$img.css({\n    'background': 'url(' + src + ') center center no-repeat',\n    'background-size': 'cover'\n});</div><p name=\"9-8280\"><br></p><p name=\"10-57cc\">对于有轻度代码洁癖的人来说，这简直不能忍啊，这个background-size为什么会出现在这里，为什么不写在css里？</p><p name=\"11-540c\">努力回想了下当时的情形，好像是写到css里，再去js里面给background赋值的话，这条属性会失效。</p><p name=\"12-51e3\">为什么会失效呢？貌似不知道，但是一起写到这里就好了，并且还必须写到background属性的下面才好。</p><p name=\"13-9e30\">这大概就是\"基于巧合的编程\"吧。</p><p name=\"14-5fe3\"><br></p><p name=\"15-849f\">下面我们来看看它不生效的真正原因。</p><p name=\"0-a920\">最简单的方法，直接去浏览器里看这条属性是不是被\"腰斩\"了。</p><p name=\"16-b1e6\"><img src=\"/uploads/artical/1431598152416-%E9%82%A2%E6%96%87%E4%BA%AE141D964F-C19C-45D4-9DD4-D48A84B1B691.png\"></p><p name=\"1-7e20\"><br></p><p name=\"2-6ba7\">果然，不过想想也是，假如css里面有一条margin-top，再去行间写个margin，不覆盖才怪。</p><p name=\"3-bade\">所以它不生效的真正原因就是被background给覆盖掉了。</p><p name=\"4-5694\"><br></p><p name=\"5-af42\">正确的姿势应该是</p><p name=\"6-bfc5\"><img src=\"/uploads/artical/1431598367742-%E9%82%A2%E6%96%87%E4%BA%AE1EBAF93A-E680-432A-8F4E-F89A6B1D5472.png\"></p><p name=\"7-b48a\"><br></p><p name=\"8-9873\">这么简单的问题，当时居然都没有发现，还很自豪的以为自己发现了什么\"新大陆\"。想想着实可笑啊。</p>\n\t\t\t\t\n\t\t\t","brief":"\n\t\t\t\t\n\t\t\t\t\t翻了翻以前的代码，发现有很多类似下面这样的地方：var src='xxx.jpg';\nvar $img = $('img');\n$img.css({\n    'backgroun","fav":[],"comment":0,"read":0},{"_id":"5618b76d4544e24332000004","url":"http://xwenliang.cn/p/5618b76d4544e24332000004","auther":"邢文亮","cata":"4","time":1444733400000,"title":"querystring的坑","content":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t<div class=\"z-line-group\" name=\"0-8585\">记得上次博客改版的时候遇到过一个问题，感觉数据从前端post到服务端后发生了不正常的改变，</div><div class=\"z-line-group\" name=\"0-8585\">当时也没有多想，写了几行hack解决了。</div><div class=\"z-line-group\" name=\"0-8585\">幸亏当时留下了大量的注释，否则今天再看见那段hack肯定摸不着头脑：</div><div class=\"z-line-group ace-line\" name=\"1-b4de\" data-editorid=\"ace-1-b4de\" draggable=\"false\">req.body = querystring.parse(postData.join(''));\npostData = null;\n/*\t此处有坑:\n\t1.若前端传过来的value是个数组，则key会加'[]'后缀\n    如，前端post过来的data是{arr: [1,2,3]}，则实际接收时，key是'arr[]'\n    2.若传过来的数组中只有一个元素，实际接收到的value是这个元素\n    如，前端post过来的data是{arr: [1]}，则实际接收时，value是1\n */\nfor(var i in req.body){\n\t//命中1\n\tif(/^.+\\[\\]$/.test(i)){\n\t\t//命中2\n\t\tif(req.body[i].constructor != Array){\n\t\t\treq.body[i] = [req.body[i]];\n\t\t}\n\t\treq.body[i.replace('[]', '')] = req.body[i];\n\t\tdelete req.body[i];\n\t}\n}</div><div class=\"z-line-group\" name=\"0-8585\"><br></div><div class=\"z-line-group\" name=\"2-9ccc\">现在再看看这段代码，绝对是《基于巧合的编程》的典范啊，完全不知道json的序列化，如果接收的数据碰上是多个对象组成的数组<br></div><div class=\"z-line-group\" name=\"1-3c8f\">或者多维数组，绝对挂的体无完肤啊，好在前端也是自己写，没有传递更复杂的数据，\"恰好\"没有发生问题。</div><div class=\"z-line-group\" name=\"0-8585\"><br></div><div class=\"z-line-group\" name=\"0-8585\">但即使是传递的数据被序列化了，好像也不符合大多数前端库封装的ajax中对json序列化的规矩啊，如jQuery和Zepto，他们分别都是使用了$.param这个方法对传递的数据做处理：</div><div class=\"z-line-group ace-line\" name=\"0-677e\" data-editorid=\"ace-0-677e\" draggable=\"false\">//示例代码\nvar $ = require('jQuery');//或者Zepto\n//传递一维对象\nvar simple = {a: 1, b: 2};\n$.param(simple);\n//得到\n`a=1&amp;b=2`\n\n//传递二维或多维\nvar complex = {\n    a: [1, 2, 3],\n    b: [\n        {\n            c: 4,\n            d: 5,\n            e: 6\n        },\n        {\n            f: 7,\n            g: 8,\n            h: 9\n        }\n    ],\n    c: {\n        d: 10\n    }\n};\n$.param(complex);\n//将结果decodeURIComponent之后得到：\n`a[]=1&amp;a[]=2&amp;a[]=3&amp;\n b[0][c]=4&amp;b[0][d]=5&amp;b[0][e]=6&amp;\n b[1][f]=7&amp;b[1][g]=8&amp;b[1][h]=9&amp;\n c[d]=10`\n </div><div class=\"z-line-group\" name=\"0-8585\"><br></div><div class=\"z-line-group\" name=\"0-8585\">上面的结果大致可以看出json序列化的规律，其实我对其他语言都能约定俗成的使用同一规则表示惊奇。<br></div><div class=\"z-line-group\" name=\"0-8585\">但回过头看看我大node：</div><div class=\"z-line-group ace-line\" name=\"2-53c9\" data-editorid=\"ace-2-53c9\" draggable=\"false\">var querystring = require('querystring');\n//传递一维对象序列化后的字符串\nvar simple = 'a=1&amp;b=2';\nquerystring.parse(simple);\n//得到\n{a: '1', b: '2'}\n\n//传递二维或多维对象序列化后的字符串\nvar complex =\n`a[]=1&amp;a[]=2&amp;a[]=3&amp;\nb[0][c]=4&amp;b[0][d]=5&amp;b[0][e]=6&amp;\nb[1][f]=7&amp;b[1][g]=8&amp;b[1][h]=9&amp;\nc[d]=10`;\n \nquerystring.parse(complex);\n//得到：\n{ \n    'a[]': ['1', '2', '3'],\n    'b[0][c]': '4',\n    'b[0][d]': '5',\n    'b[0][e]': '6',\n    'b[1][f]': '7',\n    'b[1][g]': '8',\n    'b[1][h]': '9',\n    'c[d]': '10'\n}\n\n//并且\nquerystring.parse('a[]=1');\n//得到\n{\n    'a[]': 1\n}\n//还有url对象的url.parse(urlStr, true)，\n//官网明确说明解析query也使用了querystring.parse</div><div class=\"z-line-group\" name=\"0-8585\"><br></div><div class=\"z-line-group\" name=\"0-8585\">虽然说querystring可能不是标准的用于反序列化模块，<br></div><div class=\"z-line-group\" name=\"0-8585\">但url模块的parse函数，官网给出的<a href=\"https://nodejs.org/api/url.html\" target=\"_blank\">文档</a>上写着如果第二个参数传入true的话，最终url.parse得出来对象的query属性，将是一个解析了search的对象，并且是用querystring来解析的：</div><div class=\"z-line-group ace-line\" name=\"3-57ee\" data-editorid=\"ace-3-57ee\" draggable=\"false\">var url = require('url');\nurl.parse('http://localhost:3000/user?a[]=1&amp;a[]=2&amp;b[]=3#4', true);\n//将得到：\n{\n    protocol: 'http:',\n    slashes: true,\n    auth: null,\n    host: 'localhost:3000',\n    port: '3000',\n    hostname: 'localhost',\n    hash: '#4',\n    search: '?a[]=1&amp;a[]=2&amp;b[]=3',\n    query: { 'a[]': [ '1', '2' ], 'b[]': '3' },\n    pathname: '/user',\n    path: '/user?a[]=1&amp;a[]=2&amp;b[]=3',\n    href: 'http://localhost:3000/user?a[]=1&amp;a[]=2&amp;b[]=3#4'\n}</div><div class=\"z-line-group\" name=\"0-8585\"><br></div><div class=\"z-line-group\" name=\"0-8585\">也就是说，只有当前端传过来的数据是一维对象序列化的结果，才能被正确的解出来。所以才有了前面的笑话...<br></div><div class=\"z-line-group\" name=\"0-8585\">目前还没有发现node的哪个自带模块可以正常的反序列化，第三方的倒是有不少，推荐<a href=\"https://www.npmjs.com/package/qs\" target=\"_blank\">qs</a></div><div class=\"z-line-group\" name=\"0-8585\"><br></div><div class=\"z-line-group\" name=\"0-8585\" cur=\"true\">测试node版本：v0.10.35、v4.0.0、v4.1.1</div>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t","brief":"\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t记得上次博客改版的时候遇到过一个问题，感觉数据从前端post到服务端后发生了不正常的改变，当时也没有多想，写了几行hack解","fav":[],"comment":0,"read":0},{"_id":"54c09235c8dd347c05000001","url":"http://xwenliang.cn/p/54c09235c8dd347c05000001","auther":"sundonghan","cata":"3","time":1421906460000,"title":"PHP中this,self,parent的区别","content":"<p name=\"4-82eb\" cur=\"true\">PHP5经过重写后，对OOP的支持额有了很大的飞跃，成为了具备了大部分面向对象语言的特性的语言，比PHP4有了很多的面向对象的特性。这里我主要谈的是this,self,parent&nbsp;三个关键字之间的区别。从字面上来理解，分别是指这、自己、父亲。先初步解释一下，this是指向当前对象的指针（可以看成C里面的指针），self是指向当前类的指针，parent是指向父类的指针。</p><p name=\"5-7425\">code</p><pre name=\"8-91eb\"><ul><li>&lt;?php&nbsp;</li><li name=\"9-c105\">class&nbsp;FooClass&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;</li><li name=\"10-aebb\"><span class=\"tab\">    </span>public function&nbsp;testSelf() {</li><li name=\"11-b169\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return&nbsp;self::t();</li><li name=\"12-52c2\">&nbsp;&nbsp; &nbsp; }</li><li name=\"13-68a9\">&nbsp;&nbsp; &nbsp; public function&nbsp;testThis() {</li><li name=\"14-b457\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return&nbsp;$this::t();</li><li name=\"15-92d4\">&nbsp;&nbsp; &nbsp; }</li><li name=\"16-53f3\">&nbsp;&nbsp; &nbsp; public static function&nbsp;t() {</li><li name=\"17-5d44\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return&nbsp;'FooClass';</li><li name=\"18-9a83\">&nbsp;&nbsp; &nbsp; }</li><li name=\"19-68c7\">&nbsp;&nbsp; &nbsp; function&nbsp;__toString() {</li><li name=\"20-b627\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return&nbsp;'FooClass';</li><li name=\"21-523d\">&nbsp;&nbsp; &nbsp; }</li><li name=\"22-9b31\">&nbsp;}</li><li name=\"23-b4b6\">&nbsp;class&nbsp;BarClass&nbsp;extends&nbsp;FooClass&nbsp;{</li><li name=\"24-c10c\">&nbsp;&nbsp; &nbsp; public static function&nbsp;t() {</li><li name=\"25-589e\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return&nbsp;'BarClass';</li><li name=\"26-bfba\">&nbsp;&nbsp; &nbsp; }</li><li name=\"27-59a8\">&nbsp;}</li><li name=\"28-bef7\">&nbsp;$obj&nbsp;= new&nbsp;BarClass();</li><li name=\"29-9485\">&nbsp;print_r(Array(</li><li name=\"30-5c53\">&nbsp;&nbsp; &nbsp;&nbsp;$obj-&gt;testSelf(),</li><li name=\"31-5f04\"><span class=\"tab\">    </span>&nbsp;$obj-&gt;testThis(),</li><li name=\"32-b9d6\">&nbsp;));&nbsp;</li><li name=\"33-9c63\">?&gt;&nbsp;</li><li name=\"34-9ae4\" cur=\"true\">which outputs:&nbsp;&lt;pre&gt;&nbsp;Array&nbsp;(&nbsp;&nbsp; &nbsp; [0] =&gt; FooClass&nbsp;&nbsp; &nbsp; [1] =&gt; BarClass&nbsp;)&nbsp;&lt;/pre&gt;&nbsp; </li></ul></pre>","brief":"PHP5经过重写后，对OOP的支持额有了很大的飞跃，成为了具备了大部分面向对象语言的特性的语言，比PHP4有了很多的面向对象的特性。这里我主要谈的是this,self,parent&nbsp;三个关键","fav":[],"comment":0,"read":0},{"_id":"52dc96eed2a300e43c000001","url":"http://xwenliang.cn/p/52dc96eed2a300e43c000001","auther":"朱大哈","cata":"8","time":1390188240000,"title":"手机页面html元素点击时出现黄色框框的解决办法","content":"<p name=\"5acb\">相应的元素加入这个样式</p><p name=\"934e\">outline: none;</p><p name=\"70a7\">-webkit-tap-highlight-color: rgba(255, 255, 255, 0);</p><p name=\"b8b1\">-webkit-focus-ring-color: rgba(0, 0, 0, 0);</p>","brief":"相应的元素加入这个样式outline: none;-webkit-tap-highlight-color: rgba(255, 255, 255, 0);-webkit-focus-ring-colo","fav":[],"comment":0,"read":0},{"_id":"53951e924093e67742000001","url":"http://xwenliang.cn/p/53951e924093e67742000001","auther":"邢文亮","cata":"1","time":1404890220000,"title":"移动设备横竖屏之终极解决方案","content":"<p name=\"7499\">移动开发项目中，我们经常会遇到一个蛋疼的横竖屏切换问题，因为浏览器不像Native可以自主控制是否允许横竖屏切换。只能同时兼容它横屏和竖屏下的样式了。</p><p name=\"6cb7\">要实现区分横竖屏样式，可以有两种方式：</p><p name=\"8059\"><br></p><p name=\"a814\">1.利用高级浏览器的window.orientation属性和onorientationchange事件，实时监听横竖屏</p><p name=\"5255\">window.orientation属性给出了当前浏览器的屏幕方向，0是正常的竖屏状态，以此为基准，90是左转90度横屏，-90是右转90度横屏。然后旋转180度后的上下颠倒，目前本人手机还不支持（ios7.1&amp;android4.4）。</p><p name=\"a8e3\">onorientationchange事件，就像普通的click事件一样，不过是在屏幕发生旋转的时候会触发。</p><p name=\"9557\">结合这两者，我们可以想象，给window添加onorientationchange事件监听，然后在回调中判断window.orientation的值，就可以区分出横屏、竖屏了。</p><p name=\"a85a\">那么对于不支持这两个东西的普通浏览器（例如chrome的模拟内核，就不支持..）如何做到区分横竖屏呢？之前我想到的方法是利用onresize事件，然而某些傻逼浏览器，在上下滑动的时候居然也会频繁触发这个事件。直到后来发现了更好的方法：实时的对比屏幕当前的宽高window.innerWidth和window.innerHeight。如果前者大于后者，说明是横屏状态，相反则为竖屏状态。</p><p name=\"584c\"><br></p><p name=\"83bc\">2.利用media query实现横竖屏样式控制</p><pre name=\"54af\"><ul><li>@media all and (orientation:landscape){</li><li>    xxxx<br></li><li>}</li><li> </li><li>@media all and （orientation:portrait){</li><li>    xxxx<br></li><li>}</li></ul></pre><p name=\"9b69\">上面和下面分别对应横竖、竖屏下的样式。</p>","brief":"移动开发项目中，我们经常会遇到一个蛋疼的横竖屏切换问题，因为浏览器不像Native可以自主控制是否允许横竖屏切换。只能同时兼容它横屏和竖屏下的样式了。要实现区分横竖屏样式，可以有两种方式：1.利用高级","fav":[],"comment":0,"read":0},{"_id":"52cbc7e114e98b7623000010","url":"http://xwenliang.cn/p/52cbc7e114e98b7623000010","auther":"邢文亮","cata":"1","time":1393212900000,"title":"Javascript中对象的有序无序问题","content":"<p name=\"be5a\">前些天看到一个奇怪的现象：</p><p name=\"9bf9\">有的同学，想得到一个有序的数据集合，但是后台GG却给了他一个json的结构，并且他们还成功的完成了这个功能...</p><p name=\"8cfa\"><br></p><p name=\"9dd2\">当时我就范嘀咕，差点三观尽毁。难道js中的对象是有序的？我怎么一直记得是无序的啊。然后赶紧做了个呆猫试试：</p><p name=\"6179\"><img src=\"/uploads/artical/QQ图片20140224110313.jpg\"></p><p name=\"96ef\">吓！？果然是有序的吗...</p><p name=\"728f\">有点不甘心，一口气写了几十个，a-z写完了，发现依然是按先后次序输出的...不仅如此，后插入的，也会最后输出</p><p name=\"7bf7\"><img src=\"/uploads/artical/QQ图片20140224110632.jpg\"></p><p name=\"6398\"><br></p><p name=\"b86d\">有点崩溃了，转而求助于python：</p><p name=\"600b\"><img src=\"/uploads/artical/20140224111219.jpg\"></p><p name=\"79a2\"><img src=\"/uploads/artical/QQ图片20140224111858.jpg\"></p><p name=\"c1d4\"><img src=\"/uploads/artical/20140224111313.jpg\"></p><p name=\"a3f8\">发现，我大python还是很有节操的没有按序输出..<br></p><p name=\"ad50\"><br></p><p name=\"ad50\">但是上面的结果能够说明js中对象是有序的吗？我们只用了字母作为key，是不是有点特殊呢？何不再来几发更特殊的呢，比如数字啥的：</p><p name=\"b786\"><img src=\"/uploads/artical/QQ图片20140224112911.jpg\"></p><p name=\"6224\">这结果，真是劲爆啊，输出顺序竟然是 数字&gt;*&gt;字母，并且数字还会按照大小顺序升序排序，但是字母却不排序...</p><p name=\"beed\">我大js果然是如同脱缰的野马，让人捉摸不透啊...</p><p name=\"872b\">至于输出顺序为什么会是这样先不说，最起码可以证明<b>javascript的对象是无序的</b>了吧。</p><p name=\"5eed\">用的时候要小心呦，有序的话，还是用数组吧，虽然只能用默认下标，起码可靠嘛...</p>","brief":"前些天看到一个奇怪的现象：有的同学，想得到一个有序的数据集合，但是后台GG却给了他一个json的结构，并且他们还成功的完成了这个功能...当时我就范嘀咕，差点三观尽毁。难道js中的对象是有序的？我怎么","fav":[],"comment":0,"read":0},{"_id":"54c20225c8dd347c05000007","url":"http://xwenliang.cn/p/54c20225c8dd347c05000007","auther":"sundonghan","cata":"1","time":1422000660000,"title":"通过P3P头实现跨域设置cookie","content":"<p name=\"1-b4b4\">PHP的setcookie函数可以设置域，但是只能在当前域内，如果出现多域可由如下办法处理：实现原理：www.b.com/set_cookie.php &nbsp; 在b域名下设置a域名的cookie</p><p name=\"2-8640\">&lt;script src=\"http://www.a.com/set_cookie.php\"&gt;&lt;/script&gt;</p><p name=\"3-ac4b\">www.a.com/get_cookie.php &nbsp; 在a域名下获取cookie</p><p name=\"4-bd60\">print_r($_COOKIE);</p><p name=\"5-78ef\">www.a.com/set_cookie.php &nbsp; 在a域名下设置a域名的cookie</p><p name=\"6-5f05\">header('P3P: CP=\"CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR\"'); setcookie(\"test\", \"test value\", time()+3600, \"/\");</p><p name=\"7-6d4d\" cur=\"true\">实现过程：访问www.b.com/set_cookie.php，然后访问www.a.com/get_cookie.php就可以获取cookie其实，我在chrome不用P3P头也可以获取到cookie，但是IE不行，加上P3P头，IE也可以了。P3P（Platform for Privacy Preferences）正是一种可以提供这种个人隐私保护策略，一般浏览器都支持P3P协议。P3P header允许跨域访问隐私数据，从而可以跨域set-cookie成功</p>","brief":"PHP的setcookie函数可以设置域，但是只能在当前域内，如果出现多域可由如下办法处理：实现原理：www.b.com/set_cookie.php &nbsp; 在b域名下设置a域名的cookie","fav":[],"comment":0,"read":0},{"_id":"55acdd573c64f42b6a000001","url":"http://xwenliang.cn/p/55acdd573c64f42b6a000001","auther":"邢文亮","cata":"1","time":1438065120000,"title":"APP开发的这四个月","content":"<p name=\"14-9602\">从3月中旬就开始倒腾APP开发，到现在大概4个多月的时间，总结一下吧。</p><p name=\"15-6416\"><br></p><p name=\"16-6aa9\">以前天天听人说PhoneGap、webview，感觉一副很高大上的样子，如今机会终于来了，却发现效果真的很一般。</p><p name=\"17-62ec\">特别是在一些低端安卓机下，只放一个简单轮播图就会卡成狗，可能代码写的烂也是部分原因，但我觉得大部分原因应该不在这里。</p><p name=\"18-a7e7\"><br></p><p name=\"19-b731\">于是寻求其他的方案，从Cordova到Ionic，效果都不太理想，iOS平台上效果很好，到安卓下面就卡成狗，还仅仅只是放了几张轮播图而已。</p><p name=\"20-9186\">再后来，发现了DCloud HBuilder，怎么越写越像软文呢...</p><p name=\"21-707c\">都用人家的服务了，免费安利一下也是应该的吧...</p><p name=\"22-b614\"><br></p><p name=\"23-53bb\">看官方给的demo，无论android和iOS都是很流畅的。看它的实现原理才知道，比如下拉刷新，android平台下拉的是整个webview，整个webview的拉动跟随效果都是原生来实现的，所以会比dom的实现方式流畅很多。</p><p name=\"24-6f44\">官方提供了非常丰富的组件，直接拿来用就可以了，非常方便。</p><p name=\"25-b04d\"><br></p><p name=\"26-7f63\">我们就用这套东西，做了我们的产品1.0版本。</p><p name=\"27-88cc\">iOS平台效果非常好，但是也有几个瑕疵吧，如输入域可调起的键盘类型寥寥无几，切页动画跟原生稍有差异，跟原生代码只能异步调用等。</p><p name=\"28-73c3\">android平台，效果只能说是勉勉强强。上面iOS的问题它都有，并且由于webview在android平台下的差性能，页面渲染很差，切页的时候页面经常一块一块的出现。切页动画也略有卡顿（可能是我webview开多了，有近10个常驻的）。仔细优化一下效果应该是可以接受的。</p><p name=\"29-b522\"><br></p><p name=\"30-5642\">再后来发现，很多效果如果用原生来实现的话，只是一个view或一个组件的问题，而用web的方式实现则需要大量的hack代码，兼容性也不是很好，并且webview毕竟是webview，绘制界面、渲染动画的效率远远不如Native。</p><p name=\"31-70a5\">突然觉得如果注定只能用webview来\"模拟\"原生应用的话，那这条路肯定不怎么光明。</p><p name=\"32-be68\"><br></p><p name=\"33-6cf9\">还好ReactNative来了。</p><p name=\"34-7bc7\">虽然目前只有iOS端，但借助它我们终于摆脱了webview的限制。它依然依赖于各种现有组件，没有的话开发难度相当大，需要对js和oc都有一定的功底。但我相信这条路是光明的。</p><p name=\"35-b5a8\" cur=\"true\">目前正处于使用ReactNative重构的阶段，后续会写一些ReactNative开发的心得。</p>","brief":"从3月中旬就开始倒腾APP开发，到现在大概4个多月的时间，总结一下吧。以前天天听人说PhoneGap、webview，感觉一副很高大上的样子，如今机会终于来了，却发现效果真的很一般。特别是在一些低端安","fav":[],"comment":0,"read":0},{"_id":"565434f14b140eed5000000c","url":"http://xwenliang.cn/p/565434f14b140eed5000000c","auther":"邢文亮","cata":"1","time":1448359140000,"title":"React Native Navigator小结","content":"<div class=\"z-line-group\" name=\"0-fd1e\">双平台的开发工作进展到60%了，代码的可复用程度高的惊人，</div><div class=\"z-line-group\" name=\"1-d906\">配合ES6的<a href=\"http://tc39wiki.calculist.org/es6/spread/\" target=\"_blank\">spread</a>，只需要添加寥寥数行代码就可以很好的兼容双平台。</div><div class=\"z-line-group\" name=\"2-850b\"><br></div><div class=\"z-line-group\" name=\"3-42d8\">回头细化代码的时候，发现iOS有个坑，更确切的说是<a href=\"https://github.com/facebook/react-native/issues/1341\" target=\"_blank\">NavigatorIOS的坑</a>，</div><div class=\"z-line-group\" name=\"4-da9f\">具体表现在：如果设置隐藏navigationBar，那么右滑返回手势将失效，</div><div class=\"z-line-group\" name=\"5-f3e6\">并且官方开发者明确表示，这是<a href=\"http://holko.pl/ios/2014/04/06/interactive-pop-gesture/\" target=\"_blank\">Apple平台的特性</a>，他们将不会对此做支持...</div><div class=\"z-line-group\" name=\"6-8dcf\"><br></div><div class=\"z-line-group\" name=\"7-e0de\">Android平台也有问题，返回的时候，会在大概1/3的位置卡顿一下，但是</div><div class=\"z-line-group\" name=\"32-e58d\">我们查看了Navigator组件的代码，</div><div class=\"z-line-group\" name=\"8-6c02\">发现默认启用的动画配置是：</div><div class=\"z-line-group ace-line\" name=\"12-b590\" data-editorid=\"ace-10-9e8c\" data-language=\"javascript\">//node_modules/react-native/Libraries/Components/CustomComponents/Navigator/Navigator.js 268行\ngetDefaultProps: function() {\n  return {\n      configureScene: () =&gt; NavigatorSceneConfigs.PushFromRight,\n      sceneStyle: styles.defaultSceneStyle,\n  };\n}</div><div class=\"z-line-group\" name=\"11-5a42\"><br></div><div class=\"z-line-group\" name=\"13-64be\">而这个NavigatorSceneConfigs.PushFromRight引用的是：</div><div class=\"z-line-group ace-line\" name=\"31-1b46\" data-editorid=\"ace-15-fc23\" data-language=\"javascript\">//与上面代码文件同目录的NavigatorSceneConfigs.js 487行\nvar BaseConfig = {\n  // A list of all gestures that are enabled on this scene\n  //此处是开启右滑返回手势\n  gestures: {\n    pop: BaseLeftToRightGesture,\n  },\n\n  // Rebound spring parameters when transitioning FROM this scene\n  springFriction: 26,\n  springTension: 200,\n\n  // Velocity to start at when transitioning without gesture\n  defaultTransitionVelocity: 1.5,\n\n  // Animation interpolators for horizontal transitioning:\n  animationInterpolators: {\n    into: buildStyleInterpolator(FromTheRight),\n    out: buildStyleInterpolator(FadeToTheLeft),\n  },\n};\n\nvar NavigatorSceneConfigs = {\n  PushFromRight: {\n    ...BaseConfig,\n    // We will want to customize this soon\n  }\n  //其他定义好的动画\n};</div><div class=\"z-line-group\" name=\"16-2f4e\"><br></div><div class=\"z-line-group\" name=\"20-244c\">我们可以看到，这个动画配置里面有一系列的相关参数，其中与动画过程相关的就是animationInterpolators这个属性，</div><div class=\"z-line-group\" name=\"21-39f3\">它分别定义了进场和出场的动画（这些进出场动画在该文件顶部都有定义）</div><div class=\"z-line-group\" name=\"22-8266\">了解了这些配置，我们就可以灵活定义各种进出场动画了，例如：</div><div class=\"z-line-group ace-line\" name=\"29-f0e0\" data-editorid=\"ace-25-e6cd\" data-language=\"javascript\">&lt;Navigator  \n\tstyle={styles.container}\n\tref={(navigator) =&gt; {\n\t\tif(navigator !== this._navigator){\n\t\t\tthis._navigator = navigator;\n\t\t}\n\t}}\n\tinitialRoute={{\n\t\tcomponent: Index,\n\t\tpassProps: { \n\t\t\tselectedTab: 2,\n\t\t},\n\t}}\n\trenderScene={(route, navigator) =&gt; {\n\t\tvar Component = route.component;\n\t\treturn (\n\t\t\t&lt;Component navigator={navigator} {...route.passProps} /&gt;\n\t\t);\n\t}}\n\t//配置动画\n\tconfigureScene={(route) =&gt; {\n\t\tif(route.sceneConfig){\n\t\t\treturn route.sceneConfig;\n\t\t}\n\t\tvar sceneConfig = {\n\t\t    //下面一行定义了想要继承哪个动画的属性\n\t\t\t...Navigator.SceneConfigs.FloatFromRight,\n            //此处书写想要改变的属性，如定义进出场动画的animationInterpolators等\n\t\t};\n\t\treturn sceneConfig;\n\t}}\n/&gt;</div><div class=\"z-line-group\" name=\"26-343a\"><br></div><div class=\"z-line-group\" name=\"30-584a\">涉及到iOS平台，要么不隐藏navigationBar，使用NavigatorIOS自带的右滑返回，</div><div class=\"z-line-group\" name=\"33-701f\">如果一定要隐藏navigationBar，那就只能使用Navigator，然后定义一组跟原生进出场动画相同的动画了。</div><div class=\"z-line-group\" name=\"34-8549\"><br></div><div class=\"z-line-group\" name=\"35-4bd1\" cur=\"true\">react-native版本：0.14.2</div>","brief":"双平台的开发工作进展到60%了，代码的可复用程度高的惊人，配合ES6的spread，只需要添加寥寥数行代码就可以很好的兼容双平台。回头细化代码的时候，发现iOS有个坑，更确切的说是NavigatorI","fav":[],"comment":0,"read":0},{"_id":"52f58aca31dbf3a112000002","url":"http://xwenliang.cn/p/52f58aca31dbf3a112000002","auther":"朱大哈","cata":"8","time":1391823540000,"title":"zepto.js使用注意事项","content":"<p name=\"892c\">前段时间完成了公司一个产品的 HTML5 触屏版，开发中使用了&nbsp;Zepto&nbsp;这个著名的 DOM 操作库。为什么不是 jQuery 呢？因为 jQuery 的目标是兼容所有主流浏览器，这就意味着它的大量代码对移动端的浏览器是无用或者低效的。而 Zepto 只针对移动端浏览器编写，因此体积更小、效率更高，更重要的是，它的 API 完全仿照 jQuery ，所以学习成本也很低。虽然不兼容ie但是提供了一个兼容方法：<br></p><p name=\"647a\"></p><p name=\"8b8f\"></p><p name=\"9b64\"></p><p name=\"81b2\"></p><p name=\"6f57\"></p><pre>&lt;script&gt;\ndocument.write('&lt;script src=' +\n('__proto__' in {} ? 'zepto' : 'jquery') +\n'.js&gt;&lt;\\/script&gt;')\n&lt;/script&gt;因为他跟jquery的API是兼容的，所以就不用担心在ie上引用了jquery后事件那些会失效，除了触摸等一些。。</pre><p name=\"c324\">但是在开发过程中，我发现 Zepto 还远未成熟，其中包含了一些或大或小的“坑”，与 jQuery 的差距还是很明显的，所以写篇文章记录下，希望对后来者有帮助注意，本文撰写时 Zepto 版本为 1.0 正式版</p><p name=\"6b6c\"><br></p><p name=\"8dfa\"><b>从哪里下载 Zepto</b></p><p name=\"9f9b\">这个问题看起来很蠢，从官网（http://zeptojs.com）下载不就行了嘛！可是你有没有发现下载链接上面有行小字呢？</p><p name=\"65c7\"></p><p name=\"b1db\">There are more modules; a list of all modules is available in the README.</p><p name=\"7d38\"></p><p name=\"aa9e\">在这个&nbsp;README&nbsp;里面你会惊奇地发现，Zepto 源码中有 14 个模块，而官网提供的标准版里面只有 7 个模块！而且居然不包含对移动端开发非常重要的 touch 模块（提供对触摸事件的支持）！所以我的建议是，不要从官网下载，而是从 Github 下载了源代码之后自己 Build 一个版本，这样你可以自行挑选适合的模块。比如我挑选的模块是这么几个：</p><p name=\"604a\">polyfill，zepto，detect，event，ajax，form，fx&nbsp;这7个就是标准版包含的模块fx_methods&nbsp;有了这个模块之后，.show() .hide() 等几个方法才能支持动画了，比如&nbsp;.show('fast')data&nbsp;提供对 .data() 方法的完整支持，像 jQuery 一样用内存对象存储assets&nbsp;移除 img 元素后做一些特殊处理，用来清理内存selector&nbsp;更多的选择器的支持，后面会提到touch&nbsp;对触摸事件的支持，比如 tap 事件</p><p name=\"c217\">如果你对 Node 不了解不知道如何 Build 的话，可以下载我的版本</p><p name=\"5ad5\"><br></p><p name=\"5385\"><b>不要用 click 事件，用 tap 代替</b></p><p name=\"6fe2\">这个估计已经广为人知了，因为 click 事件有 200~300 ms 的延迟，为了更快的响应，最好用 Zepto 提供的 tap 事件不相信的话，可以用以下代码测试一下</p><p name=\"5ba4\"></p><p name=\"597a\"></p><p name=\"7b31\"></p><pre>var t1,t2;\n$('#id').tap(function () {\n    t1 = Date.now();\n});\n$('#id').click(function () {\n    t2 = Date.now();\n    alert(t2 - t1);\n});\n</pre><p name=\"ba21\"></p><p name=\"4e70\"></p><p name=\"701b\"></p><p name=\"75e4\"><b><br></b></p><p name=\"75e4\"><b>Zepto 对 CSS 选择器的支持</b></p><p name=\"91c3\">郑重提醒，:text :checkbox :first&nbsp;等等在 jQuery 里面很常用的选择器，Zepto 不支持！原因很简单，jQuery 通过自己编写的 sizzle 引擎来支持 CSS 选择器，而 Zepto 是直接通过浏览器提供的&nbsp;document.querySelectorAll&nbsp;接口。这个接口只支持标准的 CSS 选择器，而上面提到的那些属于&nbsp;jQuery 选择器扩展，所以仔细看看这个网页，注意一下这些选择器。</p><p name=\"8a51\"><br></p><p name=\"ad7d\">当然也有好消息，就是上面提到的 selector 模块，如果有这个模块的话，能够支持&nbsp;部分&nbsp;的 jQuery 选择器扩展，列举如下：</p><p name=\"8b42\">:visible :hidden</p><p name=\"8bdc\">:selected :checked</p><p name=\"aa9f\">:parent:first :last :eq</p><p name=\"9d55\">:contains :has</p><p name=\"860e\"><br></p><p name=\"a2ad\"><b>元素的尺寸计算</b></p><p name=\"76df\">首先 Zepto 没有 .innerHeight() .outerWidth() 等四个方法，其次，它的 .height()/.width() 方法也不完善，对于&nbsp;display:none&nbsp;的元素，计算出的高宽都是 0而这在 jQuery 里面是没有问题的，因为 jQuery 针对这种元素，会先设置其 css 样式设置为position: \"absolute\", visibility: \"hidden\", display: \"block\"&nbsp;计算完高宽后再恢复，参见&nbsp;https://github.com/jquery/jquery/blob/master/src/css.js#L460如果遇到这种特殊情况，可以参考 jQuery 写一个类似的方法</p><p name=\"b7de\"><br></p><p name=\"9436\"><b>.prop() 方法的陷阱</b></p><p name=\"ad9d\">有次我要把一个文本框置为只读，写了这么一行&nbsp;$('#text').prop('readonly', true)&nbsp;结果死活不工作找了半天才发现，正确的写法是这样&nbsp;$('#text').prop('readOnly', true)&nbsp;，如果你居然看不出两者的差别，那么悄悄提示你：注意大小写！翻了一下相关的文档，原来只读属性的正确拼法确实是 readOnly，可是在 jQuery 里面上一段代码却能正常工作于是到 jQuery 源码里面一找才发现，还有这么一段&nbsp;https://github.com/jquery/jquery/blob/master/src/attributes.js#L466</p><p name=\"8ea5\"></p><p name=\"ace8\"></p><p name=\"63e3\"></p><pre>jQuery.each([\n    \"tabIndex\",\n    \"readOnly\",\n    \"maxLength\",\n    \"cellSpacing\",\n    \"cellPadding\",\n    \"rowSpan\",\n    \"colSpan\",\n    \"useMap\",\n    \"frameBorder\",\n    \"contentEditable\"\n], function() {\n    jQuery.propFix[ this.toLowerCase() ] = this;\n});\n</pre><p name=\"989f\"></p><p name=\"a765\"></p><p name=\"7226\"></p><p name=\"a285\">从这里也能看到，jQuery 的成熟度真是难以超越，因为他把我们都惯坏了……考虑到这段代码比较简单，我厚颜无耻地抄袭了一下然后给 Zepto 提了一个&nbsp;pull request&nbsp;，如果你们喜欢这种无脑的用法，可以去评论表达支持（记得用英文）</p><p name=\"b030\"><br></p><p name=\"be1f\"><b>.show() 的动画效果</b></p><p name=\"822e\">如果没有 fx_mehods 模块的话，.show() 方法是不支持动画的，不过有了这模块后，动画的支持还是有点小问题，比如这么一段 HTML</p><p name=\"6135\"></p><p name=\"9b70\"></p><p name=\"5092\"></p><pre>&lt;div&gt;\n    test\n&lt;/div&gt;\n</pre><p name=\"9fee\"></p><p name=\"a4ec\"></p><p name=\"aaed\"></p><p name=\"5182\">如果你调用&nbsp;$('div').show('fast')&nbsp;，那么动画完成后你看到的不会是一个半透明的元素，而是全黑不透明的因为 Zepto 的 .show() 动画实现的很简单，没有高宽的变化，而是将透明度从 0 逐渐变为 1，所以元素上原来设置的透明度就被替代了。这种情况下，可以用 .fadeIn() 方法来替代 .show()</p><p name=\"789c\">、</p>","brief":"前段时间完成了公司一个产品的 HTML5 触屏版，开发中使用了&nbsp;Zepto&nbsp;这个著名的 DOM 操作库。为什么不是 jQuery 呢？因为 jQuery 的目标是兼容所有主流浏览器","fav":[],"comment":0,"read":0},{"_id":"57ea7ef7866ef7873c000060","url":"http://xwenliang.cn/p/57ea7ef7866ef7873c000060","auther":"邢文亮","cata":"4","time":1474985700000,"title":"树莓派raspberry连接蓝牙音箱播放音乐的小折腾","content":"<div class=\"z-line-group\" name=\"0-93b0\">前段时间入手了一个树莓派，一直没怎么折腾，最近事情少就打算搞一搞。</div><div class=\"z-line-group\" name=\"1-b176\">前面装系统，各种配置都不在话下，让我惊奇的是官方提供的系统：RASPBIAN JESSIE(2016-05-27)版本居然内置了Nodejs，虽然版本只有v0.10.29。</div><div class=\"z-line-group\" name=\"3-7533\">所以后续提到的折腾都是在2016-05-27这个版本下。</div><div class=\"z-line-group\" name=\"4-a41d\">先是更新所有软件包：</div><div class=\"z-line-group\" name=\"5-efe2\">sudo apt-get update</div><div class=\"z-line-group\" name=\"6-4f82\">sudo apt-get upgrade</div><div class=\"z-line-group\" name=\"7-b7ac\"><br></div><div class=\"z-line-group\" name=\"8-5a37\">再通过raspi-config图形界面修改各种配置：</div><div class=\"z-line-group\" name=\"13-6f51\">Timezone(时区，选择Asia---Shanghai)</div><div class=\"z-line-group\" name=\"14-ebf2\">Keyboard(键盘，选择United States---English(US))</div><div class=\"z-line-group\" name=\"9-d9c5\"><br></div><div class=\"z-line-group\" name=\"15-2aa7\">看起来一切都棒棒哒，拿它干点啥用呢，首先是连接比较麻烦，总不能一直给它单独配上鼠标键盘显示器吧，那就先让它联网后自动播报IP地址吧</div><div class=\"z-line-group\" name=\"16-9881\">装上mplayer，scp过去一小段音乐，插上耳机发现根本木有声音啊。。。</div><div class=\"z-line-group\" name=\"17-aa62\">Google一番后，再次通过raspi-config进入设置，Advanced Options -&gt; Audio -&gt; Force 3.5mm('headphone')jack</div><div class=\"z-line-group\" name=\"19-ad00\">然后就有声了，Google果然是万能的。。。</div><div class=\"z-line-group\" name=\"20-ffd7\"><br></div><div class=\"z-line-group\" name=\"21-bac1\">但是每次都带着耳机听IP是不是有点蠢啊，最好指定一个接口，让他自动播报到这个接口上去，嗯这个比较靠谱，后面搞搞。</div><div class=\"z-line-group\" name=\"22-ac37\">正好手头有个蓝牙音箱，再折腾下连接蓝牙音响吧。</div><div class=\"z-line-group\" name=\"23-73f7\">这个版本带的东西比较全，Google上说的pulseaudio、pulseaudio-module-bluetooth啥的都有了，那直接开始搞吧。</div><div class=\"z-line-group\" name=\"24-be3d\">通过bluetoothctl命令进入配置环境，</div><div class=\"z-line-group\" name=\"25-f845\">scan on扫描到我的设备后，</div><div class=\"z-line-group\" name=\"26-439b\">scan off关掉扫描，</div><div class=\"z-line-group\" name=\"27-abb2\">pair MAC地址，成功，</div><div class=\"z-line-group\" name=\"28-46b4\">trust MAC地址，添加到信任列表，</div><div class=\"z-line-group\" name=\"29-77db\">connect MAC地址。。。然后就报错了，说是：Failed to connect: org.bluez.Error.Failed</div><div class=\"z-line-group\" name=\"30-3b2e\"><br></div><div class=\"z-line-group\" name=\"31-de1e\">然后发现Google就不万能了。。。搜索了很久也没找到正确答案，期间还怀疑人生重装过一次系统。。。问题仍然存在</div><div class=\"z-line-group\" name=\"32-f405\">根据广大网友们提的问题和答案来推测，应该是pulseaudio的锅，但是哪里出问题了呢，难道是这货没启动吗？</div><div class=\"z-line-group\" name=\"34-fb3a\">直接输入pulseaudio，回车后一串红数字：bluez4-util.c: org.bluez.Manager.GetProperties()....</div><div class=\"z-line-group\" name=\"37-a632\">看到这些又一脸茫然了，这难道是这个版本的bug？不能吧，如果存在这么大的bug不应该被放到官网上好几个月没人管吧。。</div><div class=\"z-line-group\" name=\"39-ae3b\">感觉是自己姿势不对，所以看看这货的说明吧：pulseaudio -h</div><div class=\"z-line-group\" name=\"40-bde8\"><br></div><div class=\"z-line-group\" name=\"42-1b10\">出来一大堆的配置，看到有kill，和options，既然pulseaudio -k是杀掉程序，那启动是什么呢，然后看到了options的第一个参数：-D，那就试试好了，执行pulseaudio -D，，，</div><div class=\"z-line-group\" name=\"43-c6a7\">神奇的事情发生了，再去connect我的蓝牙音响的时候终于提示connecttion successful</div><div class=\"z-line-group\" name=\"44-a09d\"><br></div><div class=\"z-line-group\" name=\"45-7234\">然而到这里还没有结束，虽然连上了但还是没有声音，我忍不住要狠狠吐槽下这些蓝牙音响：</div><div class=\"z-line-group\" name=\"46-d340\">1. 开关机声音震天响，不能调节，不能关闭，简直了，害的我每次都要把它捂得严严实实的怕影响同事</div><div class=\"z-line-group\" name=\"47-db10\">2. 不管连接没连接，几分钟后没有动作的话，会自动关闭，仍然不能更改设置，和1组合起来简直是没谁了</div><div class=\"z-line-group\" name=\"50-a12a\"><br></div><div class=\"z-line-group\" name=\"51-a0f5\">问题总要解决的，继续Google吧，找了大半天才找到它：<a href=\"http://plugable.com/2016/03/14/listening-to-bluetooth-audio-on-your-raspberry-pi-3-pi-2-or-pi-zero\" target=\"_blank\">传送门</a></div><div class=\"z-line-group\" name=\"36-dac7\">在安装了pavucontrol并reboot后，终于在菜单中看到了Sound &amp; Video选项，打开后在Playback选项卡里给mplayer选择蓝牙音箱作为音频输出，终于有声音了。。。感动的热泪盈眶</div><div class=\"z-line-group\" name=\"52-338c\"><br></div><div class=\"z-line-group\" name=\"53-80c6\">后来发现如果不先执行pulseaudio -D的话，这个Sound &amp; Video选项也是打不开的，其实这些图形界面的操作也是更改了某些配置文件而已，直接更改配置文件应该更简单高效，后续有时间再看吧。</div><div class=\"z-line-group\" name=\"54-aa19\"><br></div><div class=\"z-line-group\" name=\"55-8a2c\" cur=\"true\">接下来就是看看如何开机启动pulseaudio，然后连接蓝牙音箱进行播报IP了</div>","brief":"前段时间入手了一个树莓派，一直没怎么折腾，最近事情少就打算搞一搞。前面装系统，各种配置都不在话下，让我惊奇的是官方提供的系统：RASPBIAN JESSIE(2016-05-27)版本居然内置了Nod","fav":[],"comment":0,"read":0},{"_id":"54b6482a916e14f84a00000d","url":"http://xwenliang.cn/p/54b6482a916e14f84a00000d","auther":"sundonghan","cata":"3","time":1421232120000,"title":"动态缓存技术之CSI,SSI,ESI","content":"<p name=\"3-967f\">平常我们谈到网络缓存技术，大多是以页面为单位的，比如，新闻网站中将执行后的结果，缓存为一个静态html文件，下次访问时就直接访问这个静态页面了！减轻了服务器压力！但是，如果一个页面大部分是可静态的，但是有一部分却需要是动态的咋办呢？ 如下图中画红线处，就需要动态，时时探测用户是否登录！这就可以使用动态内容缓存技术！</p><p name=\"4-64f2\">动态内容缓存技术，总体来说就是该静态化的静态化，该动态的保持动态，最后进行组合！</p><p name=\"5-98d3\">可行的方案大致有三种： CSI , SSI ,ESI</p><p name=\"6-7304\">&nbsp;</p><p name=\"7-a115\">一、CSI (Client Side Includes) &nbsp;&nbsp; 含义：通过iframe、javascript、ajax&nbsp; 等方式将另外一个页面的内容动态包含进来。</p><p name=\"8-7ce8\">&nbsp;&nbsp; 原理：整个页面依然可以静态化为html页面，不过在需要动态的地方则通过iframe,javascript或ajax来动态加载！</p><p name=\"9-972f\">&nbsp;&nbsp; 例子：&lt;iframe src='http://abroad.e2bo.com/index.php' border='0'&gt;&lt;/iframe&gt;</p><p name=\"10-5dad\">&nbsp;&nbsp; 优点：相对比较简单，不需要服务器端做改变和配置；</p><p name=\"11-bc6f\">&nbsp;&nbsp; 缺点：不利于搜索引擎优化(iframe方式), javascript兼容性问题，以及客户端缓存问题可能导致更新后不能及时生效！对于客户体验也不够好！</p><p name=\"12-8ab2\">&nbsp;</p><p name=\"13-6c3b\">二、SSI（Server Side Includes）</p><p name=\"14-6c78\">&nbsp;&nbsp; 含义：通过注释行SSI命令加载不同模块，构建为html，实现整个网站的内容更新；</p><p name=\"15-8e71\">&nbsp;&nbsp; 原理：通过SSI调用各模块的对应文件，最后组装为html页面，需要服务器模块支持(具体配置本文不做详述)，比如：apache服务器需要开启mod_include模块；</p><p name=\"16-ba61\">&nbsp;&nbsp; 例子：</p><p name=\"17-6d19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--#include virtual=\"header.html\" --&gt;</p><p name=\"18-b557\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--#include virtual=\"login.html\" --&gt;</p><p name=\"19-83f5\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--#include virtual=\"footer.html\" --&gt;</p><p name=\"20-56cf\">&nbsp;&nbsp; 优点：不受具体语言限制，比较通用，只需要Web服务器或应用服务器支持即可，Ngnix、Apache、IIS等对此都有较好的支持。</p><p name=\"21-bb7a\">&nbsp;&nbsp; 缺点：SSI只能在当前服务器上包含加载，不能够直接包含其他服务器上的文件，即不能跨域包含；</p><p name=\"22-74c5\">&nbsp;</p><p name=\"23-7338\">三、ESI（Edge Side Includes）</p><p name=\"24-5d44\">&nbsp;&nbsp;&nbsp; 含义及原理：</p><p name=\"25-4eb8\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 网上通用的解释如下：通过使用简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，每个网页都被划分成不同的小部分分别赋予不同的缓存控制 策略，使Cache服务器可以根据这些策略在将完整的网页发送给用户之前将不同的小部分动态地组合在一起。通过这种控制，可以有效地减少从服务器抓取整个页面的次数，而只用从原服务器中提取少量的不能缓存的片断，因此可以有效降低原服务器的负载，同时提高用户访问的响应时间。与SSI不同的是，ESI多在缓存服务器或代理服务器上执行！</p><p name=\"26-a298\">&nbsp;&nbsp; 例子：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p name=\"27-654e\">&lt;html&gt;     &lt;head&gt;         &lt;title&gt;ESI Demo&lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;</p><p name=\"28-a14e\">&nbsp;</p><p name=\"29-a934\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;esi:include src=\"login.php\" /&gt;</p><p name=\"30-bac9\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h3&gt;这中间是可静态化html内容&lt;/3&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt; &nbsp;&nbsp;&nbsp;&nbsp; &lt;/body&gt; &lt;html&gt;</p><p name=\"31-630f\">&nbsp;&nbsp; 优点：可用于缓存整个页面或页面片段，比较适合用于缓存服务器上；</p><p name=\"32-904b\">&nbsp;&nbsp; 缺点：目前支持ESI的软件还比较少，官方更新也略显缓慢，因此使用不是很广！</p><p name=\"33-a787\">&nbsp;</p><p name=\"34-97d1\">&nbsp; 结语，该文章仅仅是总结三个可用于动态内容缓存的方案，具体在项目中用不用，用哪个，那就需要具体情况具体分析了！</p><p name=\"35-bc04\">&nbsp;</p><p name=\"36-9ee6\" cur=\"true\">原文地址：http://hi.baidu.com/%D0%A1%BB%C6%BB%C6%C3%C3%C3%C3/blog/item/1471ee3efb7d9fd99e3d6228.html</p>","brief":"平常我们谈到网络缓存技术，大多是以页面为单位的，比如，新闻网站中将执行后的结果，缓存为一个静态html文件，下次访问时就直接访问这个静态页面了！减轻了服务器压力！但是，如果一个页面大部分是可静态的，但","fav":[],"comment":0,"read":0},{"_id":"572c849f866ef7873c000041","url":"http://xwenliang.cn/p/572c849f866ef7873c000041","auther":"邢文亮","cata":"1","time":1462535280000,"title":"React Native TextInput标签左右对齐的坑","content":"\n\t\t\t\t<div class=\"z-line-group\" name=\"0-f22f\">相信大家经常遇到如下设计：</div><div class=\"z-line-group\" name=\"1-9a33\"><img src=\"/upload/artical/788660ca91c84b26d9f154ecdaf4d519.jpg\"></div><div class=\"z-line-group\" name=\"2-cf00\">上图授权码处，左边一个Text做label，右边TextInput默认显示placeholder提示用户输入，</div><div class=\"z-line-group\" name=\"3-5db2\" cur=\"true\">web端大家都会用flex(inline-block)+line-height来分分钟搞定它，</div><div class=\"z-line-group\" name=\"6-1876\">然而到了RN端这个问题却好像没那么简单了：</div><div class=\"z-line-group\" name=\"8-8c1e\"><br></div><div class=\"z-line-group\" name=\"5-7b6e\">RN里面的line-height并不是web端的那种效果，并不能通过设置height＝lineHeight来使内容居中，具体效果：</div><div class=\"z-line-group\" name=\"56-a918\"><img src=\"/upload/artical/b0eb556a3aefa5c5751cca01497e5f36.jpg\"></div><div class=\"z-line-group\" name=\"58-8a34\"><br></div><div class=\"z-line-group\" name=\"9-f6eb\"><br></div><div class=\"z-line-group\" name=\"10-ef35\">机智的开发者们想到了justifyContent: 'center'，然而这个属性是View才具有的，没关系text和TextInput一人包一个View：</div><div class=\"z-line-group ace-line\" name=\"31-5b20\" data-editorid=\"ace-16-9f2d\" data-language=\"html\">&lt;View style={styles.textInput}&gt;\n    &lt;View style={styles.labelWrap}&gt;\n        &lt;Text style={styles.label}&gt;授权码&lt;/Text&gt;\n    &lt;/View&gt;\n    &lt;View style={styles.inputWrap}&gt;\n        &lt;TextInput\n            style={styles.input}\n            placeholder=\"请粘贴您的授权码\"\n            underlineColorAndroid='rgba(0,0,0,0)'\n        /&gt;\n    &lt;/View&gt;\n&lt;/View&gt;\n\nlet styles = StyleSheet.create({\n    textInput: {\n        marginTop: 50,\n        flexDirection: 'row',\n        borderTopWidth: 1,\n        borderBottomWidth: 1,\n        borderColor: '#ccc'\n    },\n    labelWrap: {\n        height: 40,\n        justifyContent: 'center'\n    },\n    label: {\n        fontSize: 14\n    },\n    inputWrap: {\n        height: 40,\n        justifyContent: 'center'\n    },\n    input: {\n        height: 40,\n        width: 250,\n        fontSize: 14\n    }\n});</div><div class=\"z-line-group\" name=\"13-5eb7\"><br></div><div class=\"z-line-group\" name=\"34-9ddd\">然而运行结果并不是想象中的那样：</div><div class=\"z-line-group\" name=\"32-7bbb\"><img src=\"/upload/artical/3a166d0a898ce039636279ec3a981536.jpg\"></div><div class=\"z-line-group\" name=\"33-54d6\"><img src=\"/upload/artical/1a3ecde2603621042351eaf0c7be9193.jpg\"></div><div class=\"z-line-group\" name=\"35-4752\">我们发现，iOS和Android都是input的内容会偏上一点点，</div><div class=\"z-line-group\" name=\"40-ebb0\">针对iOS端的截图进一步放大然后ps测量发现：（mac下截图所以是两倍）</div><div class=\"z-line-group\" name=\"38-dc66\">左侧Text：外框高度80px，字体26<b>px，上边距27px，下边距27px</b></div><div class=\"z-line-group\" name=\"43-624a\"><b>右侧TextInput：外框高度80px，字体26px，上边距28px，下边距26px</b></div><div class=\"z-line-group\" name=\"56-f62a\"><b><br></b></div><div class=\"z-line-group\" name=\"44-58d0\">明显是Text的锅。。。等等，来个奇数试试，将外框高度放到40.5，测量后发现</div><div class=\"z-line-group\" name=\"48-59a2\">左侧Text：外框高度81px，字体26px，上边距<b>26px</b>，下边距29px</div><div class=\"z-line-group\" name=\"51-177c\">右侧TextInput：外框高度81px，字体26px，上边距28px，下边距27px</div><div class=\"z-line-group\" name=\"57-6251\">这突然间TextInput做的要相对好一些了。。。</div><div class=\"z-line-group\" name=\"58-3ff1\"><br></div><div class=\"z-line-group\" name=\"59-e17b\">还有字体，应该28px才对嘛，为什么要比设定的14小1，在尝试了几个其他数字发现，</div><div class=\"z-line-group\" name=\"60-86d2\">这个数值所对应显示的真实像素，在接近8(16px)的时候是准确的，随着数字的增大误差会越来越大：</div><div class=\"z-line-group\" name=\"61-6e21\">2-&gt;5px</div><div class=\"z-line-group\" name=\"62-f2a1\">8-&gt;16px</div><div class=\"z-line-group\" name=\"63-ffde\">14-&gt;26px</div><div class=\"z-line-group\" name=\"64-c97c\">20-&gt;37px</div><div class=\"z-line-group\" name=\"65-6636\">25-&gt;46px</div><div class=\"z-line-group\" name=\"66-68d2\">当然肉眼辨识度可能有问题，权当娱乐了吧</div><div class=\"z-line-group\" name=\"67-28c9\"><br></div><div class=\"z-line-group\" name=\"71-a27c\">然后再去看看Text和TextInput本身：分别给两者设置border：</div><div class=\"z-line-group\" name=\"72-4ca3\"><img src=\"/upload/artical/0ddd15617d61b3ed47f405f9f967006a.jpg\"></div><div class=\"z-line-group\" name=\"73-5f12\">我们发现，好像貌似居中了呢？难道TextInput默认有个border？</div><div class=\"z-line-group\" name=\"75-2824\">赶紧把手动给TextInput设置的border去掉，我们发现依然是原来的显示效果，回头想想web端的input才恍然大悟，它一定是存在一个默认的border的。</div><div class=\"z-line-group\" name=\"76-80e1\">然后在尝试将TextInput的borderWidth设置为0后发现并没有任何作用，</div><div class=\"z-line-group\" name=\"77-3456\">所以只好给左侧的Text设置一个透明border了，问题至此已经解决</div><div class=\"z-line-group\" name=\"55-5f3b\"><img src=\"/upload/artical/4cf731d14b5d5409a33496c7a070e3d7.jpg\"></div>\n\t\t\t","brief":"\n\t\t\t\t相信大家经常遇到如下设计：上图授权码处，左边一个Text做label，右边TextInput默认显示placeholder提示用户输入，web端大家都会用flex(inline-block)","fav":[],"comment":0,"read":0},{"_id":"53f6c2d8058363192b000001","url":"http://xwenliang.cn/p/53f6c2d8058363192b000001","auther":"邢文亮","cata":"2","time":1408680780000,"title":"margin-top折叠","content":"<pre name=\"9f6c\"><ul><li>&lt;div class=\"a\"&gt;</li><li>    &lt;div class=\"b\"&gt;&lt;/div&gt;<br></li><li>&lt;/div&gt; </li></ul></pre><p name=\"6a96\">如上所述，如果这时候对b设置margin-top: 10px，那么a、b的margin-top将会折叠在一起，</p><p name=\"76e6\">产生的效果是a会margin-top: 10px，b没有效果。</p><p name=\"a095\">为什么叫做\"折叠\"呢？</p><p name=\"91a7\">因为如果你将b设置margin-top: 10px的同时，将a设置margin-top: 5px，那么效果跟上面只将b设置margin-top: 10px是同一个效果。也就是说，将a、b的margin-top折叠在了一起。</p><p name=\"ae03\"><br></p><p name=\"55bd\">那么折叠规则是什么呢？会取其大者。如果a、b都设置margin-top，会取其大者，将其应用于a。</p><p name=\"501c\">详细规则，见 <a href=\"http://www.w3.org/TR/CSS21/box.html#collapsing-margins\" target=\"_blank\">Box model</a></p><p name=\"68d2\"><br></p><p name=\"7707\">显然我们是想让b元素margin-top a元素，而不是让他们俩一起margin-top</p><p name=\"9778\">看了上面的详细规则后，我们得出以下解决方案：</p><p name=\"9fc5\">1.对a设置float</p><p name=\"7b76\">2.对a设置overflow（取值visible除外）</p><p name=\"54d4\">3.对a设置position: absolute/fixed</p><p name=\"beac\">4.对a设置display: inline-block</p><p name=\"c212\">5.对a设置border</p><p name=\"b327\">6.将b前面插入同级非空节点</p><p name=\"74df\"><br></p><p name=\"9b3a\"><br></p>","brief":"&lt;div class=\"a\"&gt;    &lt;div class=\"b\"&gt;&lt;/div&gt;&lt;/div&gt; 如上所述，如果这时候对b设置margin-top: 10p","fav":[],"comment":0,"read":0},{"_id":"528d9d24c5b0480536000006","url":"http://xwenliang.cn/p/528d9d24c5b0480536000006","auther":"邢文亮","cata":"1","time":1385019660000,"title":"JS中的延宕与GUI渲染","content":"<p name=\"96f5\">最近在做这个编辑器的时候，反复用到延宕的概念，在这里总结一下。</p><p name=\"5e9e\">先来看一段代码：</p><pre name=\"c2ef\"><ul><li>alert(1);</li><li>setTimeout(function(){</li><li>    alert(2);<br></li><li>}, 0);</li><li>alert(3); </li></ul></pre><p name=\"77fd\"></p><p name=\"930d\"></p><p name=\"95ff\"></p><p name=\"862b\"></p><p name=\"a5bc\">看上去应该是依次弹出1，2，3。点击运行后发现，弹出顺序却是1，3，2。为什么会这样呢？不是设置了0秒的延时吗？为啥还是跑到最后执行了。难道是因为这一步比较耗时，所以就先弹出了3？</p><p name=\"7a8c\"></p><p name=\"8ddf\">我们来试另一段代码：</p><pre name=\"65f5\"><ul><li>alert(1);</li><li>setTimeout(function(){</li><li>    alert(2);<br></li><li>}, 0);</li><li>new Array(1e8).join();</li><li>alert(3); </li></ul></pre><p name=\"76b4\"></p><p name=\"6743\"></p><p name=\"a2e9\"></p><p name=\"7fdc\"></p><p name=\"55e7\">运行后，我们发现，尽管在弹出3之前加了一步更耗时的操作，2依然要等到3执行了才会执行。这说明，setTimeout中的函数，是放到异步事件队列里面了，当前同步的代码执行完毕，才能开始事件轮询，然后才会开始执行。</p><p name=\"7d13\"></p><p name=\"5a04\">我们再来一段代码：</p><pre name=\"5c95\"><ul><li>$('.content').css('background', 'blue');</li><li>setTimeout(function(){</li><li>    $('.content').css('background', '#f9f9f9');<br></li><li>}, 5000);</li><li>new Array(1e8).join(); </li></ul></pre><p name=\"7dfb\"></p><p name=\"908a\"></p><p name=\"577a\"></p><p name=\"b286\"></p><p name=\"55e5\">第5行加了一步同步的耗时操作，我们发现第1行的代码，要等到第5行代码执行完毕才会开始执行，其实这个指令浏览器是瞬时接收到的，但是GUI渲染要等到同步操作执行完毕后才会开始执行。</p><p name=\"a991\">执行插入节点操作后，绑定事件的函数已经执行，然而GUI却还没有开始渲染。所以就会发生当我们动态创建节点并添加到dom的时候，新创建的元素上绑定的事件不执行的情况。高级浏览器可能有所改善，但IE8以下一定会出现这样的问题。</p><p name=\"aae8\">这说明，浏览器的执行顺序应该是：同步代码&gt;GUI渲染。</p><p name=\"506e\"><br></p><p name=\"590a\">那么GUI渲染和异步事件队列，哪个优先级高呢？</p><p name=\"6f28\">再看下面一段：</p><pre name=\"886d\"><ul><li>$('.content').css('background', 'blue');</li><li>setTimeout(function(){</li><li>    new Array(1e8).join();<br></li><li>    $('.content').css('background', '#f9f9f9');<span style=\"line-height: 1.5;\"> </span></li><li>}, 0);</li><li>new Array(1e8).join();</li><li>alert('done!'); </li></ul></pre><p name=\"b13c\"></p><p name=\"64bd\"></p><p name=\"6fbf\"></p><p name=\"a85c\"></p><p name=\"8d60\">我们发现，alert这货居然和body变色同时发生...也就是说，alert其实也会触发GUI渲染。</p><p name=\"979b\">既然它可以触发GUI渲染，那么它就一定可以阻塞JS的运行，我们一直不点确定，过很久之后再点，发现果然setTimeout里面的耗时操作还会发生，这说明浏览器的执行顺序： GUI渲染&gt;异步事件队列。</p><p name=\"7519\">等等，接着看下面：</p><pre name=\"9532\"><ul><li>$('.content').css('background', 'blue');</li><li>setTimeout(function(){</li><li>    new Array(1e8).join();<br></li><li>    $('.content').css('background', '#f9f9f9');</li><li>}, 0);</li><li>new Array(1e8).join(); </li><li>console.log('done'); </li></ul></pre><p name=\"786a\"></p><p name=\"a2be\"></p><p name=\"858e\"></p><p name=\"b157\"></p><p name=\"5e9d\">纳尼？这段代码和上面的差别只是把alert换成了console，可是body却不变色了？这又是什么原因呢？</p><p name=\"6ae0\">猜想可能是上面的那句alert，强制触发了页面渲染，所以浏览器运行完同步代码的时候，立马就进行了页面渲染。想想这也是合情合理的，因为alert也是浏览器窗口的视图，想要在同步代码执行完毕就立马显示，就必须强制触发页面渲染。。</p><p name=\"5117\">如果没有alert强制渲染，则要等到马上就要发生的异步事件队列里面的函数执行完毕后才发生渲染。</p><p name=\"8e29\">我实验了下，chrome下这个临界值在1500ms左右。</p><p name=\"5198\"><br></p><p name=\"575b\"></p><p name=\"aa6c\"></p><p name=\"6f84\"></p><p name=\"8f87\"><b>综上：</b></p><p name=\"b98c\">在同步代码有alert的情况下，浏览器的执行顺序为 同步代码&gt;GUI渲染&gt;异步事件队列。</p><p name=\"7307\">同步代码没有alert的情况下，浏览器的执行顺序为 同步代码&gt;(1500ms内的)异步事件队列&gt;GUI渲染&gt;(1500ms外的)异步事件队列</p><p name=\"7f07\"><br></p><p name=\"9a35\"><b>纠错：</b></p><p name=\"7521\">上面得出的临界值，应该跟显卡的运算能力有关，显卡越强劲，每秒渲染的帧数越多，那么这个临界值就越小。可以理解为：浏览器在接收到渲染请求后，会告诉显卡处理这个渲染，但是过了一小会浏览器再次告诉显卡要进行另外一个渲染，但是当前这个还没渲染完呢，那就直接把页面渲染成把两个结果结合起来的效果吧！(测试浏览器： chrome29)</p>","brief":"最近在做这个编辑器的时候，反复用到延宕的概念，在这里总结一下。先来看一段代码：alert(1);setTimeout(function(){    alert(2);}, 0);alert(3); 看","fav":[],"comment":0,"read":0},{"_id":"573ea374866ef7873c000047","url":"http://xwenliang.cn/p/573ea374866ef7873c000047","auther":"邢文亮","cata":"1","time":1463722860000,"title":"npm的又一记坑","content":"\n\t\t\t\t<div class=\"z-line-group\" name=\"0-bcbd\">以前开发npm包都是直接publish到npm官网，然后install下来使用，遇到有bug的情况就要反复上传新版本，很麻烦，</div><div class=\"z-line-group\" name=\"1-c923\">后来有小伙伴说可以使用本地目录或者github地址进行测试，今天正好打算尝试下，npm官方文档：</div><div class=\"z-line-group\" name=\"15-4363\"><br></div><div class=\"z-line-group\" name=\"2-1ac5\"><a href=\"https://docs.npmjs.com/files/package.json#local-paths\" target=\"_blank\">使用本地目录</a></div><div class=\"z-line-group\" name=\"3-5eb9\" cur=\"true\"><a href=\"https://docs.npmjs.com/files/package.json#urls-as-dependencies\" target=\"_blank\">使用github</a></div><div class=\"z-line-group\" name=\"4-83d2\"><br></div><div class=\"z-line-group\" name=\"5-5b6a\">知道了这些，我们就开始搞吧，先扯个本地目录写两行代码，然后到项目的package.json配上本地路径，npm install走你，，</div><div class=\"z-line-group\" name=\"6-e690\">报错了，那再试试放到github吧，依然报错，放到gitlab呢，还是报错。。。如图：</div><div class=\"z-line-group\" name=\"7-6443\"><img src=\"/upload/artical/24f9ece3759a33a13f838f11505e4d03.png\"></div><div class=\"z-line-group\" name=\"11-51fd\"><br></div><div class=\"z-line-group\" name=\"12-717a\">从错误日志来看，其实是因为这个仓库缺少了package.json文件，想想也对，人家安装完后要告诉用户安装了哪些包，你没有package.json文件，人家怎么会知道你这个包是什么鬼呢。</div><div class=\"z-line-group\" name=\"13-79df\"><br></div><div class=\"z-line-group\" name=\"14-369a\">综上，要想成功安装，包里必须有符合标准格式的package.json文件。还有这个锅好像该自己背，并不关npm鸟事。。。</div>\n\t\t\t","brief":"\n\t\t\t\t以前开发npm包都是直接publish到npm官网，然后install下来使用，遇到有bug的情况就要反复上传新版本，很麻烦，后来有小伙伴说可以使用本地目录或者github地址进行测试，今天","fav":[],"comment":0,"read":0},{"_id":"5457012137c357d37f000001","url":"http://xwenliang.cn/p/5457012137c357d37f000001","auther":"邢文亮","cata":"1","time":1415009520000,"title":"window.opener带来的隐患","content":"<p name=\"0-5863\">今天楠哥做组内分享的时候，提到了window.opener这个邪恶的东西，在这里记录下。</p><p name=\"4-7dd1\"><br></p><p name=\"0-b4a5\">先介绍下这东西是个啥，</p><p name=\"6-8de9\">他是打开你当前窗口的父窗口，举个例子：</p><p name=\"2-6fd6\">你从百度搜索你的博客，然后从搜索结果页进入了你的博客，那么现在你博客的window.opener就是百度的搜索结果页的窗口。</p><p name=\"3-9449\"><br></p><p name=\"5-8a66\">它可以用来干啥呢，</p><p name=\"7-8466\">既然它也是个window对象，那也应该有location等等这些属性，并且window.opener.location只可写，不可读。</p><p name=\"9-bcd5\">既然可写，那可以利用它修改父窗口的地址吗？尝试在通过百度打开的你的博客的控制台中输入：</p><pre name=\"11-596e\"><ul><li cur=\"true\">window.opener.location = 'http://xwenliang.cn'; </li></ul></pre><p name=\"12-9583\">运行后发现，父窗口的地址真的被改变了...</p><p name=\"16-847d\"><br></p><p name=\"15-a825\">设想如下场景：</p><p name=\"17-7e4b\">有个很出名的网站X上面有我网站的入口，我找到可以进入我网站的页面，伪造一个跟该页面一模一样的页面，然后用户通过网站x进入我网站的时候，将打开网站x的窗口地址篡改为我伪造页面的地址，然后诱导用户登陆...</p><p name=\"19-c1ca\"><br></p><p name=\"20-79bf\">如何解决这个隐患呢？</p><pre name=\"22-a9e2\"><ul><li cur=\"true\">&lt;a href=\"第三方网址\" target=\"_blank\" rel=\"noreferrer\"&gt;第三方网址&lt;/a&gt; </li></ul></pre><p name=\"23-5355\">这样就可以避免第三方网站通过window.opener来篡改父窗口地址了。</p><p name=\"24-c21e\" cur=\"true\">但同时会丢失掉refer，第三方网站将不能通过document.referrer来获取来源地址了。</p>","brief":"今天楠哥做组内分享的时候，提到了window.opener这个邪恶的东西，在这里记录下。先介绍下这东西是个啥，他是打开你当前窗口的父窗口，举个例子：你从百度搜索你的博客，然后从搜索结果页进入了你的博客","fav":[],"comment":0,"read":0},{"_id":"5668025db50815352000000a","url":"http://xwenliang.cn/p/5668025db50815352000000a","auther":"邢文亮","cata":"1","time":1449656880000,"title":"iOS平台native调用React Native functions","content":"<div class=\"z-line-group\" name=\"1-1b9e\">上一篇介绍了react native调用native functions</div><div class=\"z-line-group\" name=\"2-e773\">其中提到的js调用oc函数的时候，传递一个回调函数进去，其实已经实现了oc调用js</div><div class=\"z-line-group\" name=\"3-eaa2\">只不过这种方法官方给出了一个Warning：</div><div class=\"z-line-group\" name=\"4-44e6\">This section is more experimental than others because we don't have a solid set of best practices around callbacks yes.</div><div class=\"z-line-group\" name=\"5-582e\"><br></div><div class=\"z-line-group\" name=\"6-e126\">官方还提供了另外一种通过事件来通信的方式：</div><div class=\"z-line-group\" name=\"7-8966\">分别创建NativeCallReact.h和NativeCallReact.m两个文件</div><div class=\"z-line-group ace-line\" name=\"11-7515\" data-editorid=\"ace-11-7515\" data-language=\"objectivec\">#import \"RCTBridgeModule.h\"\n#import \"RCTBridge.h\"\n#import \"RCTEventDispatcher.h\"\n\n@interface NativeCallReact: NSObject &lt;RCTBridgeModule&gt;\n\n@end</div><div class=\"z-line-group\" name=\"12-460c\"><br></div><div class=\"z-line-group ace-line\" name=\"14-6680\" data-editorid=\"ace-14-6680\" data-language=\"objectivec\">#import \"NativeCallReact.h\"\n\n@implementation NativeCallReact\n\n@synthesize bridge = _bridge;\n\nRCT_EXPORT_MODULE()\n\nRCT_EXPORT_METHOD(sendEvents){\n  \n  [self.bridge.eventDispatcher sendAppEventWithName:@\"hello\" body:@\"i am from native\"];\n  \n}\n\n@end</div><div class=\"z-line-group\" name=\"15-6dde\"><br></div><div class=\"z-line-group\" name=\"16-e12f\">在js中监听这个事件：</div><div class=\"z-line-group ace-line\" name=\"25-9d54\" data-editorid=\"ace-18-e9a2\" data-language=\"javascript\">import {\n\tNativeModules,\n\tNativeAppEventEmitter\n} from 'react-native';\n\n//监听上面oc中定义好的事件\nNativeAppEventEmitter.addListener('hello', (event) =&gt; {\n\tconsole.log(event);\n});\n//触发oc中发射事件的方法\nNativeModules.NativeCallReact.sendEvents();\n//将打印 i am from native</div><div class=\"z-line-group\" name=\"19-f2a2\"><br></div><div class=\"z-line-group\" name=\"26-7333\">这样就变相实现了native调用react native中定义的方法了</div><div class=\"z-line-group\" name=\"27-cad2\"><br></div><div class=\"z-line-group\" name=\"29-79ab\">官方也有提到：</div><div class=\"z-line-group\" name=\"30-8b4f\">这样做的好处：不需要在oc中拿到js中的函数就可以执行</div><div class=\"z-line-group\" name=\"31-d63a\">但同时带来的坏处：</div><div class=\"z-line-group\" name=\"32-3879\">1. 事件是在哪里都可以发送的，这样会让你代码的依赖关系不明确</div><div class=\"z-line-group\" name=\"33-901b\">2. 所有的事件是在同一个命名空间下的，不小心会遇到命名冲突等问题，并且很难debug</div><div class=\"z-line-group\" name=\"34-34c0\">3. 如果模块在多处被使用，并且要区分使用方法，那么你可能需要在传递的参数中带一些标识，这给项目的后期维护也带来了困难</div><div class=\"z-line-group\" name=\"36-da6a\"><br></div><div class=\"z-line-group\" name=\"37-9244\" cur=\"true\">另外android平台native和react native的相互调用，可以看<a href=\"https://github.com/beefe/doc/issues/1\" target=\"_blank\">这里</a></div>","brief":"上一篇介绍了react native调用native functions其中提到的js调用oc函数的时候，传递一个回调函数进去，其实已经实现了oc调用js只不过这种方法官方给出了一个Warning：T","fav":[],"comment":0,"read":0},{"_id":"5288c8e7e8ce32583f000003","url":"http://xwenliang.cn/p/5288c8e7e8ce32583f000003","auther":"邢文亮","cata":"1","time":1384833900000,"title":"关于Chrome/Firefox最小化后停止GUI渲染的问题","content":"<p name=\"5579\">以前经常遇到这样一种情况：很多网站上的幻灯轮播，尤其是那种拉动切换的，当打开一段时间后(未关闭，但是切到别的标签或最小化)再切换到它的时候，会突然切换好多张，感觉好像是从切换到别的标签之前的状态，一下子切换到切换回来的状态了。这不科学啊，写的好好的一个效果，就这样被糟蹋了。</p><p name=\"6a03\"><br></p><p name=\"96ce\">但是由于之前自己写过的这种幻灯轮播，基本也就存在这一个问题，并且还是大众化的问题，也就未再追究。 但后来发现，这种遇到问题不求甚解的心态，会给我们带来很多的潜在危险甚至是不定时炸弹。说不定哪天就给你来个迎头痛击，让你后悔当初遇到这个问题的时候，为什么没有好好抓住它搞清楚。解决问题的过程才是成长的过程。&nbsp;</p><p name=\"775c\"><br></p><p name=\"6c8c\">先来看一个轮播：<a href=\"http://xwenliang.cn/demo/slideBox\" target=\"_blank\">原生JS轮播</a></p><p name=\"a090\">打开后发现也没什么问题，那么用chrome/FF切换到别的标签继续浏览别的东西。某一时刻你又切换回去的时候发现，这个轮播像抽风了一样，一次闪过好多张。为什么会这样呢？</p><p name=\"c114\">当时我给出的设想是chrome/FF为了节省浏览器资源，当视窗不可见的时候(这种说法不严谨，当打开的窗口一直是当前标签的时候，即使焦点在别的windows窗口上，切换也不会出问题，只有切到别的标签或者最小化了才会出现这种问题)，就停止页面渲染，但定时器还是在运行的，只记录了状态和位置，当再次切回去的时候，就从视窗不可见之前的状态渲染到它本应达到的页面状态。所以就出现了一次切换好多帧的问题。</p><p name=\"64fe\">但是经测试IE9/Opera/safari都没有这样的问题，即使视窗不可见，页面GUI渲染也正常。 反思这个问题可能引发的bug，当然节省了CPU资源，省下页面渲染的资源留给你当前浏览的窗口，这可能也是为什么chrome浏览器比其他浏览器页面渲染速度快的原因之一吧。但是当你的定时器用到了currentStyle/defaultView等即时页面样式的时候，可能会让你的程序出现预料以外的bug。比如我第一次写的上面的那个轮播，在播放完完整的一轮后，我是通过判断了滚动容器距离外容器左边的距离left(当然是绝对值)是否等于整个滚动元素的宽width来实现的。这样当切换回来的时候，定时器所保存的状态和位置肯定是和当前样式有很大差异的，甚至可能大于整个滚动元素的宽，这样就跨过我判断是否滚动完一轮的条件了。所以不能用 '=' 而应该用 '&gt;='。</p><p name=\"7ffb\"><br></p><p name=\"703e\">我个人觉得，web程序员应该有权利决定当视窗不可见的时候是否还进行页面渲染。或许是有别的办法可以避免页面暂停渲染，我暂时还不知道，待解决。 以后再用定时器来动态修饰页面元素的时候，一定要注意chrome/FF的这种特性，从而避免一些奇怪的bug。</p>","brief":"以前经常遇到这样一种情况：很多网站上的幻灯轮播，尤其是那种拉动切换的，当打开一段时间后(未关闭，但是切到别的标签或最小化)再切换到它的时候，会突然切换好多张，感觉好像是从切换到别的标签之前的状态，一下","fav":[],"comment":0,"read":0},{"_id":"563b35b84b140eed50000004","url":"http://xwenliang.cn/p/563b35b84b140eed50000004","auther":"邢文亮","cata":"1","time":1446720900000,"title":"React Native iOS环境部署时遇到的坑","content":"\n\t\t\t\t<div class=\"z-line-group\" name=\"0-e829\">这是自己之前遇到过的一个坑，今天又有同事遇到了，想记录下自己当时解决这个问题的思路和过程。</div><div class=\"z-line-group\" name=\"1-83fa\">安装完react-native-cli，初始化项目，运行后却遇到如下报错：</div><div class=\"z-line-group\" name=\"2-38e8\"><img src=\"/upload/artical/6acc395df68279fc63359f210e4ad733.jpg\"></div><div class=\"z-line-group\" name=\"3-7cd1\"><br></div><div class=\"z-line-group\" name=\"4-2c48\">既然有报错，那就去看看报错的这几行代码到底干了啥，按照提示的路径找到这个文件：</div><div class=\"z-line-group ace-line\" name=\"6-bfb2\" data-editorid=\"ace-6-bfb2\" data-language=\"javascript\">const nodeCrawl = require('./node');\nconst watchmanCrawl = require('./watchman');\n\nfunction crawl(roots, options) {\n  const {fileWatcher} = options;\n  return fileWatcher.isWatchman().then(isWatchman =&gt; {\n    if (!isWatchman) {\n      return false;\n    }\n\n    // Make sure we're dealing with a version of watchman\n    // that's using `watch-project`\n    // TODO(amasad): properly expose (and document) used sane internals.\n    return fileWatcher.getWatchers().then(([watcher]) =&gt; !!watcher.watchProjectInfo.root);\n  }).then(isWatchman =&gt; {\n    if (isWatchman) {\n      return watchmanCrawl(roots, options);\n    }\n\n    return nodeCrawl(roots, options);\n  });\n}</div><div class=\"z-line-group\" name=\"7-c323\"><br></div><div class=\"z-line-group\" name=\"8-1bcc\">发现是watchman这个模块导致的报错，watchman是我们用来监听文件修改用的，肯定是调用了通过brew安装的watchman服务。</div><div class=\"z-line-group\" name=\"9-64ee\">但是依然束手无策啊，通常遇到此类问题，只能藉希望于更新这个服务会解决问题。</div><div class=\"z-line-group\" name=\"10-88b9\" cur=\"true\">然后brew update，漫长的等待后，更新列表里果然出现了watchman，</div><div class=\"z-line-group\" name=\"12-e176\">然后brew upgrade watchman，更新完成后再运行，发相项目果然已经可以正常运行了。</div><div class=\"z-line-group\" name=\"13-f78f\"><br></div><div class=\"z-line-group\" name=\"14-6980\">通常遇到此类比较新的技术问题，又是英文报错，某度上基本搜不到什么结果，</div><div class=\"z-line-group\" name=\"15-d5e4\">如果可以翻墙的话，去google基本都可以找到答案，</div><div class=\"z-line-group\" name=\"16-d49b\">后来我发现比较新的技术问题，google搜出来的结果基本都指向了这个服务代码的github仓库的issue，</div><div class=\"z-line-group\" name=\"17-6aa8\">所以有空多去github转转是很有收获的，即使没找到答案也可以现场提问啊:)</div><div class=\"z-line-group\" name=\"18-ff18\">比如上面这个问题，在ReactNative的官方github上就有<a href=\"https://github.com/facebook/react-native/issues/3703\" target=\"_blank\">答案</a></div><div class=\"z-line-group\" name=\"19-7617\"><br></div><div class=\"z-line-group\" name=\"20-f5ad\">react-native-cli版本：0.1.4</div><div class=\"z-line-group\" name=\"23-bb3a\">react-native版本：0.12.0</div><div class=\"z-line-group\" name=\"21-d9a7\">watchman版本：3.1.0</div><div class=\"z-line-group\" name=\"22-8dc1\">更新后的watchman版本：3.9.0</div>\n\t\t\t","brief":"\n\t\t\t\t这是自己之前遇到过的一个坑，今天又有同事遇到了，想记录下自己当时解决这个问题的思路和过程。安装完react-native-cli，初始化项目，运行后却遇到如下报错：既然有报错，那就去看看报错","fav":[],"comment":0,"read":0},{"_id":"56092869e679ea9102000001","url":"http://xwenliang.cn/p/56092869e679ea9102000001","auther":"邢文亮","cata":"4","time":1443440700000,"title":"解决common.gypi not found","content":"<div class=\"z-line-group\" name=\"0-8c58\">记得在很久之前安装各种node模块的时候，就遇到过node-gyp报的各式各样的错误，其中这个找不到common.gypi是很常见的。</div><div class=\"z-line-group\" name=\"0-8c58\">今天在安装node-iconv的时候，再次遇到了这个问题：</div><div class=\"z-line-group ace ace_editor ace-monokai ace_dark\" name=\"1-774a\" data-editorid=\"ace-1-774a\" style=\"height: 379px;\">&gt; iconv@2.1.11 install /root/web/xwenliang/3/app/node_modules/iconv\n&gt; node-gyp rebuild\n\ngyp: /root/.node-gyp/0.10.25/common.gypi not found (cwd: /root/web/xwenliang/3/app/node_modules/iconv) while reading includes of binding.gyp\ngyp ERR! configure error \ngyp ERR! stack Error: `gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:337:16)\ngyp ERR! stack     at ChildProcess.EventEmitter.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:797:12)\ngyp ERR! System Linux 3.2.0-29-generic\ngyp ERR! command \"node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /root/web/xwenliang/3/app/node_modules/iconv\ngyp ERR! node -v v0.10.25\ngyp ERR! node-gyp -v v0.12.2\ngyp ERR! not ok \nnpm ERR! iconv@2.1.11 install: `node-gyp rebuild`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the iconv@2.1.11 install script.\nnpm ERR! This is most likely a problem with the iconv package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls iconv\nnpm ERR! There is likely additional logging output above.</div><div class=\"z-line-group\" name=\"2-8cf6\"><br></div><div class=\"z-line-group\" name=\"2-8cf6\">如果你不知道<a href=\"https://github.com/nodejs/node-gyp\" target=\"_blank\">node-gyp</a>是干啥的，可以先点<a href=\"https://github.com/nodejs/node-gyp\" target=\"_blank\">这里</a>。</div><div class=\"z-line-group\" name=\"2-8cf6\">这个common.gypi是个什么鬼呢，据网友可靠消息，它应该是一个类似于编译前的配置文件的东西。</div><div class=\"z-line-group\" name=\"2-8cf6\">但是我们明明都没碰过node-gyp，怎么就缺少了配置文件了呢？</div><div class=\"z-line-group\" name=\"2-8cf6\">万能的网友告诉我，你一定是在编译某个模块的时候，强制中断了操作或编译过程意外中断，才导致了这个问题。</div><div class=\"z-line-group\" name=\"2-8cf6\"><br></div><div class=\"z-line-group\" name=\"2-8cf6\">解决方法：手动删除~/.node-gyp这个目录，让node-gyp认为还没有生成过common.gypi文件，这样编译前它就会重新生成这个文件，于是就解决了这个问题。（感觉node-gyp这么弱智呢，既然文件是自己生成的，找不到了不会再生成一份啊？）</div><div class=\"z-line-group\" name=\"2-8cf6\"><br></div><div class=\"z-line-group\" name=\"2-8cf6\">接下来确实不报common.gypi not found的错误了，却又报了下面的错误：</div><div class=\"z-line-group ace ace_editor ace-monokai ace_dark\" name=\"7-948e\" data-editorid=\"ace-7-948e\" style=\"height: 253px;\">&gt; iconv@2.1.11 install /root/web/xwenliang/3/app/node_modules/iconv\n&gt; node-gyp rebuild\n\ngyp: /root/.node-gyp/0.10.25/common.gypi not found (cwd: /root/web/xwenliang/3/app/node_modules/iconv) while reading includes of binding.gyp\ngyp ERR! configure error \ngyp ERR! stack Error: `gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:337:16)\ngyp ERR! stack     at ChildProcess.EventEmitter.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:797:12)\ngyp ERR! System Linux 3.2.0-29-generic\ngyp ERR! command \"node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /root/web/xwenliang/3/app/node_modules/iconv\ngyp ERR! node -v v0.10.25\ngyp ERR! node-gyp -v v0.12.2\ngyp ERR! not ok \nnpm ERR! iconv@2.1.11 install: `node-gyp rebuild`\nnpm ERR! Exit status 1</div><div class=\"z-line-group\" name=\"8-74e0\"><br></div><div class=\"z-line-group\" name=\"8-74e0\">执行了多次无果后，绝望之下突然想到，是不是因为node进程还在运行中，对这个模块的编译安装产生了影响？</div><div class=\"z-line-group\" name=\"8-74e0\">于是机智的停掉了node进程，再次编译安装，终于成功了...</div><div class=\"z-line-group ace ace_editor ace-monokai ace_dark\" name=\"9-a671\" data-editorid=\"ace-9-a671\" style=\"height: 196px;\">&gt; iconv@2.1.11 install /root/web/xwenliang/3/app/node_modules/iconv\n&gt; node-gyp rebuild\n\nmake: Entering directory `/root/web/xwenliang/3/app/node_modules/iconv/build'\n  CC(target) Release/obj.target/libiconv/deps/libiconv/lib/iconv.o\n  AR(target) Release/obj.target/iconv.a\n  COPY Release/iconv.a\n  CXX(target) Release/obj.target/iconv/src/binding.o\n  SOLINK_MODULE(target) Release/obj.target/iconv.node\n  SOLINK_MODULE(target) Release/obj.target/iconv.node: Finished\n  COPY Release/iconv.node\nmake: Leaving directory `/root/web/xwenliang/3/app/node_modules/iconv/build'\niconv@2.1.11 node_modules/iconv\n└── nan@2.0.9</div><div class=\"z-line-group\" name=\"10-822b\"><br></div><div class=\"z-line-group\" name=\"10-822b\" cur=\"true\">但似乎暴露了不少路径啥的...</div>","brief":"记得在很久之前安装各种node模块的时候，就遇到过node-gyp报的各式各样的错误，其中这个找不到common.gypi是很常见的。今天在安装node-iconv的时候，再次遇到了这个问题：&gt;","fav":[],"comment":0,"read":0},{"_id":"5507a693ebd3dc1e31000002","url":"http://xwenliang.cn/p/5507a693ebd3dc1e31000002","auther":"Tony","cata":"7","time":1426583580000,"title":"Android 5.0 API改动以及对应用开发的影响","content":"<p name=\"1-5081\">1.首先设置targetSdkVersion为21必须设置吗？是的，之前没设置会出现闪退的情况</p><p name=\"30-94f7\">2. 如果想兼容以前的版本的话，只能通过API Level来进行判断， minSdkVersion这个属性不起作用</p><p name=\"31-8940\">3. 关注一下JNI，用工具自动生成的不标准的代码，ART不支持压缩垃圾回收；这些可能兼容性有问题。</p><p name=\"32-731e\">4. Notification有些改变，包括风格、颜色、声音、震动，现在可以设置优先级，可以把它放到锁屏上面，多媒体回放，可以在当前应用弹出警告框。</p><p name=\"33-6f85\">5. RemoteControlClient的修改，该类已经被弃用了，用MediaSession进行替换。</p><p name=\"34-6a1a\">6. 用getAppTasks()代替getRecentTasks()</p><p name=\"35-5b9c\">7. 支持64位系统，NDK相关：下载安装NDK Revision 10c 支持OpenGL ES (GLES) 3.1。</p><p name=\"36-8a52\">8. bind或start一个service的时候需要指定一个明确的Intent，但不要声明Intent filter。</p><p name=\"37-64f1\">9. Material Design支持</p><p name=\"38-87eb\">10. 可以控制多个task的显示和处理</p><p name=\"39-5242\">11. 更新了webview，更加安全、稳定，可以给Webview赋一些权限：访问照相机，麦克风等，对选择文件进行了增强。</p><p name=\"40-9628\">12. 增加了屏幕捕获和分享功能。</p><p name=\"41-6d33\">13. 有关notification的更新：可以在锁屏界面进行显示（这个是可以配置的）。可以借助metadata来对notification进行分类。</p><p name=\"42-7e06\">14. openGL ES升级为3.1，增加java接口和native支持。</p><p name=\"43-a7c3\">15. Android5.0采用新的camera API android.hardware.camera2</p><p name=\"44-5b2b\">16. 有关音频、视频回放的增强，用MediaSession 替换之前的RemoteControlClient。通过暴露一种服务让其他的应用读取本客户端的多媒体内容库。</p><p name=\"45-aace\">17. 目录选择的修改，提供专门的类来处理文档和目录的创建、修改和删除。</p><p name=\"46-b389\">18. Android5.0可以进行网络选择？？？ 这个是指app可以自主选择连接的网路</p><p name=\"47-6e1c\">19. 查看应用耗电量工具</p><p name=\"48-5c53\">20. Screen pinning，临时的只显示一个Task</p><p name=\"49-a8d1\">21. 获取手机的应用信息（包括：应用最后使用时间，应用在前台的使用时长等）。</p><p name=\"50-adc0\">22. 输入语言的切换</p><p name=\"51-c2a1\">23. pdf转换成bitmap</p><p name=\"52-5b1f\">24. Divice owner的使用</p><p name=\"53-7465\">25.输入语言的切换</p><p name=\"54-8cbc\">26.添加了一个Scheduling jobs，可以自己定义开始时间，比如设备在充电的时候，或者空闲的时候等。</p><p name=\"55-9c27\">27.蓝牙和NFC的改善。以上标红的，是可能引起EMM出问题的点或者未来可以做增强的地方额外：多document显示还有Device admin加入了workspace的控制。</p><p name=\"2-7f9e\"><br></p><p name=\"3-7de1\">对应用产生的影响：</p><p name=\"4-6860\">自定义权限的修改:</p><p name=\"5-57fe\">在Android L上，对于自定义权限有了新的限定，如果是不同应用声明使用了相同的自定义权限,那么就需要使用相同的签名，否则无法安装或者安装时需要进行删除应用间关联。</p><p name=\"6-a368\">这应该是google为了防止应用之间互相唤醒，造成额外的电量消耗.</p><p name=\"7-ac90\"><br></p><p name=\"8-7cfe\">目前已经对同系应用引起了问题，比如淘宝支付宝不能同时安装，百度系应用也一样</p><p name=\"9-5225\"><br></p><p name=\"10-50cc\"><br></p><p name=\"11-7e09\">fork进程相关的修改：</p><p name=\"12-9a30\">关于fork方式复制进程，然后在fork后的进程中做操作的事情已经做了限制，比如常见的应用卸载后打开浏览器统计卸载页面，已经无法实现，包括之前的一些基于fork实现的守护进程，service自启动等等，目前也无法实现. fork进程可以成功，但是成为孤儿进程后无法进行操作</p><p name=\"13-b05c\">应该也是google为了生态系统做的优化：大概的限制无非从两方面做，一是即时调用waitpid对孤儿进程进行回收 二是对于fork之后的子进程，在成为孤儿进程时直接添加标记，检测到这种标记时，该进程便无法获取权限进行操作数据,然后调用waitPid对其进行回收。</p><p name=\"14-5313\"><br></p><p name=\"15-9199\"><br></p><p name=\"16-c1d7\"><br></p><p name=\"17-ac50\">Scheduling jobs:</p><p name=\"18-60a9\">新api,针对于之前的Alarmmanager实现的操作进行优化</p><p name=\"19-97a6\">之前很多操作会使用alarm来基于时间定时调度，往往会增加消耗，但有些操作其实可以集中在一个时间点来进行，比如上传日志，可以选择手机锁屏时进行，从而不会影响用户的使用.</p><p name=\"20-b063\"><br></p><p name=\"21-8868\">但是，目前只能在android 5.0上使用(因为在5.0上系统才加入的JobSchuderSerivce,对客户端发起的job调度)，这样子应用范围太窄,仍然是硬伤.</p><p name=\"22-753b\"><br></p><p name=\"23-b20e\"><br></p><p name=\"24-8f87\">Android5.0可以进行网络选择？</p><p name=\"25-961b\">这个是指app可以自主选择连接的网路，比如用户数据连接和wifi同时启用，尽量让用户选择一个最优的网络来连接该app,以拥有更好的用户体验并节省流量.</p><p name=\"26-7438\"><br></p><p name=\"27-aaf6\">Notification的改动？</p><p name=\"28-8434\" cur=\"true\">可以设置优先级，并在锁屏页面展示,android 5.0之前需要自己申请额外权限(device admin或者锁屏),自定义锁屏界面，关于Notification详情,android 4.4开始可以获取,之前实现需要开启辅助服务（AccessbilityService android 2.2就够了）.</p><p name=\"29-ac91\"><br></p>","brief":"1.首先设置targetSdkVersion为21必须设置吗？是的，之前没设置会出现闪退的情况2. 如果想兼容以前的版本的话，只能通过API Level来进行判断， minSdkVersion这个属性","fav":[],"comment":0,"read":0},{"_id":"52cbc9ba14e98b7623000012","url":"http://xwenliang.cn/p/52cbc9ba14e98b7623000012","auther":"邢文亮","cata":"1","time":1389461880000,"title":"尝试使用requestAnimationFrame来解决之前提到的GUI渲染问题","content":"<p name=\"8974\">这个问题搁置了很久： <a href=\"http://xwenliang.cn/p/5288c8e7e8ce32583f000003\" target=\"_blank\">关于Chrome/Firefox最小化后停止GUI渲染的问题</a></p><p name=\"644b\">据说requestAnimationFrame可以解决，只是大致去网上搜了搜关于这个函数的一些信息。并未亲自尝试。</p><p name=\"6823\">MSDN这样介绍的： <a href=\"http://msdn.microsoft.com/zh-cn/library/ie/hh920765(v=vs.85).aspx\" target=\"_blank\">基于脚本的动画的计时控制</a></p><p name=\"86d6\"><br></p><p name=\"a536\">看了半天，发现原来setTimeout和setInterval这一对货色在设置的间隔很小时，可能会丢帧。也就是我们所了解的\"最小间隔\"。因为浏览器在渲染当前请求的时候，可能又接收了别的渲染请求，导致了\"几个请求同时渲染\"的情况。</p><p name=\"8506\">但是requestAnimationFrame的原理是在浏览器渲染完毕当前请求后才会接收下一个请求，相当于它可以直接触发渲染操作，下一次请求只有在当前渲染操作完毕后才会进来（个人理解）。这样就有效的防止了丢帧和过度重绘等问题。</p><p name=\"65e4\"><br></p><p name=\"522a\">由于它的这种特性，或许可以对我们上面提到的那个问题有所帮助？因为在浏览器最小化或者切到别的tab的时候，浏览器是停止渲染的，也就是说，浏览器同样也不会再接收到渲染请求，只有当下一次进入这个页面，渲染完毕当前请求，下一次请求才会进来。</p><p name=\"7ec3\">正巧它几乎可以支持所有现代浏览器，这样我们在低版本IE下仍然使用常规的setTimeout和setInterval（浪费就浪费吧，谁让它那么不争气...），高级浏览器就使用requestAnimationFrame，或许可以完爆这个问题。</p><p name=\"bf1a\"><br></p><p name=\"5fef\">但是似乎有些图样图森破了。这个函数，只是在浏览器接收渲染请求并渲染完毕的时候，会再次发送渲染请求，那么意味着，他只可以用于基础动画，单张滚动图片的场景。那么如何来实现间隔几秒钟滚动一张图片呢？难道再在外面用setInterval/setTimeout来控制几秒滚动一次？这样似乎同样会引发之前提到的问题。因为这俩货色，即使浏览器不在当前视图的情况下，依然会不停的运行，</p><p name=\"9a82\">\"囤积\"渲染请求。</p><p name=\"63bd\"><br></p><p name=\"bf65\">后来想到了一个方法，requestAnimationFrame相当于是一个页面渲染的监听器，当页面发生渲染并渲染完毕后会执行它的回调函数，那么我们只要在回调函数中判断是否完整滚完一张图片就可以了。如果是完整滚完一张图片了，那么设置一个setTimeout，比如每滚一张要间隔2s，那么就把时间设为2000ms，如果还未滚完一张图片，那么就递归这个渲染函数。这样，只有在页面发生了渲染才会有可能有这个setTimeout。这样似乎问题就解决了。</p><p name=\"5f26\"><br></p><p name=\"9a82\">我做了一下尝试：(由于用的原生js，未做事件支持，懒...)</p><p name=\"7489\" cur=\"true\"><a href=\"/demo/slideBoxFixed/index.html\" target=\"_blank\">改进后的轮播图</a></p><p name=\"b758\">这样，即使再切到别的tab或者最小化浏览器，页面停止GUI渲染，js也不会再执行代码了，皆大欢喜。但是有这样一个问题：</p><p name=\"61c0\">当正好滚完一张图片的时候，切到别的tab或者最小化浏览器，这时候setTimeout延时函数已经开启，所以当过一段时间再切回来的时候，延时的2s就被'私吞了'，会直接滚到下一张。不过这也无伤大雅了。</p>","brief":"这个问题搁置了很久： 关于Chrome/Firefox最小化后停止GUI渲染的问题据说requestAnimationFrame可以解决，只是大致去网上搜了搜关于这个函数的一些信息。并未亲自尝试。MS","fav":[],"comment":0,"read":0},{"_id":"52f5922731dbf3a112000003","url":"http://xwenliang.cn/p/52f5922731dbf3a112000003","auther":"朱大哈","cata":"8","time":1391827680000,"title":"iscroll.js使用注意事项","content":"<p name=\"95ce\"></p><p name=\"5395\"><b>概要</b></p><p name=\"5ea3\">iScroll 4 这个版本完全重写了iScroll这个框架的原始代码。这个项目的产生完全是因为移动版webkit浏览器（诸如iPhone，iPad，Android 这些系统上广泛使用）提供了一种本地化的方式来对一个限定了高度和宽度的元素的内容进行滑动。很不幸的是，这种情况下所有的web应用的页面就不能够包含具有position:absolute的头、页尾或者是一个内容可滚动的中间区域。</p><p name=\"9a19\">然而，Android系统最新修订版已经可以支持这种功能了（尽管支持的力度还不是特别好），Apple公司似乎不太情愿将one-finger滑动事件运用到div元素上。</p><p name=\"76bc\">除了以前版本的iScroll的特性以外，iScroll 4还包括如下的特性：</p><p name=\"8189\">&nbsp;&nbsp;&nbsp;&nbsp; （1）缩放（Pinch/Zoom）</p><p name=\"51ea\">&nbsp;&nbsp;&nbsp;&nbsp;（2）拉动刷新（Pull up/down to refresh）</p><p name=\"b277\">&nbsp;&nbsp;&nbsp; （3）速度和性能提升</p><p name=\"73a2\">&nbsp;&nbsp;&nbsp; （4）精确捕捉元素</p><p name=\"5003\">&nbsp;&nbsp;&nbsp; （5）自定义滚动条</p><p name=\"7366\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 友情提示：iScroll 4并不是iScroll 3的简易替代版本，API文档已经不一样了。同时考虑到此版本正处于测试期，一些API可能会有细微的变化。</p><p name=\"627a\"><br></p><p name=\"acd7\"><b>使用指南</b></p><p name=\"c199\">在此文档中你会发现很多例子来教会你如何快速上手iScroll脚本库。参看文中的demo小例子并仔细阅读此文档，可能有点小无聊，但是这篇文章中却是iScroll这个脚本库的精髓之所在哦。</p><p name=\"550e\">iScroll需要对所要进行滚动的元素进行初始化，并且不限定一个页面中使用iScroll的元素的个数（这里不考虑您的硬件配置）。滚动元素中内容的类型和长度在一定程度上将会影响iScroll脚本库里可以同时使用的元素的个数。</p><p name=\"7680\">使用iScroll这个脚本库时，DOM树的结构要足够简单，移除不必要的标签，尽量避免过多的标签嵌套使用。</p><p name=\"957f\">最优的使用iScroll的结构如下所示：</p><p name=\"7de8\">&lt;div id=\"wrapper\"&gt;</p><p name=\"6eb9\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ul&gt;</p><p name=\"a657\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;li&gt;&lt;/li&gt;</p><p name=\"9b76\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .....</p><p name=\"6465\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ul&gt;</p><p name=\"bbb4\">&lt;/div&gt;</p><p name=\"744b\">在这个小例子中，ul标签将会被滚动。iScroll一定要与滚动内容外面的wrapper进行联系才会产生效果。</p><p name=\"ba69\">【注意事项】：</p><p name=\"6ccf\">只有wrapper里的第一个子元素才可以滚动，滚动元素必须有固定的高或宽，如果你想要更多的元素可以滚动，那么你可以试试下面的这种写法：</p><p name=\"a7b3\">&lt;div id=\"wrapper\"&gt;</p><p name=\"ab41\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div id=\"scroller\"&gt;</p><p name=\"7f8a\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ul&gt;</p><p name=\"b723\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;li&gt;&lt;/li&gt;</p><p name=\"5dec\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p><p name=\"6220\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ul&gt;</p><p name=\"7d6a\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ul&gt;</p><p name=\"b1f6\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;li&gt;&lt;/li&gt;</p><p name=\"53fa\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p><p name=\"62d0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ul&gt;</p><p name=\"6f7e\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;</p><p name=\"9a90\">&lt;/div&gt;</p><p name=\"712c\">在这个例子中，scroller这个元素可以滚动，即便它包含两个ul元素</p><p name=\"bd58\">iScroll必须在调用之前实例化，你可以在下面几种情况下对iScroll进行实例化：</p><p name=\"5ab3\">&nbsp;&nbsp;&nbsp;&nbsp;（1）onDOMContentLoaded</p><p name=\"bde9\">&nbsp;&nbsp;&nbsp; （2）onLoad</p><p name=\"c326\">&nbsp;&nbsp;&nbsp; （3）以内联inline方式</p><p name=\"9810\">下面我们逐个来讲讲这三种用法的优缺点</p><p name=\"71e4\"><br></p><p name=\"4ebf\"><b>ONDOMContentLoaded</b></p><p name=\"8f2d\">适用于滚动内容只包含文字、图片，并且所有的图片都有固定的尺寸</p><p name=\"b53f\">使用方法：（在head标签中添加如下代码）</p><p name=\"9bf8\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script src=\"iscroll.js\"&gt;&lt;/script&gt;</p><p name=\"7e58\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script&gt;</p><p name=\"c0bc\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; var myscroll;</p><p name=\"6e89\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; function loaded(){</p><p name=\"8569\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;myscroll=new iScroll(\"wrapper\");</p><p name=\"ba14\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; }</p><p name=\"50d5\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; window.addEventListener(\"DOMContentLoaded\",loaded,false);</p><p name=\"7c8d\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/script&gt;</p><p name=\"563c\">注意：myscroll这个变量是全局的，因此你可以在任何地方调用它的函数</p><p name=\"b634\"><br></p><p name=\"765d\"><b>onLoad</b></p><p name=\"a02b\">有些时候在DOMContentLoaded的状态下就初始化iScroll其实是有点草率的，因此此时页面的资源可能还没有全部加载完毕。如果你遇到了一些很怪异的行为可以试试下面的写法：</p><p name=\"8f08\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script src=\"iscroll.js\"&gt;&lt;script&gt;</p><p name=\"6336\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script&gt;</p><p name=\"7c45\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; var myscroll;</p><p name=\"8333\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;function loaded(){</p><p name=\"5c03\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setTimeout(function(){</p><p name=\"a626\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; myscroll=new iScroll(\"wrapper\");</p><p name=\"4fd3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; }，100&nbsp;);</p><p name=\"a26e\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><p name=\"53d3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;window.addEventListener(\"load\",loaded,false);</p><p name=\"bacf\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/script&gt;</p><p name=\"a16d\">这种情况下iScroll会在页面资源（包括图片）加载完毕100ms之后得到初始化，这应该是一种比较安全的调用iScroll的方式。</p><p name=\"a9b1\"><br></p><p name=\"5d6f\"><b>inline初始化。</b></p><p name=\"8b18\">这种情况会在页面加载到js的时候就进行调用，此方法不推荐使用，但是很多javascript的大牛都在用这种方式，我又有什么理由不赞成呢？</p><p name=\"5f84\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script src=\"iscroll.js\"&gt;&lt;/script&gt;</p><p name=\"4e68\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;</p><p name=\"be2b\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;ul&gt;</p><p name=\"a888\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;li&gt;&lt;/li&gt;</p><p name=\"c222\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; ...</p><p name=\"76da\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ul&gt;</p><p name=\"8ad6\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;</p><p name=\"a197\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script&gt;</p><p name=\"5ec1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; var myscroll=new iScroll(\"wrapper\");</p><p name=\"b0d1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/script&gt;</p><p name=\"9f5d\">不过建议你使用一些框架的ready方法来安全调用iScroll（比如jquery里的ready()）。</p><p name=\"c24e\"><br></p><p name=\"adf2\"><b>iScroll里传递的参数</b></p><p name=\"ae87\">iScroll里的第二个参数允许你自定义一些内容，比如下面的这段代码：</p><p name=\"54cb\">&lt;script&gt;</p><p name=\"9e5c\">&nbsp; &nbsp; &nbsp; &nbsp; var myscroll=new iScroll(\"wrapper\",{hScrollbar:false, vScrollbar:false});</p><p name=\"5ae2\">&lt;/script&gt;</p><p name=\"acd5\">第二个参数通常都是一个对象，像上面的这个例子里就设定了不显示滚动条。常用的参数如下：</p><p name=\"ad67\">&nbsp; &nbsp; &nbsp;hScroll &nbsp; &nbsp; false 禁止横向滚动 true横向滚动 默认为true</p><p name=\"7c6f\">&nbsp; &nbsp; &nbsp;vScroll &nbsp; &nbsp; false 精致垂直滚动 true垂直滚动 默认为true</p><p name=\"8a6a\">&nbsp; &nbsp; &nbsp;hScrollbar &nbsp;false隐藏水平方向上的滚动条</p><p name=\"99a0\">&nbsp; &nbsp; &nbsp;vScrollbar &nbsp;false 隐藏垂直方向上的滚动条</p><p name=\"6c86\">&nbsp; &nbsp; &nbsp;fixedScrollbar&nbsp; 在iOS系统上，当元素拖动超出了scroller的边界时，滚动条会收缩，设置为true可以禁止滚动条超出</p><p name=\"9836\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scroller的可见区域。默认在Android上为true， iOS上为false</p><p name=\"ac21\">&nbsp; &nbsp; &nbsp;fadeScrollbar&nbsp; false 指定在无渐隐效果时隐藏滚动条</p><p name=\"aea1\">&nbsp; &nbsp; &nbsp;hideScrollbar&nbsp; 在没有用户交互时隐藏滚动条 默认为true</p><p name=\"5813\">&nbsp; &nbsp; &nbsp;bounce &nbsp; &nbsp; &nbsp; 启用或禁用边界的反弹，默认为true</p><p name=\"50e9\">&nbsp; &nbsp; &nbsp;momentum&nbsp;&nbsp;&nbsp;&nbsp; 启用或禁用惯性，默认为true，此参数在你想要保存资源的时候非常有用</p><p name=\"88d3\">&nbsp; &nbsp; &nbsp;lockDirection&nbsp; false取消拖动方向的锁定， true拖动只能在一个方向上（up/down 或者left/right）</p><p name=\"78b6\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为了保持资源的完整性，建议去除滚动条</p><p name=\"83f5\"><br></p><p name=\"804e\"><b>拉动刷新（pull to refresh）</b></p><p name=\"6ba3\">自从Twitter和一些Apple的本地化应用出现了这个效果之后，这个效果就变得非常流行。 我最近把\"pull to refresh\"这个部分单分出来作为iScroll的一个额外插件，你可以<a href=\"http://cubiq.org/dropbox/iscroll4/examples/pull-to-refresh/\" target=\"_blank\">点击这儿</a>看看pull to refresh是如何工作滴。你只需要做的就是自定义pullDownAction()这个方法。你可能需要一个ajax来加载新的内容，不过一旦DOM树发生了变化要记得调用refresh这个方法来。需要记住的是在例子中我们加了1秒的延迟来模拟网络的延迟效果。当然，如果你不想使用这个延迟，那就把setTimeout方法去掉就行了。</p><p name=\"b6ed\"><br></p><p name=\"5178\"><b>缩放(pinch / zoom)</b></p><p name=\"b006\">我们不得不面对一个事实，那就是光有滚动其实没什么新意的。这就是为什么在iScroll 4这个版本里我们允许你可以放</p><p name=\"4e83\">大和缩小。想要这个功能，只需要设置放大的参数zoom 为true即可实现利用手势来放大和缩小。你可以看看<a href=\"\" target=\"_blank\">这儿</a>。</p><p name=\"738f\">双击放大和缩小的功能在iScroll 4里也是得到支持的。要使用缩放功能，你至少需要如下配置：</p><p name=\"8f3c\">var myScroll =new iScroll(\"wrapper\",{zoom:true});</p><p name=\"8567\">如果你想对缩放功能进行深度的自定义的话可以使用下面的一些选项：</p><p name=\"9502\">&nbsp; &nbsp; &nbsp; zoomMax&nbsp;&nbsp; 指定允许放大的最大倍数，默认为4</p><p name=\"5375\">【注意事项】：如果想要图片缩放的效果很好的话要把他们放到硬件的合成层中。通俗点说，就是在所有需要缩放的img元素上使用-webkit-transform:translate3d(0,0,0)来实现，而且尤为重要的是，硬件的加速会占用大量资源，要谨慎使用，否则你的应用可能就此崩溃。</p><p name=\"6941\"><br></p><p name=\"7b2f\"><b>捕捉元素（snap and snap to element）</b></p><p name=\"b5a0\">捕捉的功能会促使scroller去重新定义位置，这样可以制作更加花哨的传送带效果。<a href=\"http://cubiq.org/dropbox/iscroll4/examples/carousel/\" target=\"_blank\">点击这里</a>有个小例子。默认情况下，iScroll将scroller分成四分体，或者是相同大小的wrapper。iScroll 4加入了这个属性允许捕捉scroller里的任何元素，不考虑外部wrapper的大小。如果你想要实现这样的传送带效果，我建议你使用“quadrant”分割。最佳的设置如下：</p><p name=\"60d6\">var myscroll=new iScroll(\"wrapper\",{</p><p name=\"a783\">&nbsp; &nbsp; &nbsp; snap:true,</p><p name=\"5bda\">&nbsp; &nbsp; &nbsp; momentum:false,</p><p name=\"94e7\">&nbsp; &nbsp; &nbsp; hScrollbar:false,</p><p name=\"6fc0\">&nbsp; &nbsp; &nbsp; vScrollbar: false</p><p name=\"a1ae\">});</p><p name=\"7bf9\">捕获元素，可以通过传递一个字符串来作为查询条件，如下：</p><p name=\"8e94\">var myscroll=new iScroll(\"wrapper\",{</p><p name=\"696f\">&nbsp; &nbsp; snap:\"li\",</p><p name=\"7ca0\">&nbsp; &nbsp; momentum:false,</p><p name=\"c0b4\">&nbsp; &nbsp; hScrollbar:false,</p><p name=\"a508\">&nbsp; &nbsp; vScrollbar:false</p><p name=\"92ff\">});</p><p name=\"8a50\">在这个例子中scroller可以捕捉到滚动区域中最左上角的li元素</p><p name=\"9980\"><br></p><p name=\"78a1\"><b>自定义滚动条（custom scrollbars）</b></p><p name=\"7474\">在iScroll 4这个版本中，可以利用一系列的css来自定义滚动条的呈现。可以给滚动条添加一个class参数，如下：</p><p name=\"798f\">var myscroll=new iScroll(\"wrapper\",{</p><p name=\"9304\">&nbsp; &nbsp; scrollbarClass: \"myScrollbar\"</p><p name=\"9937\">});</p><p name=\"4f6a\">你可以<a href=\"http://cubiq.org/dropbox/iscroll4/examples/custom-scrollbar/\" target=\"_blank\">点击这里</a>看一个小例子，在这个小例子里，myScrollbarH这个类被添加到了水平滚动条上，myScrollbarV这个类则被添加给了垂直方向上的滚动条上了。需要提醒的是，滚动条是由两个元素组合而成的：容器和显示器。容器同wrapper的高度相同，而显示器则代表的是滚动条本身。<a href=\"http://hc.brandwisdom.cn/onebox.php?h=100014&amp;a=1118NNUDZ7JZMYWR&amp;d=JDN23HKL\" target=\"_blank\">多个滚动条的实例</a>。</p><p name=\"a259\">滚动条的HTML结构如下：</p><p name=\"8b32\">&lt;div&gt;</p><p name=\"9a53\">&nbsp; &nbsp; &nbsp;&lt;div&gt;&lt;/div&gt;</p><p name=\"b346\">&lt;/div&gt;</p><p name=\"8852\">.myscrollbarV{</p><p name=\"4f4c\">&nbsp; &nbsp; &nbsp; &nbsp;position:absolute;z-index:100;width:8px;bottom:7px;top:2px;right:1px;</p><p name=\"5bcb\">}</p><p name=\"64ba\">.myScrollbarV &gt; div {position:absolute;</p><p name=\"7fe0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;z-index:100;</p><p name=\"a1a6\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;width:100%;/* The following is probably what you want to customize */ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><p name=\"bf9d\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;background:-webkit-gradient(linear, 0 0, 100% 0, from(#f00), to(#900)); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;border:1px solid #800;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p name=\"5c2b\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-webkit-background-clip:padding-box;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</p><p name=\"a42c\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-webkit-box-sizing:border-box;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p name=\"4e3d\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-webkit-border-radius:4px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</p><p name=\"9d70\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-webkit-box-shadow:inset 1px 1px 0 rgba(255,255,255,0.5);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p name=\"67ee\">}</p><p name=\"5584\"><b><br></b></p><p name=\"aeeb\"><b>通用方法：</b></p><p name=\"c17b\">（1）refresh &nbsp;在DOM树发生变化时，应该调用此方法</p><p name=\"c295\">（2）scrollTo() &nbsp;滚动到某个位置 eg: myscroll.scrollTo(0,10,200,true);</p><p name=\"a2cf\">（3）scrollToElement() 滚动到某个元素 eg: myscroll.scrolToElement(\"li:nth-child(10)\",100);</p><p name=\"9b77\">（4）detroy() &nbsp;完全消除myscroll及其占用的内存空间 &nbsp;eg: myscroll.destroy()</p><p name=\"6c8b\"></p>","brief":"概要iScroll 4 这个版本完全重写了iScroll这个框架的原始代码。这个项目的产生完全是因为移动版webkit浏览器（诸如iPhone，iPad，Android 这些系统上广泛使用）提供了一种","fav":[],"comment":0,"read":0},{"_id":"54b6369e916e14f84a000008","url":"http://xwenliang.cn/p/54b6369e916e14f84a000008","auther":"sundonghan","cata":"1","time":1421227620000,"title":"正则基础之——贪婪与非贪婪模式","content":"<p name=\"1-90cc\">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;概述</p><p name=\"2-609b\">贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。</p><p name=\"3-7867\">属于贪婪模式的量词，也叫做匹配优先量词，包括：</p><p name=\"4-5b57\">“{m,n}”、“{m,}”、“?”、“*”和“+”。</p><p name=\"5-61a2\">在一些使用NFA引擎的语言中，在匹配优先量词后加上“?”，即变成属于非贪婪模式的量词，也叫做忽略优先量词，包括：</p><p name=\"6-b01a\">“{m,n}?”、“{m,}?”、“??”、“*?”和“+?”。</p><p name=\"7-5254\">从正则语法的角度来讲，被匹配优先量词修饰的子表达式使用的就是贪婪模式，如“(Expression)+”；被忽略优先量词修饰的子表达式使用的就是非贪婪模式，如“(Expression)+?”。</p><p name=\"8-5144\">对于贪婪模式，各种文档的叫法基本一致，但是对于非贪婪模式，有的叫懒惰模式或惰性模式，有的叫勉强模式，其实叫什么无所谓，只要掌握原理和用法，能够运用自如也就是了。个人习惯使用贪婪与非贪婪的叫法，所以文中都会使用这种叫法进行介绍。</p><p name=\"9-8429\">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;贪婪与非贪婪模式匹配原理</p><p name=\"10-b7ad\">对于贪婪与非贪婪模式，可以从应用和原理两个角度进行理解，但如果想真正掌握，还是要从匹配原理来理解的。</p><p name=\"11-bbed\">先从应用的角度，回答一下“什么是贪婪与非贪婪模式？”</p><p name=\"12-5a29\">2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从应用角度分析贪婪与非贪婪模式</p><p name=\"13-b307\">2.1.1&nbsp;&nbsp;什么是贪婪与非贪婪模式</p><p name=\"14-b703\">先看一个例子</p><p name=\"15-9502\">举例：</p><p name=\"16-bc8d\">源字符串：aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc</p><p name=\"17-74c4\">正则表达式一：&lt;div&gt;.*&lt;/div&gt;</p><p name=\"18-86af\">匹配结果一：&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;</p><p name=\"19-5cfd\">正则表达式二：&lt;div&gt;.*?&lt;/div&gt;</p><p name=\"20-8f26\">匹配结果二：&lt;div&gt;test1&lt;/div&gt;（这里指的是一次匹配结果，所以没包括&lt;div&gt;test2&lt;/div&gt;）</p><p name=\"21-50bf\">根据上面的例子，从匹配行为上分析一下，什是贪婪与非贪婪模式。</p><p name=\"22-a5a7\">正则表达式一采用的是贪婪模式，在匹配到第一个“&lt;/div&gt;”时已经可以使整个表达式匹配成功，但是由于采用的是贪婪模式，所以仍然要向右尝试匹配，查看是否还有更长的可以成功匹配的子串，匹配到第二个“&lt;/div&gt;”后，向右再没有可以成功匹配的子串，匹配结束，匹配结果为“&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;”。当然，实际的匹配过程并不是这样的，后面的匹配原理会详细介绍。</p><p name=\"23-6dcb\">仅从应用角度分析，可以这样认为，贪婪模式，就是在整个表达式匹配成功的前提下，尽可能多的匹配，也就是所谓的“贪婪”，通俗点讲，就是看到想要的，有多少就捡多少，除非再也没有想要的了。</p><p name=\"24-7092\">正则表达式二采用的是非贪婪模式，在匹配到第一个“&lt;/div&gt;”时使整个表达式匹配成功，由于采用的是非贪婪模式，所以结束匹配，不再向右尝试，匹配结果为“&lt;div&gt;test1&lt;/div&gt;”。</p><p name=\"25-6293\">仅从应用角度分析，可以这样认为，非贪婪模式，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。</p><p name=\"26-6daa\">2.1.2&nbsp;&nbsp;关于前提条件的说明</p><p name=\"27-550b\">在上面从应用角度分析贪婪与非贪婪模式时，一直提到的一个前提条件就是“整个表达式匹配成功”，为什么要强调这个前提，我们看下下面的例子。</p><p name=\"28-7d40\">正则表达式三：&lt;div&gt;.*&lt;/div&gt;bb</p><p name=\"29-6c12\">匹配结果三：&lt;div&gt;test1&lt;/div&gt;bb</p><p name=\"30-5db0\">修饰“.”的仍然是匹配优先量词“*”，所以这里还是贪婪模式，前面的“&lt;div&gt;.*&lt;/div&gt;”仍然可以匹配到“&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;”，但是由于后面的“bb”无法匹配成功，这时“&lt;div&gt;.*&lt;/div&gt;”必须让出已匹配的“bb&lt;div&gt;test2&lt;/div&gt;”，以使整个表达式匹配成功。这时整个表达式匹配的结果为“&lt;div&gt;test1&lt;/div&gt;bb”，“&lt;div&gt;.*&lt;/div&gt;”匹配的内容为“&lt;div&gt;test1&lt;/div&gt;”。可以看到，在“整个表达式匹配成功”的前提下，贪婪模式才真正的影响着子表达式的匹配行为，如果整个表达式匹配失败，贪婪模式只会影响匹配过程，对匹配结果的影响无从谈起。</p><p name=\"31-8a16\">非贪婪模式也存在同样的问题，来看下面的例子。</p><p name=\"32-9d12\">正则表达式四：&lt;div&gt;.*?&lt;/div&gt;cc</p><p name=\"33-9596\">匹配结果四：&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc</p><p name=\"34-8887\">这里采用的是非贪婪模式，前面的“&lt;div&gt;.*?&lt;/div&gt;”仍然是匹配到“&lt;div&gt;test1&lt;/div&gt;”为止，此时后面的“cc”无法匹配成功，要求“&lt;div&gt;.*?&lt;/div&gt;”必须继续向右尝试匹配，直到匹配内容为“&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;”时，后面的“cc”才能匹配成功，整个表达式匹配成功，匹配的内容为“&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc”，其中“&lt;div&gt;.*?&lt;/div&gt;”匹配的内容为“&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;”。可以看到，在“整个表达式匹配成功”的前提下，非贪婪模式才真正的影响着子表达式的匹配行为，如果整个表达式匹配失败，非贪婪模式无法影响子表达式的匹配行为。</p><p name=\"35-9ce9\">2.1.3&nbsp;&nbsp;贪婪还是非贪婪——应用的抉择</p><p name=\"36-6972\">通过应用角度的分析，已基本了解了贪婪与非贪婪模式的特性，那么在实际应用中，究竟是选择贪婪模式，还是非贪婪模式呢，这要根据需求来确定。</p><p name=\"37-8322\">对于一些简单的需求，比如源字符为“aa&lt;div&gt;test1&lt;/div&gt;bb”，那么取得div标签，使用贪婪与非贪婪模式都可以取得想要的结果，使用哪一种或许关系不大。</p><p name=\"38-b928\">但是就2.1.1中的例子来说，实际应用中，一般一次只需要取得一个配对出现的div标签，也就是非贪婪模式匹配到的内容，贪婪模式所匹配到的内容通常并不是我们所需要的。</p><p name=\"39-5772\">那为什么还要有贪婪模式的存在呢，从应用角度很难给出满意的解答了，这就需要从匹配原理的角度去分析贪婪与非贪婪模式。</p><p name=\"40-946b\">2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从匹配原理角度分析贪婪与非贪婪模式</p><p name=\"41-c130\">如果想真正了解什么是贪婪模式，什么是非贪婪模式，分别在什么情况下使用，各自的效率如何，那就不能仅仅从应用角度分析，而要充分了解贪婪与非贪婪模式的匹配原理。</p><p name=\"42-7375\">2.2.1&nbsp;&nbsp;从基本匹配原理谈起</p><p name=\"43-9d0a\">NFA引擎基本匹配原理参考：正则基础之——NFA引擎匹配原理。</p><p name=\"44-8d13\">这里主要针对贪婪与非贪婪模式涉及到的匹配原理进行介绍。先看一下贪婪模式简单的匹配过程。</p><p name=\"45-a4bc\">源字符串：\"Regex\"</p><p name=\"46-9aff\">正则表达式：\".*\"</p><p name=\"47-9dcd\">&nbsp;</p><p name=\"48-7e32\">&nbsp;</p><p name=\"49-9a05\">图2-1</p><p name=\"50-7730\">注：为了能够看清晰匹配过程，上面的空隙留得较大，实际源字符串为“”Regex””，下同。</p><p name=\"51-bade\">来看一下匹配过程。首先由第一个“\"”取得控制权，匹配位置0位的“\"”，匹配成功，控制权交给“.*”。</p><p name=\"52-9539\">“.*”取得控制权后，由于“*”是匹配优先量词，在可匹配可不匹配的情况下，优先尝试匹配。从位置1处的“R”开始尝试匹配，匹配成功，继续向右匹配，匹配位置2处的“e”，匹配成功，继续向右匹配，直到匹配到结尾的“””，匹配成功，由于此时已匹配到字符串的结尾，所以“.*”结束匹配，将控制权交给正则表达式最后的“\"”。</p><p name=\"53-9ee3\">“\"”取得控制权后，由于已经在字符串结束位置，匹配失败，向前查找可供回溯的状态，控制权交给“.*”，由“.*”让出一个字符，也就是字符串结尾处的“””，再把控制权交给正则表达式最后的“\"”，由“\"”匹配字符串结尾处的“\"”，匹配成功。</p><p name=\"54-996c\">此时整个正则表达式匹配成功，其中“.*”匹配的内容为“Regex”，匹配过程中进行了一次回溯。</p><p name=\"55-7167\">接下来看一下非贪婪模式简单的匹配过程。</p><p name=\"56-9a98\">源字符串：\"Regex\"</p><p name=\"57-59fd\">正则表达式：\".*?\"</p><p name=\"58-4fd7\">&nbsp;</p><p name=\"59-8ce2\">&nbsp;</p><p name=\"60-6ecf\">图2-2</p><p name=\"61-9540\">看一下非贪婪模式的匹配过程。首先由第一个“\"”取得控制权，匹配位置0位的“\"”，匹配成功，控制权交给“.*?”。</p><p name=\"62-bfb9\">“.*?”取得控制权后，由于“*?”是忽略优先量词，在可匹配可不匹配的情况下，优先尝试不匹配，由于“*”等价于“{0,}”，所以在忽略优先的情况下，可以不匹配任何内容。从位置1处尝试忽略匹配，也就是不匹配任何内容，将控制权交给正则表达式最后的“””。</p><p name=\"63-bf12\">“\"”取得控制权后，从位置1处尝试匹配，由“\"”匹配位置1处的“R”，匹配失败，向前查找可供回溯的状态，控制权交给“.*?”，由“.*?”吃进一个字符，匹配位置1处的“R”，再把控制权交给正则表达式最后的“\"”。</p><p name=\"64-7099\">“\"”取得控制权后，从位置2处尝试匹配，由“\"”匹配位置1处的“e”，匹配失败，向前查找可供回溯的状态，重复以上过程，直到由“.*?”匹配到“x”为止，再把控制权交给正则表达式最后的“\"”。</p><p name=\"65-af47\">“\"”取得控制权后，从位置6处尝试匹配，由“\"”匹配字符串最后的“\"”，匹配成功。</p><p name=\"66-6bfd\">此时整个正则表达式匹配成功，其中“.*?”匹配的内容为“Regex”，匹配过程中进行了五次回溯。</p><p name=\"67-a0b6\">2.2.2&nbsp;&nbsp;贪婪还是非贪婪——匹配效率的抉择</p><p name=\"68-bcd6\">通过匹配原理的分析，可以看到，在匹配成功的情况下，贪婪模式进行了更少的回溯，而回溯的过程，需要进行控制权的交接，让出已匹配内容或匹配未匹配内容，并重新尝试匹配，在很大程度上降低匹配效率，所以贪婪模式与非贪婪模式相比，存在匹配效率上的优势。</p><p name=\"69-9f0d\">但2.2.1中的例子，仅仅是一个简单的应用，读者看到这里时，是否会存在这样的疑问，贪婪模式就一定比非贪婪模式匹配效率高吗？答案是否定的。</p><p name=\"70-5afd\">举例：</p><p name=\"71-b629\">需求：取得两个“\"”中的子串，其中不能再包含“\"”。</p><p name=\"72-7c95\">正则表达式一：\".*\"</p><p name=\"73-bad5\">正则表达式二：\".*?\"</p><p name=\"74-532c\">情况一：当贪婪模式匹配到更多不需要的内容时，可能存在比非贪婪模式更多的回溯。比如源字符串为“The word&nbsp;\"Regex\"means regular expression.”。</p><p name=\"75-674d\">情况二：贪婪模式无法满足需求。比如源字符串为“The phrase \"regular expression\" is called \"Regex\" for short.”。</p><p name=\"76-7e1c\">对于情况一，正则表达式一采用的贪婪模式，“.*”会一直匹配到字符串结束位置，控制权交给最后的“””，匹配不成功后，再进行回溯，由于多匹配的内容“means regular expression.”远远超过需匹配内容本身，所以采用正则表达式一时，匹配效率会比使用正则表达式二的非贪婪模式低。</p><p name=\"77-5de1\">对于情况二，正则表达式一匹配到的是“\"regular expression\" is called \"Regex\"”，连需求都不满足，自然也谈不上什么匹配效率的高低了。</p><p name=\"78-5b02\">以上两种情况是普遍存在的，那么是不是为了满足需求，又兼顾效率，就只能使用非贪婪模式了呢？当然不是，根据实际情况，变更匹配优先量词修饰的子表达式，不但可以满足需求，还可以提高匹配效率。</p><p name=\"79-8b2c\">源字符串：\"Regex\"</p><p name=\"80-64a7\">给出正则表达式三：\"[^\"]*\"</p><p name=\"81-94f9\">看一下正则表达式三的匹配过程。</p><p name=\"82-82b5\">&nbsp;</p><p name=\"83-7a6d\">&nbsp;</p><p name=\"84-ae82\">图2-3</p><p name=\"85-7b1f\">首先由第一个“\"”取得控制权，匹配位置0位的“\"”，匹配成功，控制权交给“[^\"]*”。</p><p name=\"86-5b0f\">“[^\"]*”取得控制权后，由于“*”是匹配优先量词，在可匹配可不匹配的情况下，优先尝试匹配。从位置1处的“R”开始尝试匹配，匹配成功，继续向右匹配，匹配位置2处的“e”，匹配成功，继续向右匹配，直到匹配到“x”，匹配成功，再匹配结尾的“””时，匹配失败，将控制权交给正则表达式最后的“\"”。</p><p name=\"87-9d64\">“””取得控制权后，匹配字符串结尾处的“””，匹配成功。</p><p name=\"88-5d31\">此时整个正则表达式匹配成功，其中“[^\"]*”匹配的内容为“Regex”，匹配过程中没有进行回溯。</p><p name=\"89-9d11\">将量词修饰的子表达式由范围较大的“.”，换成了排除型字符组“[^\"]”，使用的仍是贪婪模式，很完美的解决了需求和效率问题。当然，由于这一匹配过程没有进行回溯，所以也不需要记录回溯状态，这样就可以使用固化分组，对正则做进一步的优化。</p><p name=\"90-7b8f\">给出正则表达式四：\"(?&gt;[^\"]*)\"</p><p name=\"91-bc16\">固化分组并不是所有语言都支持的，如.NET支持，而Java就不支持，但是在Java中却可以使用更简单的占有优先量词来代替：\"[^\"]*+\"。</p><p name=\"92-8845\">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;贪婪还是非贪婪模式——再谈匹配效率</p><p name=\"93-95fe\">一般来说，贪婪与非贪婪模式，如果量词修饰的子表达式相同，比如“.*”和“.*?”，它们的应用场景通常是不同的，所以效率上一般不具有可比性。</p><p name=\"94-8463\">而对于改变量词修饰的子表达式，以满足需求时，比如把“.*”改为“[^\"]*”，由于修饰的子表达式已不同，也不具有直接的可对比性。但是在相同的子表达式，又都可以满足需求的情况下，比如“[^\"]*”和“[^\"]*?”，贪婪模式的匹配效率通常要高些。</p><p name=\"95-85c6\">同时还有一个事实就是，非贪婪模式可以实现的，通过优化量词修饰的子表达式的贪婪模式都可以实现，而贪婪模式可以实现的一些优化效果，却未必是非贪婪模式可以实现的。</p><p name=\"96-8b3c\">贪婪模式还有一点优势，就是在匹配失败时，贪婪模式可以更快速的报告失败，从而提升匹配效率。下面将全面考察贪婪与非贪婪模式的匹配效率。</p><p name=\"97-5451\">3.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;效率提升——演进过程</p><p name=\"98-6dc5\">在了解了贪婪与非贪婪模式的匹配基本原理之后，我们再来重新看一下正则效率提升的演进过程。</p><p name=\"99-b9b5\">需求：取得两个“\"”中的子串，其中不能再包含“\"”。</p><p name=\"100-97ac\">源字符串：The phrase \"regular expression\" is called \"Regex\" for short.</p><p name=\"101-9d3d\">正则表达式一：\".*\"</p><p name=\"102-7093\">正则表达式一匹配的内容为“\"regular expression\" is called \"Regex\"”，不符合要求。</p><p name=\"103-9079\">提出正则表达式二：\".*?\"</p><p name=\"104-be2f\">首先“\"”取得控制权，由位置0位开始尝试匹配，直到位置11处匹配成功，控制权交给“.*?”，匹配过程同2.2.1中非贪婪模式的匹配过程。“.*?”匹配的内容为“Regex”，匹配过程中进行了四次回溯。</p><p name=\"105-b5d9\">如何消除回溯带来的匹配效率的损失，就是使用更小范围的子表达式，采用贪婪模式，提出正则表达式三：\"[^\"]*\"</p><p name=\"106-5bd9\">首先“\"”取得控制权，由位置0位开始尝试匹配，直到位置11处匹配成功，控制权交给“[^\"]*”，匹配过程同2.2.2节中非贪婪模式的匹配过程。“[^\"]*”匹配的内容为“Regex”，匹配过程中没有进行回溯。</p><p name=\"107-a93c\">3.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;效率提升——更快的报告失败</p><p name=\"108-a9a0\">以上讨论的是匹配成功的演进过程，而对于一个正则表达式，在匹配失败的情况下，如果能够以最快的速度报告匹配失败，也会提升匹配效率，这或许是我们设计正则过程中最容易忽略的。而在源字符串数据量非常大，或正则表达式比较复杂的情况下，是否能够快速报告匹配失败，将对匹配效率产生直接的影响。</p><p name=\"109-7202\">下面将构建匹配失败的正则表达式，对匹配过程进行分析。</p><p name=\"110-87b0\">以下匹配过程分析中，源字符串统一为：The phrase \"regular expression\" is called \"Regex\" for short.</p><p name=\"111-599f\">3.2.1&nbsp;&nbsp;非贪婪模式匹配失败过程分析</p><p name=\"112-8c76\">&nbsp;</p><p name=\"113-6804\">&nbsp;</p><p name=\"114-56f4\">图3-1</p><p name=\"115-6259\">构建匹配失败的非贪婪模式的正则表达式：\".*?\"@</p><p name=\"116-77c0\">由于最后的“@”的存在，这个正则表达式最后一定是匹配失败的，那么看一下匹配过程。</p><p name=\"117-975e\">首先由“\"”取得控制权，由位置0处开始尝试匹配，匹配失败，直到图中标示的A处匹配成功，控制权交给“.*?”。</p><p name=\"118-b07a\">“.*?”取得控制权后，由A后面的位置开始尝试匹配，由于是非贪婪模式，首先忽略匹配，将控制权交给“\"”，同时记录一下回溯状态。“\"”取得控制权后，由A后面的位置开始尝试匹配，匹配字符“r”失败，查找可供回溯的状态，将控制权交给“.*?”，由“.*?”匹配字符“r”。重复以上过程，直到“.*?”匹配了B处前面的字符“n”，“\"”匹配了B处的字符“””，将控制权交给“@”。由“@”匹配接下来的空格“&nbsp;”，匹配失败，查找可供回溯的状态，控制权交给“.*?”，由“.*?”匹配空格。继续重复以上匹配过程，直到由“.*?”匹配到字符串结束位置，将控制权交给“\"”。由于已经是字符串结束位置，匹配失败，报告整个表达式在位置11处匹配失败，一轮匹配尝试结束。</p><p name=\"119-8170\">正则引擎传动装置使正则向前传动，进入下一轮尝试。后续匹配过程与第一轮尝试匹配过程基本类似，可以参考图3-1。</p><p name=\"120-8634\">从匹配过程中可以看到，非贪婪模式的匹配失败过程，几乎每一步都伴随着回溯过程，对匹配效率的影响是很大的。</p><p name=\"121-80c5\">3.2.2&nbsp;&nbsp;贪婪模式匹配失败过程分析——大范围子表达式</p><p name=\"122-7a44\">&nbsp;</p><p name=\"123-a2f0\">&nbsp;</p><p name=\"124-b00c\">图3-2</p><p name=\"125-c224\">PS：以上分析过程图示参考了《精通正则表达式》一书相关章节图示。</p><p name=\"126-c302\">构建匹配失败的贪婪模式的正则表达式：\".*\"@</p><p name=\"127-6dc6\">其中量词修饰的子表达式为匹配范围较大的“.”，由于最后的“@”的存在，这个正则表达式最后也是一定匹配失败的，看一下匹配过程。</p><p name=\"128-503a\">首先由“\"”取得控制权，由位置0处开始尝试匹配，匹配失败，直到图中标示的A处匹配成功，控制权交给“.*”。</p><p name=\"129-6b88\">“.*”取得控制权后，由A后面的位置开始尝试匹配，由于是贪婪模式，优化尝试匹配，一直匹配到字符串的结束位置，将控制权交给“\"”。“\"”取得控制权后，由于已经是字符串的结束位置，匹配失败，查找可供回溯的状态，将控制权交给“.*”，由“.*”让出已匹配字符“.”。重复以上过程，直到后面“\"”匹配了C处后面的字符“””，将控制权交给“@”。由“@”匹配接下来D处的空格“&nbsp;”，匹配失败，查找可供回溯的状态，控制权交给“.*”，由“.*”让出已匹配文本。继续重复以上匹配过程，直到由“.*”让出所有已匹配的文本到I处，将控制权交给“\"”。“\"”匹配失败，由于已经没有可供回溯的状态，报告整个表达式在位置11处匹配失败，一轮匹配尝试结束。</p><p name=\"130-7a7b\">正则引擎传动装置使正则向前传动，进入下一轮尝试。后续匹配过程与第一轮尝试匹配过程基本类似，可以参考图3-2。</p><p name=\"131-7e46\">从匹配过程中可以看到，大范围子表达式贪婪模式的匹配失败过程，从总体上看，与非贪婪模式没有什么区别，最终进行的回溯次数与非贪婪模式基本一致，对匹配效率的影响仍然很大。</p><p name=\"132-5b18\">3.2.3&nbsp;&nbsp;贪婪模式匹配失败过程分析——改进的子表达式</p><p name=\"133-6ca4\">&nbsp;</p><p name=\"134-6e5e\">&nbsp;</p><p name=\"135-bc3a\">图3-3</p><p name=\"136-a870\">构建匹配失败的贪婪模式的正则表达式：\"[^\"]*\"@</p><p name=\"137-bb86\">其中量词修饰的子表达式，改为匹配范围较小的排除型字符组“[^\"]”，由于最后的“@”的存在，这个正则表达式最后也是一定匹配失败的，看一下匹配过程。</p><p name=\"138-a8c2\">首先由“\"”取得控制权，由位置0处开始尝试匹配，匹配失败，直到图中标示的A处匹配成功，控制权交给“[^\"]*”。</p><p name=\"139-5c35\">“[^\"]*”取得控制权后，由A后面的位置开始尝试匹配，由于是贪婪模式，优先尝试匹配，一直匹配到B处，将控制权交给“\"”。“\"”匹配接下来的的字符“\"”，匹配成功，将控制权交给“@”。由“@”匹配接下来的空格“&nbsp;”，匹配失败，查找可供回溯的状态，控制权交给“[^\"]*”，由“[^\"]*”让出已匹配文本。继续重复以上匹配过程，直到由“[^\"]*”让出所有已匹配的文本到C处，将控制权交给“\"”。“\"”匹配失败，由于已经没有可供回溯的状态，报告整个表达式在位置11处匹配失败，一轮匹配尝试结束。</p><p name=\"140-aab1\">正则引擎传动装置使正则向前传动，进入下一轮尝试。后续匹配过程与第一轮尝试匹配过程基本类似，可以参考图3-3。</p><p name=\"141-7182\">从匹配过程中可以看到，使用了排除型字符组的贪婪模式的匹配失败过程，从总体上看，大量减少了每轮回溯的次数，可以有效的提升匹配效率。</p><p name=\"142-a061\">3.2.4&nbsp;&nbsp;贪婪模式匹配失败过程分析——固化分组</p><p name=\"143-adf6\">通过3.2.3节的分析可以知道，由于“[^\"]*”使用了排除型字符组，那么图3-3中，在A和B之间被匹配到的字符，就一定不会是字符“\"”，所以B到C之间回溯过程就是多余的，也就是说在这之间的可供回溯的状态完全可以不记录。.NET中可以使用固化分组，Java中可以使用占有优先量词来实现这一效果。</p><p name=\"144-80dd\">&nbsp;</p><p name=\"145-bfce\">&nbsp;</p><p name=\"146-a4fc\">图3-4</p><p name=\"147-8c9c\">首先由“\"”取得控制权，由位置0处开始尝试匹配，匹配失败，直到图中标示的A处匹配成功，控制权交给“(?&gt;[^\"]*)”。</p><p name=\"148-6d0a\">“(?&gt;[^\"]*)”取得控制权后，由A后面的位置开始尝试匹配，由于是贪婪模式，优先尝试匹配，一直匹配到B处，将控制权交给“\"”，在这一匹配过程中，不记录任何可供回溯的状态。“\"”匹配接下来的字符“””，匹配成功，将控制权交给“@”。由“@”匹配接下来的空格“&nbsp;”，匹配失败，查找可供回溯的状态，由于已经没有可供回溯的状态，报告整个表达式在位置11处匹配失败，一轮匹配尝试结束。</p><p name=\"149-9101\">正则引擎传动装置使正则向前传动，进入下一轮尝试。后续匹配过程与第一轮尝试匹配过程基本类似，可以参考图3-4。</p><p name=\"150-65ab\">从匹配过程中可以看到，使用了固化分组的贪婪模式的匹配失败过程，没有涉及到回溯，可以最大限度的提升匹配效率。</p><p name=\"151-c22f\">3.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非贪婪模式向贪婪模式的转换</p><p name=\"152-8a27\">使用匹配范围较大的子表达式时，贪婪模式与非贪婪模式匹配到的内容会有所不同，但是通过优化子表达式，非贪婪模式可以实现的匹配，贪婪模式都可以实现。</p><p name=\"153-68ff\">比如在实际应用中，匹配img标签的内容。</p><p name=\"154-5f04\">举例：</p><p name=\"155-7c06\">需求：取得img标签中的图片地址，src=后固定为“””</p><p name=\"156-a359\">源字符串：&lt;img class=\"test\"&nbsp;src=\"/img/logo.gif\"&nbsp;title=\"测试\"&nbsp;/&gt;</p><p name=\"157-6b33\">正则表达式一：&lt;img\\b.*?src=\"(.*?)\".*?&gt;</p><p name=\"158-813f\">匹配结果中，捕获组1的内容即为图片地址。可以看到，这个例子中使用的都是非贪婪模式，而根据上面章节的分析，后面两个非贪婪模式都可以使用排除型字符组，将非贪婪模式转换为贪婪模式。</p><p name=\"159-65a6\">正则表达式二：&lt;img\\b.*?src=\"([^\"]*)\"[^&gt;]*&gt;</p><p name=\"160-b5ee\">注：“src=\"…\"”和标签结束标记符“&gt;”之间的属性中，也可能出现字符“&gt;”，但那是极端情况，这里不予讨论。</p><p name=\"161-4f6f\">后两处非贪婪模式，可以通过排除型字符组转换为贪婪模式，提高匹配效率，而“src=”前的非贪婪模式，由于要排除的是一个字符序列“src=”，而不是单独的某一个或几个字符，所以不能使用排除型字符组。当然也不是没有办法，可以使用顺序环视来达到这一效果。</p><p name=\"162-b805\">正则表达式三：&lt;img\\b(?:(?!src=).)*src=\"([^\"]*)\"[^&gt;]*&gt;</p><p name=\"163-9750\">“(?!src=).”表示这样一个字符，从它开始，右侧不能是字符序列“src=”，而“(?:(?!src=).)*”就表示符合上面规则的字符，有0个或无限多个。这样就达到排除字符序列的目的，实现的效果同排除型字符组一样，只不过排除型字符组排除的是一个或多个字符，而这种环视结构排除的是一个或多个有序的字符序列。</p><p name=\"164-97a8\">但是以顺序环视的方式排除字符序列，由于在匹配每一个字符时，都要进行较多的判断，所以相对于非贪婪模式，是提升效率还是降低效率，要根据实际情况进行分析。对于简单的正则表达式，或是简单的源字符串，一般来说是非贪婪模式效率高些，而对于数量较大源字符串，或是复杂的正则表达式，一般来说是贪婪模式效率高些。</p><p name=\"165-78a0\">比如上面取得img标签中的图片地址需求，基本上用正则表达二就可以了；对于复杂的应用，如平衡组中，就需要使用结合环视的贪婪模式了。</p><p name=\"166-7a22\">以匹配嵌套div标签的平衡组为例：</p><p name=\"167-772b\">Regex&nbsp;reg =&nbsp;new&nbsp;Regex(@\"(?isx)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#匹配模式，忽略大小写，“.”匹配任意字符</p><p name=\"168-8972\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div[^&gt;]*&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#开始标记“&lt;div...&gt;”</p><p name=\"169-b965\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#分组构造，用来限定量词“*”修饰范围</p><p name=\"170-b782\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div[^&gt;]*&gt;&nbsp;&nbsp;(?&lt;Open&gt;)&nbsp;&nbsp;&nbsp;#命名捕获组，遇到开始标记，入栈，Open计数加1</p><p name=\"171-5db7\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#分支结构</p><p name=\"172-80a7\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;(?&lt;-Open&gt;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#狭义平衡组，遇到结束标记，出栈，Open计数减1</p><p name=\"173-b502\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#分支结构</p><p name=\"174-ba57\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?:(?!&lt;/?div\\b).)*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#右侧不为开始或结束标记的任意字符</p><p name=\"175-a97b\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#以上子串出现0次或任意多次</p><p name=\"176-a771\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?(Open)(?!))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#判断是否还有'OPEN'，有则说明不配对，什么都不匹配</p><p name=\"177-9291\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#结束标记“&lt;/div&gt;”</p><p name=\"178-9336\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\");</p><p name=\"179-b985\">“(?:(?!&lt;/?div\\b).)*”这里使用的就是结合环视的贪婪模式，虽然每匹一个字符都要做很多判断，但这种判断是基于字符的，速度很快，而如果这里使用非贪婪模式，那么每次要做的就是分支结构“|”的判断了，而分支结构是非常影响匹配效率的，其代价远远高于对确定字符的判断。而另外一个原因，就是贪婪模式可以结合固化分组来提升效率，而对非贪婪模式使用固化分组却是没有意义的。</p><p name=\"180-a263\">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;贪婪与非贪婪——最后的回顾</p><p name=\"181-5ad3\">4.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个例子的匹配原理回顾</p><p name=\"182-6ab6\">再回过头来看一下2.1.1节例子中正则，前面从应用角度进行了分析，但讨论过匹配原理后会发现，匹配过程并不是那么简单的，下面从匹配原理角度分析的匹配过程。</p><p name=\"183-5f17\">&nbsp;</p><p name=\"184-5a96\">&nbsp;</p><p name=\"185-4e27\">图4-1</p><p name=\"186-53cd\">首先由“&lt;”取得控制权，由位置0位开始尝试匹配，匹配字符“a”，匹配失败，第一轮匹配结束。第二轮匹配从位置1开始尝试匹配，同样匹配失败。第三轮从位置3开始尝试匹配，匹配字符“&lt;”，匹配成功，控制权交给“d”。</p><p name=\"187-5a1b\">“d”尝试匹配字符“d”，匹配成功，控制权交给“i”。重复以上过程，直到由“&gt;”匹配到字符“&gt;”，控制权交给“.*”。</p><p name=\"188-bfc4\">“.*”属于贪婪模式，将从B处后的字符“t”开始，一直匹配到E处，也就是字符串结束位置，将控制权交给“&lt;”。</p><p name=\"189-69ca\">“&lt;”从字符串结束位置尝试匹配，匹配失败，向前查找可供回溯的状态，把控制权交给“.*”，由“.*”让出一个字符“c”，把控制权再交给“&lt;”，尝试匹配，匹配失败，向前查找可供回溯的状态。一直重复以上过程，直到“.*”让出已匹配的字符“&lt;”，实际上也就是让出了已匹配的子串“&lt;/div&gt;cc”为止，“&lt;”才匹配字符“&lt;”成功，控制权交给“/”。</p><p name=\"190-8a1a\">接下来由“/”、“d”、“i”、“v”分别匹配对应的字符成功，此时整个正则表达式匹配完毕。</p><p name=\"191-87a2\">4.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;贪婪与非贪婪——量词的细节</p><p name=\"192-6970\">4.2.1&nbsp;&nbsp;区间量词的非贪婪模式</p><p name=\"193-a387\">前面提到的非贪婪模式，一直都是使用的“*?”，而没有涉及到其它的区间量词，对于“*?”和“+?”这样的非贪婪模式，大多数接触过正则表达式的人都可以理解，但是对于区间量词的非贪婪模式，比如“{m,n}?”，要么是没见过，要么是不理解，主要是这种应用场景非常少，所以被忽略了。</p><p name=\"194-583c\">首先需要明确的一点，就是量词“{m,n}”是匹配优先量词，虽然它有了上限，但是在达到上限之前，能够匹配，还是要尽可能多的匹配的。而“{m,n}?”就是对应的忽略优先量词了，在可匹配可不匹配的情况下，尽可能少的匹配。</p><p name=\"195-692e\">接下来举一个例子说明这种非贪婪模式的应用。</p><p name=\"196-a555\">举例（参考&nbsp;限制字符长度与最小匹配）：</p><p name=\"197-9fe4\">需求：如何限制在长度为100的字符串中，从头匹配到最先出现的abc</p><p name=\"198-ae7a\">csdn.{1,100}abc&nbsp;这样写是最大匹配(1-100个字符串中，我需要最小的)</p><p name=\"199-a408\">比如csdnfddabckjdsfjabc，匹配结果应为：csdnfddabc</p><p name=\"200-b51d\">正则表达式：csdn.{1,100}?abc</p><p name=\"201-83d4\">或许对这个例子还有人不是很理解，但是想想，其实“*”就等价于“{0,}”，“+”就等价于“{1,}”，“*?”也就是“{0,}?”，抽象出来也就是“{m,}?”，即上限为无穷大。如果上限为一个固定值，那就是“{m,n}?”，这样应该也就可以理解了。</p><p name=\"202-c31a\">“{m}”没有放在匹配优先量词中，同样的，“{m}?”虽然被部分语言所支持，但是也没有放在忽略优先量词中，主要是因为这两种量词，实现的效果是一样的，只有被修饰的子表达式匹配m次才能匹配成功，且没有可供回溯的状态，所以也不存在是匹配优先还是忽略优先的问题，也就不在本文的讨论范围内。事实上即使讨论也没有意义的，只要知道它们的匹配行为也就是了。</p><p name=\"203-b787\">4.2.2&nbsp;&nbsp;忽略优先量词的匹配下限</p><p name=\"204-bccb\">对于匹配优先量词的匹配下限很好理解，“?”等价于“{0,1}”，它修饰的子表达式，最少匹配0次，最多匹配1次；“*”等价于“{0,}”，它修饰的子表达式，最少匹配0次，最多匹配无穷多次；“+”等价于“{1,}”，它修饰的子表达式，最少匹配1次，最多匹配无穷多次。</p><p name=\"205-5459\">对于忽略优先量词的下限，也是容易忽略的。</p><p name=\"206-7dcb\">“??”也是忽略优先量词，被修饰的子表达式使用的也是非贪婪模式，“??”修饰的子表达式，最少匹配0次，最多匹配1次。在匹配过程中，遵循非贪婪模式匹配原则，先不匹配，即匹配0次，记录回溯状态，只有不得不匹配时，才去尝试匹配。</p><p name=\"207-a48d\">“*?”修饰的子表达式，最少匹配0次，最多匹配无穷多次；“+?”修饰的子表达式，最少匹配1次，最多匹配无穷多次，“+?”虽然使用的是非贪婪模式，在匹配过程中，首先要匹配一个字符，之后才是忽略匹配的，这一点也需要注意。</p><p name=\"208-7655\">4.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;贪婪与非贪婪模式小结</p><p name=\"209-9d40\">Ø&nbsp;&nbsp;从语法角度看贪婪与非贪婪</p><p name=\"210-61a0\">被匹配优先量词修饰的子表达式，使用的是贪婪模式；被忽略优先量词修饰的子表达式，使用的是非贪婪模式。</p><p name=\"211-944c\">匹配优先量词包括：“{m,n}”、“{m,}”、“?”、“*”和“+”。</p><p name=\"212-5387\">忽略优先量词包括：“{m,n}?”、“{m,}?”、“??”、“*?”和“+?”。</p><p name=\"213-74d4\">Ø&nbsp;&nbsp;从应用角度看贪婪与非贪婪</p><p name=\"214-a1a6\">贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配；而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。</p><p name=\"215-5645\">Ø&nbsp;&nbsp;从匹配原理角度看贪婪与非贪婪</p><p name=\"216-abc1\">能达到同样匹配结果的贪婪与非贪婪模式，通常是贪婪模式的匹配效率较高。</p><p name=\"217-b8ab\">所有的非贪婪模式，都可以通过修改量词修饰的子表达式，转换为贪婪模式。</p><p name=\"218-a959\">贪婪模式可以与固化分组结合，提升匹配效率，而非贪婪模式却不可以。</p><p name=\"219-b150\" cur=\"true\"><br></p>","brief":"1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;概述贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可","fav":[],"comment":0,"read":0}]